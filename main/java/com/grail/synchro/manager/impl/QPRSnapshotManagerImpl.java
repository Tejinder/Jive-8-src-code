package com.grail.synchro.manager.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.grail.synchro.SynchroConstants;
import com.grail.synchro.SynchroGlobal;
import com.grail.synchro.beans.Project;
import com.grail.synchro.beans.ProjectCostDetailsBean;
import com.grail.synchro.beans.QPRProjectCostSnapshot;
import com.grail.synchro.beans.QPRProjectSnapshot;
import com.grail.synchro.beans.QPRSnapshot;
import com.grail.synchro.beans.SpendByReportBean;
import com.grail.synchro.beans.SpendReportExtractFilter;
import com.grail.synchro.dao.ProjectDAONew;
import com.grail.synchro.dao.QPRSnapshotDAO;
import com.grail.synchro.dao.util.SynchroDAOUtil;
import com.grail.synchro.manager.QPRSnapshotManager;
import com.grail.synchro.util.SynchroUtils;
import com.jivesoftware.community.JiveGlobals;
import com.jivesoftware.util.StringUtils;

/**
 * @author Tejinder
 */
public class QPRSnapshotManagerImpl implements QPRSnapshotManager {

    private static final Logger LOG = Logger.getLogger(QPRSnapshotManagerImpl.class);
    private QPRSnapshotDAO qprSnapshotDAO;
    private ProjectDAONew projectDAONew;
  

    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void saveSnapshot(final QPRSnapshot qprSnapshot) {
    	qprSnapshotDAO.saveSnapshot(qprSnapshot);
    	//List<Project> allProjects = projectDAONew.getAllProjectsForQPRSnapshot();
    	// We need to save the Snapshot for only the Selected Budget Year. // http://redmine.nvish.com/redmine/issues/382
    	List<Project> allProjects = projectDAONew.getBudgetYearProjectsForQPRSnapshot(qprSnapshot.getBudgetYear());
    	for(Project project:allProjects)
    	{
    		QPRProjectSnapshot qprProjectSnapShot = new QPRProjectSnapshot();
    		qprProjectSnapShot.setSnapShotID(qprSnapshot.getSnapShotID());
    		qprProjectSnapShot.setProjectID(project.getProjectID());
    		qprProjectSnapShot.setProjectName(project.getName());
    		qprProjectSnapShot.setBudgetLocation(project.getBudgetLocation());
    		qprProjectSnapShot.setMethodologyDetails(project.getMethodologyDetails());
    		
    		qprProjectSnapShot.setCategoryType(project.getCategoryType());
    		
    		
    		/*if(project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==2)
    		{
    			qprProjectSnapShot.setBrandSpecificStudy(project.getBrandSpecificStudy());
    			qprProjectSnapShot.setBrandSpecificStudyType(project.getBrandSpecificStudyType());
    			
    		}
    		else
    		{
    			qprProjectSnapShot.setBrandSpecificStudyType(project.getBrandSpecificStudyType());
    			qprProjectSnapShot.setBrand(project.getBrand());
    		}*/
    		
    		
    		
    		
    		qprProjectSnapShot.setBrandSpecificStudy(project.getBrandSpecificStudy());
			qprProjectSnapShot.setBrandSpecificStudyType(project.getBrandSpecificStudyType());
			qprProjectSnapShot.setBrand(project.getBrand());
			
			if(project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==1)
    		{
    			qprProjectSnapShot.setBrandSpecificStudyType(null);
    		}
    		
    		if(project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==2)
    		{
    			qprProjectSnapShot.setBrand(null);
    		}
			
    		qprProjectSnapShot.setTotalCost(project.getTotalCost());
    		qprProjectSnapShot.setTotalCostCurrency(project.getTotalCostCurrency());
    		qprProjectSnapShot.setCreationBy(qprSnapshot.getCreationBy());
    		qprProjectSnapShot.setModifiedBy(qprSnapshot.getModifiedBy());
    		qprProjectSnapShot.setCreationDate(qprSnapshot.getCreationDate());
    		qprProjectSnapShot.setModifiedDate(qprSnapshot.getModifiedDate());
    		
    	
    		// Setting the Meta Data Fields
    		if(project.getBudgetLocation()!=null && SynchroUtils.getRegionName(project.getBudgetLocation())!=null)
    		{
    			qprProjectSnapShot.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
    		}
    	
    		if(project.getBudgetLocation()!=null && SynchroUtils.getAreaName(project.getBudgetLocation())!=null)
    		{
    			qprProjectSnapShot.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
    		}
    		
    		if(project.getBudgetLocation()!=null && SynchroUtils.getT20_T40Name(project.getBudgetLocation())!=null)
    		{
    			qprProjectSnapShot.setT20_t40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
    		}
    		
    		String methGroup = SynchroGlobal.getMethodologyGroupName(project.getMethodologyDetails().get(0));
    		if(methGroup!=null)
    		{
    			qprProjectSnapShot.setMethGroup(methGroup);
    		}
    		
    		// Dunhill, Kent, Rothmans, Vogue and Lucky Strike are GDB Brands, all other are non GDB Brands
    		
    		if(project.getBrandSpecificStudy().intValue()==1)
    		{
	    		String brandType = SynchroUtils.getBrandBrandTypeFields().get(project.getBrand().intValue());
	    		if(brandType!=null)
	    		{
	    			qprProjectSnapShot.setBrandType(brandType);
	    		}
	    		else
	    		{
	    			qprProjectSnapShot.setBrandType("Non-GDB");
	    		}
    		}
    		else
    		{
    			qprProjectSnapShot.setBrandType("Non-GDB");
    		}
    		
    		
    		qprProjectSnapShot.setIsFreeze(true);
    		
    		qprSnapshotDAO.saveProjectSnapshot(qprProjectSnapShot);
    		
    		// Save the QPR Project Cost Details
    		List<ProjectCostDetailsBean> projectCostDetails = projectDAONew.getProjectCostDetails(project.getProjectID());
    		{
    			if(projectCostDetails!=null && projectCostDetails.size()>0)
    			{
    				for(ProjectCostDetailsBean projectCostDetail : projectCostDetails)
    				{
	    				QPRProjectCostSnapshot qprProjectCostSnapShot = new QPRProjectCostSnapshot();
	    				qprProjectCostSnapShot.setSnapShotID(qprSnapshot.getSnapShotID());
	    				qprProjectCostSnapShot.setProjectID(project.getProjectID());
	    				qprProjectCostSnapShot.setAgencyId(projectCostDetail.getAgencyId());
	    				
	    				if(SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())==1)
        				{
	    					qprProjectCostSnapShot.setAgencyType("Kantar");
        				}
        				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())==2)
        				{
        					qprProjectCostSnapShot.setAgencyType("Non-Kantar");
        				}
        				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(projectCostDetail.getAgencyId().intValue())==3)
        				{
        					//qprProjectCostSnapShot.setAgencyType("Not Classified");
        					qprProjectCostSnapShot.setAgencyType("Unclassified Agency");
        				}
	    				
	    				qprProjectCostSnapShot.setCostComponent(projectCostDetail.getCostComponent());
	    				qprProjectCostSnapShot.setCostCurrency(projectCostDetail.getCostCurrency());
	    				qprProjectCostSnapShot.setEstimatedCost(projectCostDetail.getEstimatedCost());
	    				qprSnapshotDAO.saveProjectCostSnapshot(qprProjectCostSnapShot);
    				}
    			}
    		}
    		
    	}
    	
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void deleteSnapshot(final Long snapshotId)
    {
    	qprSnapshotDAO.deleteSnapshotProjectCost(snapshotId);
    	qprSnapshotDAO.deleteSnapshotProject(snapshotId);
    	qprSnapshotDAO.deleteSnapshot(snapshotId);
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void updateProjectSnapshotFreeze(final QPRProjectSnapshot qprProjectSnapshot)
    {
    	qprSnapshotDAO.updateProjectSnapshotFreeze(qprProjectSnapshot);
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void updateProjectSnapshot(final QPRProjectSnapshot qprProjectSnapshot)
    {
    	qprSnapshotDAO.updateProjectSnapshot(qprProjectSnapshot);
    	
    	// Delete the Project Snapshot Cost Details and then update the latest Project Cost Details 
    	qprSnapshotDAO.deleteProjectCostDetailsSnapshot(qprProjectSnapshot.getSnapShotID(), qprProjectSnapshot.getProjectID());
    	// Save the QPR Project Cost Details
		List<ProjectCostDetailsBean> projectCostDetails = projectDAONew.getProjectCostDetails(qprProjectSnapshot.getProjectID());
		{
			if(projectCostDetails!=null && projectCostDetails.size()>0)
			{
				for(ProjectCostDetailsBean projectCostDetail : projectCostDetails)
				{
    				QPRProjectCostSnapshot qprProjectCostSnapShot = new QPRProjectCostSnapshot();
    				qprProjectCostSnapShot.setSnapShotID(qprProjectSnapshot.getSnapShotID());
    				qprProjectCostSnapShot.setProjectID(qprProjectSnapshot.getProjectID());
    				qprProjectCostSnapShot.setAgencyId(projectCostDetail.getAgencyId());
    				qprProjectCostSnapShot.setCostComponent(projectCostDetail.getCostComponent());
    				qprProjectCostSnapShot.setCostCurrency(projectCostDetail.getCostCurrency());
    				qprProjectCostSnapShot.setEstimatedCost(projectCostDetail.getEstimatedCost());
    				qprSnapshotDAO.saveProjectCostSnapshot(qprProjectCostSnapShot);
				}
			}
		}
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void saveProjectSnapshot(final QPRProjectSnapshot qprProjectSnapshot)
    {
    	qprSnapshotDAO.saveProjectSnapshot(qprProjectSnapshot);
    	
    	// Delete the Project Snapshot Cost Details and then update the latest Project Cost Details 
    	qprSnapshotDAO.deleteProjectCostDetailsSnapshot(qprProjectSnapshot.getSnapShotID(), qprProjectSnapshot.getProjectID());
    	// Save the QPR Project Cost Details
		List<ProjectCostDetailsBean> projectCostDetails = projectDAONew.getProjectCostDetails(qprProjectSnapshot.getProjectID());
		{
			if(projectCostDetails!=null && projectCostDetails.size()>0)
			{
				for(ProjectCostDetailsBean projectCostDetail : projectCostDetails)
				{
    				QPRProjectCostSnapshot qprProjectCostSnapShot = new QPRProjectCostSnapshot();
    				qprProjectCostSnapShot.setSnapShotID(qprProjectSnapshot.getSnapShotID());
    				qprProjectCostSnapShot.setProjectID(qprProjectSnapshot.getProjectID());
    				qprProjectCostSnapShot.setAgencyId(projectCostDetail.getAgencyId());
    				qprProjectCostSnapShot.setCostComponent(projectCostDetail.getCostComponent());
    				qprProjectCostSnapShot.setCostCurrency(projectCostDetail.getCostCurrency());
    				qprProjectCostSnapShot.setEstimatedCost(projectCostDetail.getEstimatedCost());
    				qprSnapshotDAO.saveProjectCostSnapshot(qprProjectCostSnapShot);
				}
			}
		}
    }


    @Override
    public List<QPRSnapshot> getAllSnapshots() {
    	List<QPRSnapshot> qprSnapShotList = qprSnapshotDAO.getAllSnapshots(); 
    	if(qprSnapShotList!=null && qprSnapShotList.size()>0)
    	{
    		for(QPRSnapshot qprSnapShot: qprSnapShotList)
    		{
    			List<Long> projectIds = qprSnapshotDAO.getAllOpenProjectIds(qprSnapShot.getSnapShotID());
    			qprSnapShot.setOpenProjectIds(projectIds);
    			if(projectIds!=null && projectIds.size()>0)
    			{
    				qprSnapShot.setProjectIds(Joiner.on(",").join(projectIds));
    			}
    			
    			List<Long> openBLs = qprSnapShot.getOpenBudgetLocations();
    			List<Long> openProjectIdBL = new ArrayList<Long>();
    			List<Long> openProjectIdIndividual = new ArrayList<Long>();
    			
    			// This logic is for displaying whether the project is opened individually or the entire Budget Location is opened.
    			if(openBLs!=null && openBLs.size()>0)
    			{
    				for(Long openBL:openBLs)
    				{
    					openProjectIdBL.addAll(qprSnapshotDAO.getAllOpenProjectIds(qprSnapShot.getSnapShotID(), openBL));
    				}
    				if(openProjectIdBL!=null && openProjectIdBL.size()>0)
        			{
        				qprSnapShot.setOpenBLProjectIds(Joiner.on(",").join(openProjectIdBL));
        			}
    				if(projectIds!=null && projectIds.size()>0)
        			{
    					openProjectIdIndividual.addAll(projectIds);
    					openProjectIdIndividual.removeAll(openProjectIdBL);
    					//openProjectIdIndividual.addAll(projectIds);
    					qprSnapShot.setOpenIndividualProjectIds(Joiner.on(",").join(openProjectIdIndividual));
        			}
        			
    			}
    			else
    			{
    				if(projectIds!=null && projectIds.size()>0)
        			{
        				qprSnapShot.setOpenIndividualProjectIds(Joiner.on(",").join(projectIds));
        			}
    			}
    			
    			
    		}
    	}
    	return qprSnapShotList;
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void updateOpenBudgetLocation(final Long snapShotId, final Long budgetLocation)
    {
    	qprSnapshotDAO.updateOpenBudgetLocation(snapShotId, budgetLocation);
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void updateFreezeBudgetLocation(final Long snapShotId, final String budgetLocation)
    {
    	qprSnapshotDAO.updateFreezeBudgetLocation(snapShotId, budgetLocation);
    }
    
    @Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
    public void updateFreezeBudgetLocation(final Long snapShotId)
    {
    	qprSnapshotDAO.updateFreezeBudgetLocation(snapShotId);
    }
    
    @Override
    public List<Long> getAllOpenProjectIds(final Long snapShotId, final Long budgetLocation) 
    {
    	List<Long> projectIds = qprSnapshotDAO.getAllOpenProjectIds(snapShotId, budgetLocation);
    	return projectIds;
    }
    
    @Override
    public Long getBudgetYear(final Long snapShotId)
    {
    	List<Long> budgetYearList =  qprSnapshotDAO.getBudgetYear(snapShotId);
    	return budgetYearList.get(0);
    }
    
    @Override
    public QPRSnapshot getSnapshot(final Long snapShotId)
    {
    	return qprSnapshotDAO.getSnapshot(snapShotId);
    }
    
    @Override
    public List<QPRProjectSnapshot> getProjectSnapshot(final Long snapShotId)
    {
    	return qprSnapshotDAO.getProjectSnapshot(snapShotId);
    }
    
    @Override
    public QPRProjectSnapshot getProjectSnapshot(final Long snapShotId, final Long projectId)
    {
    	return qprSnapshotDAO.getProjectSnapshot(snapShotId, projectId).get(0);
    }
    
    @Override
    public List<QPRProjectCostSnapshot> getProjectCostSnapshot(final Long snapShotId)
    {
    	return qprSnapshotDAO.getProjectCostSnapshot(snapShotId);
    }
    
    @Override
    public List<QPRProjectCostSnapshot> getProjectCostSnapshot(final Long snapShotId, final Long projectId)
    {
    	return qprSnapshotDAO.getProjectCostSnapshot(snapShotId, projectId);
    }
    
    
    @Override
    public Long getSnapShotId(final Integer freezeSpendFor, final Integer budgetYear) 
    {
    	return qprSnapshotDAO.getSnapShotId(freezeSpendFor, budgetYear);
    }
    
    @Override
    public List<SpendByReportBean> getSpendByProjects(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	try
    	{
	    	//List<Project> allProjects = projectDAONew.getBudgetYearProjectsForQPRSnapshot(budgetYear);
    		
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    		Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    		Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    		Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    		Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    		
    		List<Project> allProjects = new ArrayList<Project>();
    		
    		List<Long> selectedQPRs = new ArrayList<Long>();
    		
    		if(fetchLatestCostProjects)
    		{
    			allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear,spendReportFilter);
    			
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
    			{
    				selectedQPRs.add(coplaSnapShotId);
    			}
    			else
    			{
    				coplaSnapShotId=new Long("0");
    				
    			}
    			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    			{
    				selectedQPRs.add(qpr1SnapShotId);
    			}
    			else
    			{
    				qpr1SnapShotId=new Long("0");
    				
    			}
    			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
    			{
    				selectedQPRs.add(qpr2SnapShotId);
    			}
    			else
    			{
    				qpr2SnapShotId=new Long("0");
    				
    			}
    			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    			{
    				selectedQPRs.add(qpr3SnapShotId);
    			}
    			else
    			{
    				qpr3SnapShotId=new Long("0");
    				
    			}
    			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    			{
    				selectedQPRs.add(fullYearSnapShotId);
    			}
    			else
    			{
    				fullYearSnapShotId=new Long("0");
    				
    			}
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
	    			
    				// This is done for fetching the projects only for that particular selected Snapshot.
    				//List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	    			List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter, selectedQPRs);
	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    			}
    			}
    		}
    		
	    	
	    	for(Project project: allProjects)
	    	{
	    		SpendByReportBean spendByBean = new SpendByReportBean();
	    		
	    		
	    		
	    		if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
	    		{
	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(coplaSnapShotId, project.getProjectID());
	    			if(projectSnapShot!=null && projectSnapShot.size()>0)
	    			{
	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			}
	            			else
	            			{
	            				spendByBean.setCoplaTotalCost(null);
	            			}
	    				}
	    			}
	    			else
	    			{
	    				spendByBean.setCoplaTotalCost(null);
	    			}
	    			
	    		}
	    		if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
	    		{
	    			//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
	    			{
	    				//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{	
	    						spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr1TotalCost(null);
	    					}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr1TotalCost(null);
	    					}
	    				}
	    			}
	    			else
	    			{
	    				spendByBean.setQpr1TotalCost(null);
	    			}
	    		}
	    		if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0 )
	    		{
	    			//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
	    			{
	    				//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
	    			}
	    			else
	    			{
	    				spendByBean.setQpr2TotalCost(null);
	    			}
	    		}
	    		if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
	    		{
	    			//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
	    			{
	    				//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
	    			}
	    			else
	    			{
	    				spendByBean.setQpr3TotalCost(null);
	    			}
	    		}
	    		if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
	    		{
	    			//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
	    			{
	    				//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
	    			}
	    			else
	    			{
	    				spendByBean.setFullYearTotalCost(null);
	    			}
	    		}
	    		
	    		//spendByBean.setLatestTotalCost(project.getTotalCost());
	    		
	    		// In case the budget year of the project has been changed, then in that case the Latest cost should not be shown for Spend By projects
	    		if(project.getBudgetYear()!=null && project.getBudgetYear().intValue()==budgetYear.intValue())
	    		{
		    		if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
		    			if(project.getTotalCost()!=null)
						{
		    				spendByBean.setLatestTotalCost(project.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
		    			else
		    			{
		    				spendByBean.setLatestTotalCost(null);
		    			}
					}
					else
					{
						if(project.getTotalCost()!=null)
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    			spendByBean.setLatestTotalCost(BigDecimal.valueOf(project.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
	    		}
	    		else
	    		{
	    			spendByBean.setLatestTotalCost(null);
	    		}
	    		
	    		spendByBean.setProjectId(project.getProjectID());
	    		spendByBean.setProjectName(project.getName());
	    		spendByBean.setBudgetLocation(project.getBudgetLocation());
	    		spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(project.getBudgetLocation()));
	    		
	    		spendByBean.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
				spendByBean.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
				
				if(project.getCategoryType()!=null && project.getCategoryType().size()>0)
				{
					String categoryIds = StringUtils.join(project.getCategoryType(),",");
					spendByBean.setCategoryTypes(categoryIds);
					spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryIds));
				}
				
				if(project.getMethodologyDetails()!=null && project.getMethodologyDetails().size()>0)
				{
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(StringUtils.join(project.getMethodologyDetails(),",")));
				}
				
				/*if(project.getBrand()!=null)
				{
					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(project.getBrand().intValue()));
				}
				*/
				
				// This fix is done as part of http://redmine.nvish.com/redmine/issues/546, in which only Brand names are coming and not the other ones.
				if(project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==2)
    			{
    				if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==1)
    				{
    					spendByBean.setBrandNonBrandName("Multi-Brand Study");
    				}
    				else if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==2)
    				{
    					spendByBean.setBrandNonBrandName("Non-brand related");
    				}
    				else
    				{
    					spendByBean.setBrandNonBrandName(" ");
    				}
    			}
    			else
    			{
    				if(project.getBrand()!=null)
    				{
    					if(SynchroGlobal.getBrands().get(project.getBrand().intValue())!=null)
    					{
    						spendByBean.setBrandNonBrandName(SynchroGlobal.getBrands().get(project.getBrand().intValue()));
    					}
    					else
    					{
    						spendByBean.setBrandNonBrandName(" ");
    					}
    				}
    				else
    				{
    					spendByBean.setBrandNonBrandName(" ");
    				}
    			}
				
	    		
	    		spendByProjectsList.add(spendByBean);
	    	}
	    	if(allProjects!=null && allProjects.size()>0)
	    	{
	    		
	    	}
	    	else
	    	{
	    		// adding Blank Row
	    		SpendByReportBean spendByBean = new SpendByReportBean();
	    		spendByBean.setCoplaTotalCost(null);
	    		spendByBean.setQpr1TotalCost(null);
	    		spendByBean.setQpr2TotalCost(null);
	    		spendByBean.setQpr3TotalCost(null);
	    		spendByBean.setFullYearTotalCost(null);
	    		spendByBean.setLatestTotalCost(null);
	    		
	    		spendByBean.setProjectId(null);
	    		spendByBean.setProjectName("");
	    		spendByBean.setBudgetLocationName("");
	    		spendByProjectsList.add(spendByBean);
	    		
	    	}
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}
    	
    	return spendByProjectsList;
    }
    
    
    @Override
    public Map<String,List<SpendByReportBean>> getSpendByProjects(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByProjectMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
    	
    	LinkedHashMap<String, Project> spendByProjectKey = new LinkedHashMap<String, Project>();
    	
    	LinkedHashMap<String, Project> sortedSpendByProjectKey = new LinkedHashMap<String, Project>();
    	
    	//First get the projects and make the key
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
    		Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
    		Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
    		Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
    		Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
    		
    		List<Project> allProjects = new ArrayList<Project>();
    		List<Long> selectedQPRs = new ArrayList<Long>();
    		
    		
    		if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				selectedQPRs.add(coplaSnapShotId);
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr1SnapShotId);
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr2SnapShotId);
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr3SnapShotId);
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				selectedQPRs.add(fullYearSnapShotId);
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			
    		if(fetchLatestCostProjects)
    		{
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				// This is done for fetching the projects only for that particular selected Snapshot.
    				//List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	    			List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter, selectedQPRs);
	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				allProjects = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),projectIds,selectedQPRs);
	    				for(Project project: allProjects)
	        			{
	        				String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	        				spendByProjectKey.put(s,project);
	        			}
	    				

	        			for(Project project: allProjects)
	    				{
	    					String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	    					for(String key: spendByProjectKey.keySet())
	    					{
	    						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
	    						{
	    							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
	    						}
	    					}
	    				}
	    			}
    			}
    			
    			allProjects = new ArrayList<Project>();
    			
    			allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter);
    			
    			for(Project project: allProjects)
    			{
    				String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
    				spendByProjectKey.put(s, project);
    			}
    			
    			
    			for(Project project: allProjects)
				{
					String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
					for(String key: spendByProjectKey.keySet())
					{
						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
						{
							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
						}
					}
				}
    			
    		}
    		else
    		{

    			// http://redmine.nvish.com/redmine/issues/423
    			
    			
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
	    			
    				// This is done for fetching the projects only for that particular selected Snapshot.
    				//List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	    			List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter, selectedQPRs);
	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				allProjects = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),projectIds,selectedQPRs);
	    				
	    				for(Project project: allProjects)
	        			{
	        				String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	        				spendByProjectKey.put(s,project);
	        			}
	    				
	    				// This is done so that the same project Ids should remain together
	    				for(Project project: allProjects)
	    				{
	    					String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	    					for(String key: spendByProjectKey.keySet())
	    					{
	    						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
	    						{
	    							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
	    						}
	    					}
	    				}
	    			}
    			}
    		}		
    		
    			for(String key: sortedSpendByProjectKey.keySet())
    			{
    				//String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
    				Project project = spendByProjectKey.get(key);
    				
    				SpendByReportBean spendByBean = new SpendByReportBean();
    				
    				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
    	    		
    	    		if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
    	    		{
    	    			//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(coplaSnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			
    	    			/*if(projectSnapShot!=null && projectSnapShot.size()>0)
    	    			{
    	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setCoplaTotalCost(null);
    	    					}
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			if(projectSnapShot.get(0).getTotalCost()!=null)
    	            			{
    	            				spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	            			}
    	            			else
    	            			{
    	            				spendByBean.setCoplaTotalCost(null);
    	            			}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				spendByBean.setCoplaTotalCost(null);
    	    			}*/
    	    			List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getProjectAgencySnapshot(coplaSnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
    					{
    						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    							
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			
    	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					
    	    				}
    					}
    	    			
    	    		}
    	    		if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    	    		{
    	    			//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
    	    			/*List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
    	    			{
    	    				//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
    	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{	
    	    						spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr1TotalCost(null);
    	    					}
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr1TotalCost(null);
    	    					}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				spendByBean.setQpr1TotalCost(null);
    	    			}*/
    	    			List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getProjectAgencySnapshot(qpr1SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
    					{
    						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    							
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			
    	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					
    	    				}
    					}
    	    		}
    	    		if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0 )
    	    		{
    	    		
    	    		/*	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
    	    			{
    	    				//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
    	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr2TotalCost(null);
    	    					}
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr2TotalCost(null);
    	    					}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				spendByBean.setQpr2TotalCost(null);
    	    			}*/
    	    			
    	    			List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getProjectAgencySnapshot(qpr2SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
    					{
    						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    							
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			
    	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					
    	    				}
    					}
    	    		}
    	    		if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    	    		{
    	    			/*
    	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
    	    			{
    	    				//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
    	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr3TotalCost(null);
    	    					}
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setQpr3TotalCost(null);
    	    					}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				spendByBean.setQpr3TotalCost(null);
    	    			}*/
    	    			
    	    			List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getProjectAgencySnapshot(qpr3SnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
    					{
    						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    							
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			
    	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					
    	    				}
    					}
    	    		}
    	    		if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    	    		{
    	    			/*
    	    			List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
    	    			{
    	    				//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
    	    				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setFullYearTotalCost(null);
    	    					}
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	    					if(projectSnapShot.get(0).getTotalCost()!=null)
    	    					{
    	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					}
    	    					else
    	    					{
    	    						spendByBean.setFullYearTotalCost(null);
    	    					}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				spendByBean.setFullYearTotalCost(null);
    	    			}
    	    			*/
    	    			List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getProjectAgencySnapshot(fullYearSnapShotId, project.getProjectID(),project.getName(), project.getBudgetLocation());
    	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
    					{
    						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    	    				{
    							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    							
    	    				}
    	    				else
    	    				{
    	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    	            			
    	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    	    					
    	    				}
    					}
    	    		}
    	    		
    	    		// Get the latest cost for the unique key 
    	    		Project latestProject = projectDAONew.get(project.getProjectID(), project.getName(), project.getBudgetLocation());
    	    		// In case the budget year of the project has been changed, then in that case the Latest cost should not be shown for Spend By projects
    	    		if(latestProject!=null && latestProject.getBudgetYear()!=null && latestProject.getBudgetYear().intValue()==(new Integer(budgetYearsArr[i])).intValue())
    	    		{
    		    		
    		    		
        	    		 if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
        					{
        		    			if(latestProject.getTotalCost()!=null)
        						{
        		    				spendByBean.setLatestTotalCost(latestProject.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
        						}
        		    			else
        		    			{
        		    				spendByBean.setLatestTotalCost(null);
        		    			}
        					}
        					else
        					{
        						if(latestProject.getTotalCost()!=null)
        						{
        							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			    			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestProject.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        						}
        						else
        						{
        							spendByBean.setLatestTotalCost(null);
        						}
        					}
    	    		}
    	    		else
    	    		{
    	    			spendByBean.setLatestTotalCost(null);
    	    		}
    	    		
    	    		
    	    		if(finalSpendByProjectMap!=null && finalSpendByProjectMap.containsKey(key))
    				{
    					
    	    			List<SpendByReportBean> spendReportBeanList = finalSpendByProjectMap.get(key);
    					spendReportBeanList.add(spendByBean);
    				}
    				else
    				{
    					List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
    					
    					// This is done for adding the blank Spend By Report Beans for previous budget years 
    					if(i>0)
    					{
    						for(int j=0;j<i;j++)
    						{
    							SpendByReportBean blankSpendByBean = new SpendByReportBean();
    							spendReportBeanList.add(blankSpendByBean);
    						}
    					}
    					spendReportBeanList.add(spendByBean);
    					finalSpendByProjectMap.put(key, spendReportBeanList);
    				}
    			}
			}
    			
    		
    		
    	
    	
    	
    	
    	return finalSpendByProjectMap;
    }
    

    public List<SpendByReportBean> getSpendByProjectsAgencyCrossTab(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	try
    	{
	    	//List<Project> allProjects = projectDAONew.getBudgetYearProjectsForQPRSnapshot(budgetYear);
    		
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    		Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    		Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    		Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    		Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    		
    		List<Project> allProjects = new ArrayList<Project>();
    		if(fetchLatestCostProjects)
    		{
    			allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear,spendReportFilter);
    			
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
    			{
    				
    			}
    			else
    			{
    				coplaSnapShotId=new Long("0");
    				
    			}
    			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr1SnapShotId=new Long("0");
    				
    			}
    			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr2SnapShotId=new Long("0");
    				
    			}
    			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr3SnapShotId=new Long("0");
    				
    			}
    			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				fullYearSnapShotId=new Long("0");
    				
    			}
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
	    			List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    			}
    			}
    		}
    		
	    	
	    	for(Project project: allProjects)
	    	{
	    		
	    		List<ProjectCostDetailsBean> latestProjectCostBean = projectDAONew.getProjectCostDetails(project.getProjectID());
	    		
	    		for(ProjectCostDetailsBean pcb: latestProjectCostBean)
		    	{
		    		SpendByReportBean spendByBean = new SpendByReportBean();
		    		if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
		    		{
		    			//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(coplaSnapShotId, project.getProjectID());
		    			List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectCostSnapshot(coplaSnapShotId, project.getProjectID(), pcb.getAgencyId());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    				/*	if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setCoplaTotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setCoplaTotalCost(null);
			    					}
			    					*/
			    					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setCoplaTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setCoplaTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setCoplaTotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setCoplaTotalCost(null);
			            			}
			    				}
			    				
			    				
			    				
		    				}
		    			}
		    			else
		    			{
		    				
		    				spendByBean.setCoplaTotalCost(null);
		    				
		    				
		    			}
		    			
		    		}
		    		if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
		    		{
		    			
		    			//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(coplaSnapShotId, project.getProjectID());
		    			List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectCostSnapshot(qpr1SnapShotId, project.getProjectID(), pcb.getAgencyId());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					/*if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setQpr1TotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr1TotalCost(null);
			    					}*/
		    						
		    						BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setQpr1TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setQpr1TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setQpr1TotalCost(null);
			            			}
			    				}
			    				
			    				
		    				}
		    				
		    			}
		    			else
		    			{
		    				spendByBean.setQpr1TotalCost(null);
		    				
		    				
		    			}
		    			
		    		}
		    		if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0 )
		    		{
		    			List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectCostSnapshot(qpr2SnapShotId, project.getProjectID(), pcb.getAgencyId());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					/*if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setQpr2TotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr2TotalCost(null);
			    					}*/
		    						BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setQpr2TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setQpr2TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
		    						
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setQpr2TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setQpr2TotalCost(null);
			            			}
			    				}
			    				
			    				/*spendByBean.setProjectId(project.getProjectID());
			    	    		spendByBean.setProjectName(project.getName());
			    	    		spendByBean.setBudgetLocation(project.getBudgetLocation());
			    	    		spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(project.getBudgetLocation()));
			    	    		
			    	    		spendByBean.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
			    				spendByBean.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
			    				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
			    				
			    				if(project.getMethodologyDetails()!=null && project.getMethodologyDetails().size()>0)
			    				{
			    					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(StringUtils.join(project.getMethodologyDetails(),",")));
			    				}
			    				
			    				if(project.getBrand()!=null)
			    				{
			    					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(project.getBrand().intValue()));
			    				}
			    				
			    				if(pcostSnapShot.getAgencyId()!=null && pcostSnapShot.getAgencyId().intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(pcostSnapShot.getAgencyId().intValue()))
			    				{
			    					spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(pcostSnapShot.getAgencyId().intValue()));
			    				
			    					if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==1)
			    					{
			    						spendByBean.setResearchAgecnyType("Kantar");
			    					}
			    					else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==2)
			    					{
			    						spendByBean.setResearchAgecnyType("Non-Kantar");
			    					}
			    					else
			    					{
			    						spendByBean.setResearchAgecnyType(" ");
			    					}
			    					
			    				}
			    				else
			    				{
			    					spendByBean.setResearchAgecny(" ");
			    				}
			    	    		
			    	    		spendByProjectsList.add(spendByBean);*/
		    				}
		    				
		    			}
		    			else
		    			{
		    				spendByBean.setQpr2TotalCost(null);
		    				
		    				
		    			}
		    			
		    		
		    		}
		    		if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
		    		{
		    			
		    			List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectCostSnapshot(qpr3SnapShotId, project.getProjectID(), pcb.getAgencyId());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					/*if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setQpr3TotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr3TotalCost(null);
			    					}*/
		    						
		    						BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setQpr3TotalCost(null);
			            			}
			    				}
			    				
			    			/*	spendByBean.setProjectId(project.getProjectID());
			    	    		spendByBean.setProjectName(project.getName());
			    	    		spendByBean.setBudgetLocation(project.getBudgetLocation());
			    	    		spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(project.getBudgetLocation()));
			    	    		
			    	    		spendByBean.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
			    				spendByBean.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
			    				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
			    				
			    				if(project.getMethodologyDetails()!=null && project.getMethodologyDetails().size()>0)
			    				{
			    					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(StringUtils.join(project.getMethodologyDetails(),",")));
			    				}
			    				
			    				if(project.getBrand()!=null)
			    				{
			    					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(project.getBrand().intValue()));
			    				}
			    				
			    				if(pcostSnapShot.getAgencyId()!=null && pcostSnapShot.getAgencyId().intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(pcostSnapShot.getAgencyId().intValue()))
			    				{
			    					spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(pcostSnapShot.getAgencyId().intValue()));
			    				
			    					if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==1)
			    					{
			    						spendByBean.setResearchAgecnyType("Kantar");
			    					}
			    					else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==2)
			    					{
			    						spendByBean.setResearchAgecnyType("Non-Kantar");
			    					}
			    					else
			    					{
			    						spendByBean.setResearchAgecnyType(" ");
			    					}
			    					
			    				}
			    				else
			    				{
			    					spendByBean.setResearchAgecny(" ");
			    				}
			    	    		
			    	    		spendByProjectsList.add(spendByBean); */
		    				}
		    				
		    			}
		    			else
		    			{
		    				spendByBean.setQpr3TotalCost(null);
		    				
		    				
		    			}
		    			
		    		}
		    		if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
		    		{
		    			
		    			List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectCostSnapshot(fullYearSnapShotId, project.getProjectID());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    				/*	if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setFullYearTotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setFullYearTotalCost(null);
			    					}
			    					*/
			    					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setFullYearTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setFullYearTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setFullYearTotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setFullYearTotalCost(null);
			            			}
			    				}
			    				
			    			/*	spendByBean.setProjectId(project.getProjectID());
			    	    		spendByBean.setProjectName(project.getName());
			    	    		spendByBean.setBudgetLocation(project.getBudgetLocation());
			    	    		spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(project.getBudgetLocation()));
			    	    		
			    	    		spendByBean.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
			    				spendByBean.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
			    				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
			    				
			    				if(project.getMethodologyDetails()!=null && project.getMethodologyDetails().size()>0)
			    				{
			    					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(StringUtils.join(project.getMethodologyDetails(),",")));
			    				}
			    				
			    				if(project.getBrand()!=null)
			    				{
			    					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(project.getBrand().intValue()));
			    				}
			    				
			    				if(pcostSnapShot.getAgencyId()!=null && pcostSnapShot.getAgencyId().intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(pcostSnapShot.getAgencyId().intValue()))
			    				{
			    					spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(pcostSnapShot.getAgencyId().intValue()));
			    				
			    					if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==1)
			    					{
			    						spendByBean.setResearchAgecnyType("Kantar");
			    					}
			    					else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcostSnapShot.getAgencyId().intValue())==2)
			    					{
			    						spendByBean.setResearchAgecnyType("Non-Kantar");
			    					}
			    					else
			    					{
			    						spendByBean.setResearchAgecnyType(" ");
			    					}
			    					
			    				}
			    				else
			    				{
			    					spendByBean.setResearchAgecny(" ");
			    				}
			    	    		
			    	    		spendByProjectsList.add(spendByBean);*/
		    				}
		    				
		    			}
		    			else
		    			{
		    				spendByBean.setFullYearTotalCost(null);
		    				
		    			
		    			}
		    			
		    		}
		    		
		    		//spendByBean.setLatestTotalCost(project.getTotalCost());
		    		
		    		// In case the budget year of the project has been changed, then in that case the Latest cost should not be shown for Spend By projects
		    		if(project.getBudgetYear()!=null && project.getBudgetYear().intValue()==budgetYear.intValue())
		    		{		    		
	
		    			
		    			List<ProjectCostDetailsBean> projectCostSnapShot = projectDAONew.getProjectCostDetails(project.getProjectID(), pcb.getAgencyId());
		    			if(projectCostSnapShot!=null && projectCostSnapShot.size()>0)
		    			{
		    				for(ProjectCostDetailsBean pcostSnapShot:projectCostSnapShot)
		    				{
		    					
		    					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    				/*	if(pcostSnapShot.getEstimatedCost()!=null)
			    					{
			    						spendByBean.setLatestTotalCost(pcostSnapShot.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setLatestTotalCost(null);
			    					}*/
			    					
			    					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
			    		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    		    		{
			    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    		    		else
			    		    		{
			    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
			    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    		    		}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			if(pcostSnapShot.getEstimatedCost()!=null)
			            			{
			            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			}
			            			else
			            			{
			            				spendByBean.setLatestTotalCost(null);
			            			}
			    				}
			    				
		    				}
		    				
		    			}
		    			else
		    			{
		    				spendByBean.setLatestTotalCost(null);
		    			
		    			}
		    			
		    		
		    		}
		    		else
		    		{
		    			spendByBean.setLatestTotalCost(null);
		    			
	    				
		    		}
		    		
		    		spendByBean.setProjectId(project.getProjectID());
    	    		spendByBean.setProjectName(project.getName());
    	    		spendByBean.setBudgetLocation(project.getBudgetLocation());
    	    		spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(project.getBudgetLocation()));
    	    		
    	    		spendByBean.setArea(SynchroUtils.getAreaName(project.getBudgetLocation()));
    				spendByBean.setRegion(SynchroUtils.getRegionName(project.getBudgetLocation()));
    				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(project.getBudgetLocation()));
    				
    				
    				if(project.getCategoryType()!=null && project.getCategoryType().size()>0)
    				{
    					String categoryIds = StringUtils.join(project.getCategoryType(),",");
    					spendByBean.setCategoryTypes(categoryIds);
    					spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryIds));
    				}
    				
    				if(project.getMethodologyDetails()!=null && project.getMethodologyDetails().size()>0)
    				{
    					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(StringUtils.join(project.getMethodologyDetails(),",")));
    				}
    				
    				/*if(project.getBrand()!=null)
    				{
    					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(project.getBrand().intValue()));
    				}
    				*/
    				
    				// This fix is done as part of http://redmine.nvish.com/redmine/issues/546, in which only Brand names are coming and not the other ones.
    				
    				if(project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==2)
	    			{
	    				if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==1)
	    				{
	    					spendByBean.setBrandNonBrandName("Multi-Brand Study");
	    				}
	    				else if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==2)
	    				{
	    					spendByBean.setBrandNonBrandName("Non-brand related");
	    				}
	    				else
	    				{
	    					spendByBean.setBrandNonBrandName(" ");
	    				}
	    			}
	    			else
	    			{
	    				if(project.getBrand()!=null)
	    				{
	    					if(SynchroGlobal.getBrands().get(project.getBrand().intValue())!=null)
	    					{
	    						spendByBean.setBrandNonBrandName(SynchroGlobal.getBrands().get(project.getBrand().intValue()));
	    					}
	    					else
	    					{
	    						spendByBean.setBrandNonBrandName(" ");
	    					}
	    				}
	    				else
	    				{
	    					spendByBean.setBrandNonBrandName(" ");
	    				}
	    			}
    				 
    				if(pcb.getAgencyId()!=null && pcb.getAgencyId().intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(pcb.getAgencyId().intValue()))
    				{
    					spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(pcb.getAgencyId().intValue()));
    				
    					if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())==1)
    					{
    						spendByBean.setResearchAgecnyType("Kantar");
    					}
    					else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())==2)
    					{
    						spendByBean.setResearchAgecnyType("Non-Kantar");
    					}
    					else
    					{
    						spendByBean.setResearchAgecnyType(" ");
    					}
    					
    				}
    				else
    				{
    					spendByBean.setResearchAgecny(" ");
    				}
    	    		
    	    		spendByProjectsList.add(spendByBean);
		    	}
	    	}
	    	if(allProjects!=null && allProjects.size()>0)
	    	{
	    		
	    	}
	    	else
	    	{
	    		// adding Blank Row
	    		SpendByReportBean spendByBean = new SpendByReportBean();
	    		spendByBean.setCoplaTotalCost(null);
	    		spendByBean.setQpr1TotalCost(null);
	    		spendByBean.setQpr2TotalCost(null);
	    		spendByBean.setQpr3TotalCost(null);
	    		spendByBean.setFullYearTotalCost(null);
	    		spendByBean.setLatestTotalCost(null);
	    		
	    		spendByBean.setProjectId(null);
	    		spendByBean.setProjectName("");
	    		spendByBean.setBudgetLocationName("");
	    		spendByProjectsList.add(spendByBean);
	    		
	    	}
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}
    	
    	return spendByProjectsList;
    }
    
    @Override
    public Map<Integer, List<SpendByReportBean>> getSpendByBudgetLocationMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<Integer, List<SpendByReportBean>> spendByBudgetLocationMap = new HashMap<Integer, List<SpendByReportBean>>();
    	
    	Map<Integer,Set<Integer>> budgetYearBudgetLocations = new HashMap<Integer, Set<Integer>>();
    	
    	Set<Integer> allBudgetLocations = new HashSet<Integer>();
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	Set<Integer> budgetYearBL = new HashSet<Integer>(); 
	    	
			if(fetchLatestCostProjects)
			{
				//allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
				
				   //Budget Location Filter
		        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
		        {
		        	
		        	for(Long bl : spendReportFilter.getBudgetLocations())
		        	{
		        		allBudgetLocations.add(bl.intValue());
		        	}
		        }
		        else
		        {
		        	allBudgetLocations.addAll(projectDAONew.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
		        }
				
		        budgetYearBL = new HashSet<Integer>(allBudgetLocations);
			}
			else
			{
				// http://redmine.nvish.com/redmine/issues/423
				
				if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
				{
					
				}
				else
				{
					coplaSnapShotId=new Long("0");
					
				}
				if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr1SnapShotId=new Long("0");
					
				}
				if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr2SnapShotId=new Long("0");
					
				}
				if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr3SnapShotId=new Long("0");
					
				}
				if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					fullYearSnapShotId=new Long("0");
					
				}
				
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allBudgetLocations = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(budgetYear);
					
					   //Budget Location Filter
			        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
			        {
			        	for(Long bl : spendReportFilter.getBudgetLocations())
			        	{
			        		allBudgetLocations.add(bl.intValue());
			        	}
			        	//allBudgetLocations = spendReportFilter.getBudgetLocations();		            
			        }
			        else
			        {
			        	allBudgetLocations.addAll(qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i])));
			        }
				}
				budgetYearBL = new HashSet<Integer>(allBudgetLocations);
			}
			
			budgetYearBudgetLocations.put(new Integer(budgetYearsArr[i]), budgetYearBL);
    	}
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
	    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	    	//List<Integer> allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
	    	
	    	
	    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    		
	    	boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
	    	
	    		
			for(Integer budgetLocation:allBudgetLocations)
			{
	    	
				SpendByReportBean spendByBean = new SpendByReportBean();
				if(budgetLocation!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				else if(budgetLocation!=null)
				{
					coplaQPRFreeze=false;
				}
				
				if(budgetLocation!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				else if(budgetLocation!=null)
				{
					qpr1QPRFreeze=false;
				}
				
				if(budgetLocation!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				else if(budgetLocation!=null)
				{
					qpr2QPRFreeze=false;
				}
				
				if(budgetLocation!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				else if(budgetLocation!=null)
				{
					qpr3QPRFreeze=false;
				}
				
				if(budgetLocation!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				else if(budgetLocation!=null)
				{
					fullYearQPRFreeze=false;
				}
				
				if(budgetLocation!=null)
				{
					
					// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
    				// those QPR Snapshots which are not frozen.
    				if(budgetYearBudgetLocations.get(new Integer(budgetYearsArr[i])).contains(budgetLocation))
    				{
    				
    				
						List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBudgetLocationLatestCost(new Integer(budgetYearsArr[i]), budgetLocation,spendReportFilter);
						{
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
    				}
				}
				spendByBean.setBudgetLocation(budgetLocation);
				spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
				spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
				spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
				
				if(spendByBudgetLocationMap.get(budgetLocation)!=null)
				{
					spendByProjectsList = spendByBudgetLocationMap.get(budgetLocation);
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				
				spendByBudgetLocationMap.put(budgetLocation, spendByProjectsList);
				
				
			}	
		    	
			if(allBudgetLocations!=null && allBudgetLocations.size()>0)
	    	{
	    		
	    	}
	    	else
	    	{
	    		// adding Blank Row
	    		SpendByReportBean spendByBean = new SpendByReportBean();
	    		spendByBean.setCoplaTotalCost(null);
	    		spendByBean.setQpr1TotalCost(null);
	    		spendByBean.setQpr2TotalCost(null);
	    		spendByBean.setQpr3TotalCost(null);
	    		spendByBean.setFullYearTotalCost(null);
	    		spendByBean.setLatestTotalCost(null);
	    		
	    		spendByBean.setProjectId(null);
	    		spendByBean.setProjectName("");
	    		spendByBean.setBudgetLocationName("");
	    		spendByProjectsList.add(spendByBean);
	    		
	    	}
    	}
    	//return spendByProjectsList;
    	return spendByBudgetLocationMap;
    }
    
    @Override
    public Map<String,List<SpendByReportBean>>  getSpendByBudgetLocation(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<Integer, List<SpendByReportBean>> spendByBudgetLocationMap = new HashMap<Integer, List<SpendByReportBean>>();
    	
    	Map<Integer,Set<Integer>> budgetYearBudgetLocations = new HashMap<Integer, Set<Integer>>();
    	
    	Set<Integer> allBudgetLocations = new HashSet<Integer>();
    	
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByBudgetLocationMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
    	
    	LinkedHashMap<String, SpendByReportBean> spendByBudgetLocationKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByBudgetLocationKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	//First get the projects and make the key
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	Set<Integer> budgetYearBL = new HashSet<Integer>(); 
	    	
	    	List<Long> selectedQPRs = new ArrayList<Long>();
	    	List<SpendByReportBean> allBudgetLocationBeans = new ArrayList<SpendByReportBean>();
	    
	    	if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				selectedQPRs.add(coplaSnapShotId);
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr1SnapShotId);
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr2SnapShotId);
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr3SnapShotId);
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				selectedQPRs.add(fullYearSnapShotId);
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
	    	
			if(fetchLatestCostProjects)
			{
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					
					//allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
					
					   //Budget Location Filter
			        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
			        {
			        	
			        	for(Long bl : spendReportFilter.getBudgetLocations())
			        	{
			        		allBudgetLocations.add(bl.intValue());
			        	}
			        }
			        else
			        {
			        	allBudgetLocations.addAll(qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
			        }
			        
			        if(allBudgetLocations!=null && allBudgetLocations.size()>0)
			        {
			        	allBudgetLocationBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs, spendReportFilter);
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
		    			{
		    				String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
		    				spendByBudgetLocationKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
						{
			        		String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
							for(String key: spendByBudgetLocationKey.keySet())
							{
								if(key.contains(blBean.getBudgetLocation()+"") && sortedSpendByBudgetLocationKey.get(key)==null)
								{
									sortedSpendByBudgetLocationKey.put(key, spendByBudgetLocationKey.get(key));
								}
							}
						}
			        }
				}
				
				allBudgetLocations = new HashSet<Integer>();
				
			   // allBudgetLocations.addAll(projectDAONew.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i])));
			    
			    if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
		        {
		        	
		        	for(Long bl : spendReportFilter.getBudgetLocations())
		        	{
		        		allBudgetLocations.add(bl.intValue());
		        	}
		        }
		        else
		        {
		        	 allBudgetLocations.addAll(projectDAONew.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
		        }
			    
			    for(Integer budgetLocation: allBudgetLocations)
    			{
			    	String s = budgetLocation+"~"+SynchroUtils.getRegionName(budgetLocation)+"~"+SynchroUtils.getAreaName(budgetLocation)+"~"+SynchroUtils.getT20_T40Name(budgetLocation);
			    	SpendByReportBean blBean = new SpendByReportBean();
			    	blBean.setBudgetLocation(budgetLocation);
			    	blBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
			    	blBean.setArea(SynchroUtils.getAreaName(budgetLocation));
			    	blBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
			    	
    				spendByBudgetLocationKey.put(s, blBean);
    			}
    			
    			
			    for(Integer budgetLocation: allBudgetLocations)
				{
			    	String s = budgetLocation+"~"+SynchroUtils.getRegionName(budgetLocation)+"~"+SynchroUtils.getAreaName(budgetLocation)+"~"+SynchroUtils.getT20_T40Name(budgetLocation);
					for(String key: spendByBudgetLocationKey.keySet())
					{
						if(key.contains(budgetLocation+"") && sortedSpendByBudgetLocationKey.get(key)==null)
						{
							sortedSpendByBudgetLocationKey.put(key, spendByBudgetLocationKey.get(key));
						}
					}
				}   
			        
					
			     
				
			}
			else
			{
				// http://redmine.nvish.com/redmine/issues/423
				
				
				
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allBudgetLocations = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(budgetYear);
					
					   //Budget Location Filter
			        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
			        {
			        	for(Long bl : spendReportFilter.getBudgetLocations())
			        	{
			        		allBudgetLocations.add(bl.intValue());
			        	}
			        	//allBudgetLocations = spendReportFilter.getBudgetLocations();		            
			        }
			        else
			        {
			        	allBudgetLocations.addAll(qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
			        }
			        
			        if(allBudgetLocations!=null && allBudgetLocations.size()>0)
			        {
			        	allBudgetLocationBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs, spendReportFilter);
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
		    			{
		    				String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
		    				spendByBudgetLocationKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
						{
			        		String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
							for(String key: spendByBudgetLocationKey.keySet())
							{
								if(key.contains(blBean.getBudgetLocation()+"") && sortedSpendByBudgetLocationKey.get(key)==null)
								{
									sortedSpendByBudgetLocationKey.put(key, spendByBudgetLocationKey.get(key));
								}
							}
						}
			        }
				}
				
			}
			
		
    
		for(String key: sortedSpendByBudgetLocationKey.keySet())
    	{
	    	SpendByReportBean bLBean = sortedSpendByBudgetLocationKey.get(key);
			
	    	SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
	    	
			/*List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	    	//List<Integer> allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
	    	
	    	
	    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    		
	    	boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
	    	*/
	    		
			
	    	
				
				if(bLBean.getBudgetLocation()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
				
				/*	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
				
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				*/	
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBudgetLocationAgencySnapshot(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
					}
				}
				
				
				if(bLBean.getBudgetLocation()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
					*/
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBudgetLocationAgencySnapshot(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
					}
				}
				
				
				if(bLBean.getBudgetLocation()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
					
					*/
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBudgetLocationAgencySnapshot(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
					}
				}
				
				
				if(bLBean.getBudgetLocation()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
					
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}*/
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBudgetLocationAgencySnapshot(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
					}
				}
				
				
				if(bLBean.getBudgetLocation()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
					
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}*/
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBudgetLocationAgencySnapshot(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getBudgetLocation()!=null)
				{
					
					// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
    				// those QPR Snapshots which are not frozen.
    				/*if(budgetYearBudgetLocations!=null && budgetYearBudgetLocations.get(new Integer(budgetYearsArr[i]))!=null && budgetYearBudgetLocations.get(new Integer(budgetYearsArr[i])).contains(bLBean.getBudgetLocation()))
    				{
    				*/
    				
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBudgetLocationLatestCost(new Integer(budgetYearsArr[i]), bLBean.getBudgetLocation(),spendReportFilter);
						List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBudgetLocationLatestCost(new Integer(budgetYearsArr[i]), bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), spendReportFilter);
						{
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
    			//	}
				}
				
				
				boolean addCost = false;
				
				if(fetchLatestCostProjects)
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
					{
						addCost = true;
					}
				}
				else
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
					{
						addCost = true;
					}
				}
				
				// This logic is if there is cost for any of the QPR Snapshot then add the cost otherwise display '-'
				//if(addCost)
			//	{
					spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
					spendByBean.setArea(bLBean.getArea());
					spendByBean.setRegion(bLBean.getRegion());
					spendByBean.setT20_40(bLBean.getT20_40());
					spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
					
					
					if(finalSpendByBudgetLocationMap!=null && finalSpendByBudgetLocationMap.containsKey(key))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByBudgetLocationMap.get(key);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByBudgetLocationMap.put(key, spendReportBeanList);
					}
				//}
				
				
			}	
		    	
    	}
    	
    	//return spendByProjectsList;
    	return finalSpendByBudgetLocationMap;
    }
   @Override
    public List<SpendByReportBean> getSpendByBudgetLocation(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	//List<Integer> allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
    	List<Integer> allBudgetLocations = new ArrayList<Integer>();
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    		
		if(fetchLatestCostProjects)
		{
			//allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
			
			   //Budget Location Filter
	        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
	        {
	        	
	        	for(Long bl : spendReportFilter.getBudgetLocations())
	        	{
	        		allBudgetLocations.add(bl.intValue());
	        	}
	        }
	        else
	        {
	        	allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear,spendReportFilter);
	        }
			
		}
		else
		{
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allBudgetLocations = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(budgetYear);
				
				   //Budget Location Filter
		        if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
		        {
		        	for(Long bl : spendReportFilter.getBudgetLocations())
		        	{
		        		allBudgetLocations.add(bl.intValue());
		        	}
		        	//allBudgetLocations = spendReportFilter.getBudgetLocations();		            
		        }
		        else
		        {
		        	allBudgetLocations = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(budgetYear);
		        }
			}
		}
		
    	
    		
    	
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			if(budgetLocation!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(budgetLocation!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
            			{
            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setQpr1TotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(budgetLocation!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(budgetLocation!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(budgetLocation!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(budgetLocation!=null)
			{
				List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBudgetLocationLatestCost(budgetYear, budgetLocation,spendReportFilter);
				{
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			spendByBean.setBudgetLocation(budgetLocation);
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
			spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
			spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
			spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
			spendByProjectsList.add(spendByBean);
		}	
	    	
		if(allBudgetLocations!=null && allBudgetLocations.size()>0)
    	{
    		
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    	return spendByProjectsList;
    }
    
   @Override
   public Map<String, List<SpendByReportBean>> getSpendByMethodologyMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
   		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
   	
   	
	Map<String, List<SpendByReportBean>> spendByMethodologyMap = new HashMap<String, List<SpendByReportBean>>();
	
	Set<String> allMethodologies = new HashSet<String>();
	
	Map<Integer,Set<String>> budgetYearMethodologies = new HashMap<Integer, Set<String>>();
	
	for(int i=0;i<budgetYearsArr.length;i++)
	{
		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	   	
	   	
	   	Set<String> budgetYearMeth = new HashSet<String>(); 
	   	
	   	if(fetchLatestCostProjects)
			{
	   		//allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
	   		
	   		//Methodology Filter
		        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
		        {
		        	for(Long meth : spendReportFilter.getMethDetails())
		        	{
		        		allMethodologies.add(meth.toString());
		        	}
		        }
		        else
		        {
		        	allMethodologies.addAll(projectDAONew.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter));
		        	
		        }
		        budgetYearMeth = new HashSet<String>(allMethodologies);
			}
			else
			{
				
				// http://redmine.nvish.com/redmine/issues/423
				
				if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
				{
					
				}
				else
				{
					coplaSnapShotId=new Long("0");
					
				}
				if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr1SnapShotId=new Long("0");
					
				}
				if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr2SnapShotId=new Long("0");
					
				}
				if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr3SnapShotId=new Long("0");
					
				}
				if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					fullYearSnapShotId=new Long("0");
					
				}
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
					
					//Methodology Filter
			        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
			        {
			        	for(Long meth : spendReportFilter.getMethDetails())
			        	{
			        		allMethodologies.add(meth.toString());
			        	}
			        }
			        else
			        {
			        	allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i])));
			        }
				}
				 budgetYearMeth = new HashSet<String>(allMethodologies);
			}
	   	
	    budgetYearMethodologies.put(new Integer(budgetYearsArr[i]), budgetYearMeth);
	}
	
	
	for(int i=0;i<budgetYearsArr.length;i++)
	{
		
		List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	   	//List<String> allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
	   	
	   	
	   	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	   	
	   	
	   	
	   		
	   	
	   		
			for(String methodology:allMethodologies)
			{
				boolean coplaTotalCostNull = true;
				boolean qpr1TotalCostNull = true;
				boolean qpr2TotalCostNull = true;
				boolean qpr3TotalCostNull = true;
				boolean fullYearTotalCostNull = true;
				boolean latestTotalCostNull = true;
				
				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				
				SpendByReportBean spendByBean = new SpendByReportBean();
				if(methodology!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(coplaSnapShotId,methodology,spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						coplaTotalCostNull=false;
	   					}
	   					else
	   					{
	   						spendByBean.setCoplaTotalCost(null);
	   					}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						coplaTotalCostNull=false;
	   					}
	   					else
	   					{
	   						spendByBean.setCoplaTotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				else if(methodology!=null)
				{
					coplaQPRFreeze = false;
				}
				
				if(methodology!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr1SnapShotId,methodology,spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								qpr1TotalCostNull = false;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						qpr1TotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setQpr1TotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				else if(methodology!=null)
				{
					qpr1QPRFreeze = false;
				}
				
				if(methodology!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
			
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr2SnapShotId,methodology,spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								qpr2TotalCostNull = false;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						qpr2TotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setQpr2TotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				else if(methodology!=null)
				{
					qpr2QPRFreeze = false;
				}
				
				if(methodology!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
			
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr3SnapShotId,methodology,spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								qpr3TotalCostNull = false;
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						qpr3TotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setQpr3TotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				else if(methodology!=null)
				{
					qpr3QPRFreeze = false;
				}
				
				if(methodology!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(fullYearSnapShotId,methodology,spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								fullYearTotalCostNull = false;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						fullYearTotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setFullYearTotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				else if(methodology!=null)
				{
					
					fullYearQPRFreeze = false;
				}
				
				if(methodology!=null)
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), methodology,spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
	
		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearMethodologies.get(new Integer(budgetYearsArr[i])).contains(methodology))
		    				{
		    					latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), methodology,spendReportFilter, projectIds);
		    				}
		    			}
					}
					
					
					{
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					latestTotalCostNull = false;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			latestTotalCostNull = false;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
				}
				
				spendByBean.setMethodologies(methodology);
				spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
				//http://redmine.nvish.com/redmine/issues/515
				if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
				{
					//spendByProjectsList.add(spendByBean);
					
					
					
					
					if(spendByMethodologyMap.get(methodology)!=null)
					{
						spendByProjectsList = spendByMethodologyMap.get(methodology);
					}
					else
					{
						spendByProjectsList = new ArrayList<SpendByReportBean>();
					}
							
					spendByProjectsList.add(spendByBean);
					
					spendByMethodologyMap.put(methodology, spendByProjectsList);
				}
				else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
				{
					if(spendByMethodologyMap.get(methodology)!=null)
					{
						spendByProjectsList = spendByMethodologyMap.get(methodology);
					}
					else
					{
						spendByProjectsList = new ArrayList<SpendByReportBean>();
					}
							
					spendByProjectsList.add(spendByBean);
					
					spendByMethodologyMap.put(methodology, spendByProjectsList);
				}
					
					
					
			}	
		    	
		if(allMethodologies!=null && allMethodologies.size()>0)
	   	{
	   		if(spendByProjectsList.size()==0)
	   		{
	   			// adding Blank Row
	       		SpendByReportBean spendByBean = new SpendByReportBean();
	       		spendByBean.setCoplaTotalCost(null);
	       		spendByBean.setQpr1TotalCost(null);
	       		spendByBean.setQpr2TotalCost(null);
	       		spendByBean.setQpr3TotalCost(null);
	       		spendByBean.setFullYearTotalCost(null);
	       		spendByBean.setLatestTotalCost(null);
	       		
	       		spendByBean.setProjectId(null);
	       		spendByBean.setProjectName("");
	       		spendByBean.setBudgetLocationName("");
	       		spendByProjectsList.add(spendByBean);
	   		}
	   	}
	   	else
	   	{
	   		// adding Blank Row
	   		SpendByReportBean spendByBean = new SpendByReportBean();
	   		spendByBean.setCoplaTotalCost(null);
	   		spendByBean.setQpr1TotalCost(null);
	   		spendByBean.setQpr2TotalCost(null);
	   		spendByBean.setQpr3TotalCost(null);
	   		spendByBean.setFullYearTotalCost(null);
	   		spendByBean.setLatestTotalCost(null);
	   		
	   		spendByBean.setProjectId(null);
	   		spendByBean.setProjectName("");
	   		spendByBean.setBudgetLocationName("");
	   		spendByProjectsList.add(spendByBean);
	   		
	   	}
	}
   	return spendByMethodologyMap;
   } 
   
   @Override
   public Map<String, List<SpendByReportBean>> getSpendByMethodology(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
   		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
   	
   	
	Map<String, List<SpendByReportBean>> spendByMethodologyMap = new HashMap<String, List<SpendByReportBean>>();
	
	Set<String> allMethodologies = new HashSet<String>();
	
	Map<Integer,Set<String>> budgetYearMethodologies = new HashMap<Integer, Set<String>>();
	
	// New Ones
	
	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByMethodologyMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
	
	LinkedHashMap<String, SpendByReportBean> spendByMethodologyKey = new LinkedHashMap<String, SpendByReportBean>();
	
	LinkedHashMap<String, SpendByReportBean> sortedSpendByMethodologyKey = new LinkedHashMap<String, SpendByReportBean>();
	
	
	for(int i=0;i<budgetYearsArr.length;i++)
	{
		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	   	
	   	
	   	Set<String> budgetYearMeth = new HashSet<String>(); 
	   	
	   	List<Long> selectedQPRs = new ArrayList<Long>();
	   	List<SpendByReportBean> allMethodologyBeans = new ArrayList<SpendByReportBean>();
	   	
	   	if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
		{
			selectedQPRs.add(coplaSnapShotId);
		}
		else
		{
			coplaSnapShotId=new Long("0");
			
		}
		if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr1SnapShotId);
		}
		else
		{
			qpr1SnapShotId=new Long("0");
			
		}
		if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr2SnapShotId);
		}
		else
		{
			qpr2SnapShotId=new Long("0");
			
		}
		if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr3SnapShotId);
		}
		else
		{
			qpr3SnapShotId=new Long("0");
			
		}
		if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
		{
			selectedQPRs.add(fullYearSnapShotId);
		}
		else
		{
			fullYearSnapShotId=new Long("0");
			
		}
    	
		
	   	if(fetchLatestCostProjects)
		{
	   		//allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
	   		
	   		//Methodology Filter
	   		if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{  
	   			if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
		        {
		        	for(Long meth : spendReportFilter.getMethDetails())
		        	{
		        		allMethodologies.add(meth.toString());
		        	}
		        }
		        else
		        {
		        	//allMethodologies.addAll(projectDAONew.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i])));
		        	allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs, spendReportFilter));
		        	
		        }
		        
		        if(allMethodologies!=null && allMethodologies.size()>0)
		        {
		        	//allMethodologyBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs);
		        	
		        	List<String> allMethList = new ArrayList<String>();
					
					for(String meth: allMethodologies)
					{
						allMethList.add(meth);
					}
					
		        	allMethodologyBeans = qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]), allMethList, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allMethodologyBeans)
	    			{
	    				String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
	    				spendByMethodologyKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allMethodologyBeans)
					{
		        		String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
						for(String key: spendByMethodologyKey.keySet())
						{
							if(key.contains(blBean.getMethodologies()+"") && sortedSpendByMethodologyKey.get(key)==null)
							{
								sortedSpendByMethodologyKey.put(key, spendByMethodologyKey.get(key));
							}
						}
					}
		        }
			}
	   		
	   		allMethodologies = new HashSet<String>();
	   		
	   		allMethodologies.addAll(projectDAONew.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
		    
		    for(String meth: allMethodologies)
			{
		    	if(meth!=null)
		    	{
			    	String methGroupName = "";
			    	try
			    	{
			    		methGroupName = SynchroGlobal.getMethodologyGroupName(new Long(meth));
			    	}
			    	catch(Exception e)
			    	{
			    		
			    	}
			    	String s = meth+"~"+methGroupName;
			    	SpendByReportBean blBean = new SpendByReportBean();
			    	blBean.setMethodologies(meth);
			    	blBean.setMethGroup(methGroupName);
			    	
			    	spendByMethodologyKey.put(s, blBean);
		    	}
			}
			
			
		    for(String meth: allMethodologies)
			{
		    	if(meth!=null)
		    	{
			    	String methGroupName = "";
			    	try
			    	{
			    		methGroupName = SynchroGlobal.getMethodologyGroupName(new Long(meth));
			    	}
			    	catch(Exception e)
			    	{
			    		
			    	}
			    	String s = meth+"~"+methGroupName;
					for(String key: spendByMethodologyKey.keySet())
					{
						if(key.contains(meth+"") && sortedSpendByMethodologyKey.get(key)==null)
						{
							sortedSpendByMethodologyKey.put(key, spendByMethodologyKey.get(key));
						}
					}
		    	}
			}   
		}
		else
		{
				
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
					
					//Methodology Filter
			        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
			        {
			        	for(Long meth : spendReportFilter.getMethDetails())
			        	{
			        		allMethodologies.add(meth.toString());
			        	}
			        }
			        else
			        {
			        	
			        	//allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs));
			        	allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs,spendReportFilter));
			        }
				}
				
				if(allMethodologies!=null && allMethodologies.size()>0)
		        {
		        	//allMethodologyBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs);
					
					List<String> allMethList = new ArrayList<String>();
					
					for(String meth: allMethodologies)
					{
						allMethList.add(meth);
					}
					
		        	allMethodologyBeans = qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]), allMethList, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allMethodologyBeans)
	    			{
	    				String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
	    				spendByMethodologyKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allMethodologyBeans)
					{
		        		String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
						for(String key: spendByMethodologyKey.keySet())
						{
							if(key.contains(blBean.getMethodologies()+"") && sortedSpendByMethodologyKey.get(key)==null)
							{
								sortedSpendByMethodologyKey.put(key, spendByMethodologyKey.get(key));
							}
						}
					}
		        }
				
		}
	   	
	    
	
	
	
	   	for(String key: sortedSpendByMethodologyKey.keySet())
    	{
		
	   		
	   		SpendByReportBean bLBean = sortedSpendByMethodologyKey.get(key);
			
	    	SpendByReportBean spendByBean = new SpendByReportBean();
	    	spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
	    	
	/*	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	   	//List<String> allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
	   	
	   	
	   	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	   	
	   	
	   	
	   		
	   	
	   		
			for(String methodology:allMethodologies)
			{
				boolean coplaTotalCostNull = true;
				boolean qpr1TotalCostNull = true;
				boolean qpr2TotalCostNull = true;
				boolean qpr3TotalCostNull = true;
				boolean fullYearTotalCostNull = true;
				boolean latestTotalCostNull = true;
				
				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				
				SpendByReportBean spendByBean = new SpendByReportBean();
				*/
	    	if(bLBean.getMethodologies()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
					
	    		/*	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(coplaSnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    		
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		   				{
		   					if(projectSnapShot.get(0).getTotalCost()!=null)
		   					{
		   						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		   						//coplaTotalCostNull=false;
		   					}
		   					else
		   					{
		   						spendByBean.setCoplaTotalCost(null);
		   					}
		   				}
		   				else
		   				{
		   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		   					if(projectSnapShot.get(0).getTotalCost()!=null)
		   					{
		   						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		   						//coplaTotalCostNull=false;
		   					}
		   					else
		   					{
		   						spendByBean.setCoplaTotalCost(null);
		   					}
		   				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}*/
	    		
		    		List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getMethodologyAgencySnapshot(coplaSnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getMethodologies()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr1SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								//qpr1TotalCostNull = false;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						//qpr1TotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setQpr1TotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}*/
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getMethodologyAgencySnapshot(qpr1SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getMethodologies()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr2SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							//	qpr2TotalCostNull = false;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   					//	qpr2TotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setQpr2TotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}*/
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getMethodologyAgencySnapshot(qpr2SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getMethodologies()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr3SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		   				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								//	qpr3TotalCostNull = false;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		   				}
		   				else
		   				{
		   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		   					if(projectSnapShot.get(0).getTotalCost()!=null)
		   					{
		   						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		   						//qpr3TotalCostNull = false;
		   					}
		   					else
		   					{
		   						spendByBean.setQpr3TotalCost(null);
		   					}
		   				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}*/
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getMethodologyAgencySnapshot(qpr3SnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getMethodologies()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					/*
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(fullYearSnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
					//spendByBean.setMethodologies(methodology);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	   				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								//fullYearTotalCostNull = false;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	   				}
	   				else
	   				{
	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	   					{
	   						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	   						//fullYearTotalCostNull = false;
	   					}
	   					else
	   					{
	   						spendByBean.setFullYearTotalCost(null);
	   					}
	   				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}*/
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getMethodologyAgencySnapshot(fullYearSnapShotId,bLBean.getMethodologies(),bLBean.getMethGroup(),spendReportFilter);
	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    				}
					}
				}
				
				
				if(bLBean.getMethodologies()!=null)
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					/*List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), bLBean.getMethodologies(),spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
	
		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearMethodologies!=null && budgetYearMethodologies.get(new Integer(budgetYearsArr[i]))!=null && budgetYearMethodologies.get(new Integer(budgetYearsArr[i])).contains(bLBean.getMethodologies()))
		    				{
		    					latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), bLBean.getMethodologies(),spendReportFilter, projectIds);
		    				}
		    			}
					}
					
					*/
					List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), bLBean.getMethodologies(), bLBean.getMethGroup(), spendReportFilter, null);
					
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					//latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            		//	latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				
				boolean addCost = false;
				
				if(fetchLatestCostProjects)
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
					{
						addCost = true;
					}
				}
				else
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
					{
						addCost = true;
					}
				}
				
				// This logic is if there is cost for any of the QPR Snapshot then add the cost otherwise display '-'
				//if(addCost)
			//	{
				
					spendByBean.setMethodologies(bLBean.getMethodologies());
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(bLBean.getMethodologies()));
					spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
					spendByBean.setMethGroup(bLBean.getMethGroup());
					
					//http://redmine.nvish.com/redmine/issues/515
					/*if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
					{
						//spendByProjectsList.add(spendByBean);
						
						
						
						
						if(spendByMethodologyMap.get(methodology)!=null)
						{
							spendByProjectsList = spendByMethodologyMap.get(methodology);
						}
						else
						{
							spendByProjectsList = new ArrayList<SpendByReportBean>();
						}
								
						spendByProjectsList.add(spendByBean);
						
						spendByMethodologyMap.put(methodology, spendByProjectsList);
					}
					else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
					{
						if(spendByMethodologyMap.get(methodology)!=null)
						{
							spendByProjectsList = spendByMethodologyMap.get(methodology);
						}
						else
						{
							spendByProjectsList = new ArrayList<SpendByReportBean>();
						}
								
						spendByProjectsList.add(spendByBean);
						
						spendByMethodologyMap.put(methodology, spendByProjectsList);
					}*/
					
					if(finalSpendByMethodologyMap!=null && finalSpendByMethodologyMap.containsKey(key))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByMethodologyMap.get(key);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByMethodologyMap.put(key, spendReportBeanList);
					}
			//	}
				
				
					
					
					
			}	
		    	
		
	}
   	return finalSpendByMethodologyMap;
   } 
    @Override
    public List<SpendByReportBean> getSpendByMethodology(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	//List<String> allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
    	List<String> allMethodologies = new ArrayList<String>();
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		//allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
    		
    		//Methodology Filter
	        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
	        {
	        	for(Long meth : spendReportFilter.getMethDetails())
	        	{
	        		allMethodologies.add(meth.toString());
	        	}
	        }
	        else
	        {
	        	allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear,spendReportFilter);
	        }
			
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
				
				//Methodology Filter
		        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
		        {
		        	for(Long meth : spendReportFilter.getMethDetails())
		        	{
		        		allMethodologies.add(meth.toString());
		        	}
		        }
		        else
		        {
		        	allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
		        }
			}
		}
    	
    	
    		
    	
    		
		for(String methodology:allMethodologies)
		{
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			SpendByReportBean spendByBean = new SpendByReportBean();
			if(methodology!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(coplaSnapShotId,methodology,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull=false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull=false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(methodology!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr1SnapShotId,methodology,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(methodology!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr2SnapShotId,methodology,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(methodology!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(qpr3SnapShotId,methodology,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(methodology!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByMethodolgies(fullYearSnapShotId,methodology,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(methodology!=null)
			{
				//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
				List<Project> latestCostBudgetLocation = null;
				if(fetchLatestCostProjects)
				{
					latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter, projectIds);
	    			}
				}
				
				
				{
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			spendByBean.setMethodologies(methodology);
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				spendByProjectsList.add(spendByBean);
			}
		}	
	    	
		if(allMethodologies!=null && allMethodologies.size()>0)
    	{
    		if(spendByProjectsList.size()==0)
    		{
    			// adding Blank Row
        		SpendByReportBean spendByBean = new SpendByReportBean();
        		spendByBean.setCoplaTotalCost(null);
        		spendByBean.setQpr1TotalCost(null);
        		spendByBean.setQpr2TotalCost(null);
        		spendByBean.setQpr3TotalCost(null);
        		spendByBean.setFullYearTotalCost(null);
        		spendByBean.setLatestTotalCost(null);
        		
        		spendByBean.setProjectId(null);
        		spendByBean.setProjectName("");
        		spendByBean.setBudgetLocationName("");
        		spendByProjectsList.add(spendByBean);
    		}
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    	return spendByProjectsList;
    }
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByBrandMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<String, List<SpendByReportBean>> spendByBrandMap = new HashMap<String, List<SpendByReportBean>>();
    	
    	Set<Integer> allBrands = new HashSet<Integer>();
    	Set<Integer> allNonBrands = new HashSet<Integer>();
    	
    	Map<Integer,Set<Integer>> budgetYearBrands = new HashMap<Integer, Set<Integer>>();
    	Map<Integer,Set<Integer>> budgetYearNonBrands = new HashMap<Integer, Set<Integer>>();
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
        	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
        	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
        	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
        	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
        		
        	
        	Set<Integer> budgetYearBrand = new HashSet<Integer>(); 
        	
        	if(fetchLatestCostProjects)
    		{
        		//allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
        		
        		//Brand Filter
    	        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    	        {
    	        	for(Long brand : spendReportFilter.getBrands())
    	        	{
    	        		allBrands.add(brand.intValue());
    	        	}
    	        }
    	        else
    	        {
    	        	allBrands.addAll(projectDAONew.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter));
    	        }
    	        budgetYearBrand = new HashSet<Integer>(allBrands);
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
    			{
    				
    			}
    			else
    			{
    				coplaSnapShotId=new Long("0");
    				
    			}
    			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr1SnapShotId=new Long("0");
    				
    			}
    			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr2SnapShotId=new Long("0");
    				
    			}
    			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr3SnapShotId=new Long("0");
    				
    			}
    			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				fullYearSnapShotId=new Long("0");
    				
    			}
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				//allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
    				//Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		allBrands.add(brand.intValue());
    		        	}
    		        }
    		        else
    		        {
    		        	allBrands.addAll(qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    		        }
    			}
    			budgetYearBrand = new HashSet<Integer>(allBrands);
    		}
        	
        	
        	Set<Integer> budgetYearNonBrand = new HashSet<Integer>(); 
        	
    		if(fetchLatestCostProjects)
    		{
    			//allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
    			
    			//Brand Filter
    	        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    	        {
    	        	for(Long brand : spendReportFilter.getBrands())
    	        	{
    	        		allNonBrands.add(brand.intValue());
    	        	}
    	        }
    	        else
    	        {
    	        	allNonBrands.addAll(projectDAONew.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter));
    	        }
    			
    	        budgetYearNonBrand = new HashSet<Integer>(allNonBrands);
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
    			{
    				
    			}
    			else
    			{
    				coplaSnapShotId=new Long("0");
    				
    			}
    			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr1SnapShotId=new Long("0");
    				
    			}
    			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr2SnapShotId=new Long("0");
    				
    			}
    			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr3SnapShotId=new Long("0");
    				
    			}
    			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				fullYearSnapShotId=new Long("0");
    				
    			}
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				//allNonBrands = qprSnapshotDAO.getNonBrandsForQPRSnapshot(budgetYear);
    				
    				//Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		allNonBrands.add(brand.intValue());
    		        	}
    		        }
    		        else
    		        {
    		        	allNonBrands.addAll(qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    		        }
    			}
    			
    			  budgetYearNonBrand = new HashSet<Integer>(allNonBrands);
    		}
        	
    		budgetYearBrands.put(new Integer(budgetYearsArr[i]), budgetYearBrand);
    		budgetYearNonBrands.put(new Integer(budgetYearsArr[i]), budgetYearNonBrand);
    	}
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	//List<Integer> allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
    	
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
    		
    	
		for(Integer brand:allBrands)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			
			boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
			
			if(brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(coplaSnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			else if(brand!=null)
			{
				coplaQPRFreeze = false;
			}
			
			if(brand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
	
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr1SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			else if(brand!=null)
			{
				qpr1QPRFreeze = false;
			}
			
			if(brand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr2SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			else if(brand!=null)
			{
				qpr2QPRFreeze = false;
			}
			
			if(brand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr3SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			else if(brand!=null)
			{
				qpr3QPRFreeze = false;
			}
			
			if(brand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
						
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(fullYearSnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			else if(brand!=null)
			{
				fullYearQPRFreeze = false;
			}
			
			if(brand!=null)
			{
				//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
				List<Project> latestCostBudgetLocation = null;
				
				if(fetchLatestCostProjects)
				{
					latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(new Integer(budgetYearsArr[i]), brand,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				
	    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
	    				// those QPR Snapshots which are not frozen.
	    				if(budgetYearBrands.get(new Integer(budgetYearsArr[i])).contains(brand))
	    				{
	    					latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(new Integer(budgetYearsArr[i]), brand,spendReportFilter, projectIds);
	    				}
	    				
	    				
	    			}
				}
				
				
				
				{
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
			spendByBean.setBrand(brand);
			
			spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				//spendByProjectsList.add(spendByBean);
				
				
				
				
				if(spendByBrandMap.get(spendByBean.getBrandNonBrandName())!=null)
				{
					spendByProjectsList = spendByBrandMap.get(spendByBean.getBrandNonBrandName());
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				
				spendByBrandMap.put(spendByBean.getBrandNonBrandName(), spendByProjectsList);
			}
			else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
			{
				if(spendByBrandMap.get(spendByBean.getBrandNonBrandName())!=null)
				{
					spendByProjectsList = spendByBrandMap.get(spendByBean.getBrandNonBrandName());
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				
				spendByBrandMap.put(spendByBean.getBrandNonBrandName(), spendByProjectsList);
			}
			//spendByProjectsList.add(spendByBean);
		}	
		
		//Add the Non Brands
		//List<Integer> allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
		
		
		for(Integer nonBrand:allNonBrands)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
			
			if(nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(coplaSnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							coplaTotalCostNull = false;
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			else if(nonBrand!=null )
			{
				coplaQPRFreeze = false;
			}
			
			if(nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
	
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr1SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			else if(nonBrand!=null )
			{
				qpr1QPRFreeze = false;
			}
			
			if(nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr2SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			else if(nonBrand!=null )
			{
				qpr2QPRFreeze = false;
			}
			
			if(nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr3SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			else if(nonBrand!=null )
			{
				qpr3QPRFreeze = false;
			}
			
			if(nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
						
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(fullYearSnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			else if(nonBrand!=null )
			{
				fullYearQPRFreeze = false;
			}
			
			if(nonBrand!=null)
			{
				//List<Project> latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(budgetYear, nonBrand,spendReportFilter);
				List<Project> latestCostNonBrand =null;
						
				if(fetchLatestCostProjects)
				{
					latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(new Integer(budgetYearsArr[i]), nonBrand,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				
	    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
	    				// those QPR Snapshots which are not frozen.
	    				if(budgetYearNonBrands.get(new Integer(budgetYearsArr[i])).contains(nonBrand))
	    				{
	    					latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(new Integer(budgetYearsArr[i]), nonBrand,spendReportFilter, projectIds);
	    				}
	    			}
				}
				
				{
					if(latestCostNonBrand!=null && latestCostNonBrand.size()>0 && latestCostNonBrand.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostNonBrand.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
			// Issue #http://redmine.nvish.com/redmine/issues/475
			spendByBean.setBrand(nonBrand);
			
			if(nonBrand==1)
			{
				spendByBean.setBrandNonBrandName("Multi-Brand Study");
			}
			else if(nonBrand==2)
			{
				spendByBean.setBrandNonBrandName("Non-brand related");
			}
			
			spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
			//spendByProjectsList.add(spendByBean);
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				//spendByProjectsList.add(spendByBean);
				
				if(nonBrand==1 && spendByBrandMap.get("Multi-Brand Study")!=null)
				{
					spendByProjectsList = spendByBrandMap.get("Multi-Brand Study");
					spendByProjectsList.add(spendByBean);
					spendByBrandMap.put("Multi-Brand Study", spendByProjectsList);
				}
				else if(nonBrand==2 && spendByBrandMap.get("Non-brand related")!=null)
				{
					spendByProjectsList = spendByBrandMap.get("Non-brand related");
					spendByProjectsList.add(spendByBean);
					spendByBrandMap.put("Non-brand related", spendByProjectsList);
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
					spendByProjectsList.add(spendByBean);
					
					if(nonBrand==1)
					{
						spendByBrandMap.put("Multi-Brand Study", spendByProjectsList);
					}
					else if(nonBrand==2)
					{
						spendByBrandMap.put("Non-brand related", spendByProjectsList);
					}
					
				}
						
				
			}
			else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
			{
				
				
				if(nonBrand==1 && spendByBrandMap.get("Multi-Brand Study")!=null)
				{
					spendByProjectsList = spendByBrandMap.get("Multi-Brand Study");
					spendByProjectsList.add(spendByBean);
					spendByBrandMap.put("Multi-Brand Study", spendByProjectsList);
				}
				else if(nonBrand==2 && spendByBrandMap.get("Non-brand related")!=null)
				{
					spendByProjectsList = spendByBrandMap.get("Non-brand related");
					spendByProjectsList.add(spendByBean);
					spendByBrandMap.put("Non-brand related", spendByProjectsList);
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
					spendByProjectsList.add(spendByBean);
					
					if(nonBrand==1)
					{
						spendByBrandMap.put("Multi-Brand Study", spendByProjectsList);
					}
					else if(nonBrand==2)
					{
						spendByBrandMap.put("Non-brand related", spendByProjectsList);
					}
					
				}
			}
		}	
		
	 	
		if(allBrands!=null && allBrands.size()>0 && allNonBrands!=null && allNonBrands.size()>0)
    	{
			if(spendByProjectsList.size()==0)
    		{
    			// adding Blank Row
        		SpendByReportBean spendByBean = new SpendByReportBean();
        		spendByBean.setCoplaTotalCost(null);
        		spendByBean.setQpr1TotalCost(null);
        		spendByBean.setQpr2TotalCost(null);
        		spendByBean.setQpr3TotalCost(null);
        		spendByBean.setFullYearTotalCost(null);
        		spendByBean.setLatestTotalCost(null);
        		
        		spendByBean.setProjectId(null);
        		spendByBean.setProjectName("");
        		spendByBean.setBudgetLocationName("");
        		spendByProjectsList.add(spendByBean);
    		}
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    }
    	return spendByBrandMap;
    }
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByBrand(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<String, List<SpendByReportBean>> spendByBrandMap = new HashMap<String, List<SpendByReportBean>>();
    	
    	Set<Integer> allBrands = new HashSet<Integer>();
    	Set<Integer> allNonBrands = new HashSet<Integer>();
    	
    	Map<Integer,Set<Integer>> budgetYearBrands = new HashMap<Integer, Set<Integer>>();
    	Map<Integer,Set<Integer>> budgetYearNonBrands = new HashMap<Integer, Set<Integer>>();
    	
    	
    	// New Fields 
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByBrandMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
    	
    	LinkedHashMap<String, SpendByReportBean> spendByBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByNonBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByNonBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
        	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
        	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
        	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
        	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
        		
        	
        	Set<Integer> budgetYearBrand = new HashSet<Integer>(); 
        	
        	List<Long> selectedQPRs = new ArrayList<Long>();
	    	List<SpendByReportBean> allBrandBeans = new ArrayList<SpendByReportBean>();
	    	
	    	List<SpendByReportBean> allNonBrandBeans = new ArrayList<SpendByReportBean>();
	    	
	    	if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				selectedQPRs.add(coplaSnapShotId);
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr1SnapShotId);
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr2SnapShotId);
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr3SnapShotId);
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				selectedQPRs.add(fullYearSnapShotId);
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
        	
        	if(fetchLatestCostProjects)
    		{
        		//allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
        		
        		//Brand Filter
    	       /* if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    	        {
    	        	for(Long brand : spendReportFilter.getBrands())
    	        	{
    	        		allBrands.add(brand.intValue());
    	        	}
    	        }
    	        else
    	        {
    	        	allBrands.addAll(projectDAONew.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    	        }
    	        budgetYearBrand = new HashSet<Integer>(allBrands);
    	        */
    	        
    	        if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				//allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
    				//Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		if(brand.intValue()==SynchroConstants.MULTI_BRAND_UI_VALUE)
    		        		{
    		        			allNonBrands.add(SynchroConstants.MULTI_BRAND_DB_VALUE);
    		        		}
    		        		else if(brand.intValue()==SynchroConstants.NON_BRAND_UI_VALUE)
    		        		{
    		        			allNonBrands.add(SynchroConstants.NON_BRAND_DB_VALUE);
    		        		}
    		        		else
    		        		{
    		        			allBrands.add(brand.intValue());
    		        		}
    		        		
    		        	}
    		        }
    		        else
    		        {
    		        	allBrands.addAll(qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
    		        	allNonBrands.addAll(qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
    		        }
    		        
    		        
    		     
    			}
    			
    			if(allBrands!=null && allBrands.size()>0)
		        {
    				allBrandBeans = qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBrands, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allBrandBeans)
	    			{
	    				String s = blBean.getBrand()+"~"+blBean.getBrandType();
	    				spendByBrandKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allBrandBeans)
					{
		        		String s = blBean.getBrand()+"~"+blBean.getBrandType();
						for(String key: spendByBrandKey.keySet())
						{
							if(key.contains(blBean.getBrand()+"") && sortedSpendByBrandKey.get(key)==null)
							{
								sortedSpendByBrandKey.put(key, spendByBrandKey.get(key));
							}
						}
					}
		        }
    			
    			if(allNonBrands!=null && allNonBrands.size()>0)
		        {
    				allNonBrandBeans = qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allNonBrands, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allNonBrandBeans)
	    			{
	    				String s = blBean.getStudyType()+"~"+blBean.getBrandType();
	    				spendByNonBrandKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allNonBrandBeans)
					{
		        		String s = blBean.getStudyType()+"~"+blBean.getBrandType();
						for(String key: spendByNonBrandKey.keySet())
						{
							if(key.contains(blBean.getStudyType()+"") && sortedSpendByNonBrandKey.get(key)==null)
							{
								sortedSpendByNonBrandKey.put(key, spendByNonBrandKey.get(key));
							}
						}
					}
		        }
    			
    			allBrands = new HashSet<Integer>();
    	    	allNonBrands = new HashSet<Integer>();
    	    	
    	    //	allBrands.addAll(projectDAONew.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    	    //	allNonBrands.addAll(projectDAONew.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    	    	
        	    allBrands.addAll(projectDAONew.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
        	    allNonBrands.addAll(projectDAONew.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
    	    	
    	    	
    	    	
    	    	for(Integer brand: allBrands)
    			{
    	    		String brandType = SynchroUtils.getBrandBrandTypeFields().get(brand.intValue());
    	    		if(brandType!=null)
    	    		{
    	    			
    	    		}
    	    		else
    	    		{
    	    			brandType = "Non-GDB";
    	    		}
    	    		
    	    		String s = brand+"~"+brandType;
			    	SpendByReportBean blBean = new SpendByReportBean();
			    	blBean.setBrand(brand);
			    	blBean.setBrandType(brandType);
			    	
    				spendByBrandKey.put(s, blBean);
    			}
    			
    			
			    for(Integer brand: allBrands)
				{
			    	String brandType = SynchroUtils.getBrandBrandTypeFields().get(brand.intValue());
    	    		if(brandType!=null)
    	    		{
    	    			
    	    		}
    	    		else
    	    		{
    	    			brandType = "Non-GDB";
    	    		}
    	    		
    	    		String s = brand+"~"+brandType;
					for(String key: spendByBrandKey.keySet())
					{
						if(key.contains(brand+"") && sortedSpendByBrandKey.get(key)==null)
						{
							sortedSpendByBrandKey.put(key, spendByBrandKey.get(key));
						}
					}
				}   
			    
			    
			    for(Integer nonBrand: allNonBrands)
    			{
    	    		String brandType = "Non-GDB";
    	    		
    	    		String s = nonBrand+"~"+brandType;
			    	SpendByReportBean blBean = new SpendByReportBean();
			    	blBean.setBrand(nonBrand);
			    	blBean.setBrandType(brandType);
			    	
			    	blBean.setStudyType(nonBrand);
			    	
    				spendByNonBrandKey.put(s, blBean);
    			}
    			
    			
			    for(Integer nonBrand: allNonBrands)
				{
			    	String brandType = "Non-GDB";
    	    		
    	    		String s = nonBrand+"~"+brandType;
					for(String key: spendByNonBrandKey.keySet())
					{
						if(key.contains(nonBrand+"") && sortedSpendByNonBrandKey.get(key)==null)
						{
							sortedSpendByNonBrandKey.put(key, spendByNonBrandKey.get(key));
						}
					}
				}   
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				//allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
    				//Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		/*allBrands.add(brand.intValue());
    		        		allNonBrands.add(brand.intValue());*/
    		        		if(brand.intValue()==SynchroConstants.MULTI_BRAND_UI_VALUE)
    		        		{
    		        			allNonBrands.add(SynchroConstants.MULTI_BRAND_DB_VALUE);
    		        		}
    		        		else if(brand.intValue()==SynchroConstants.NON_BRAND_UI_VALUE)
    		        		{
    		        			allNonBrands.add(SynchroConstants.NON_BRAND_DB_VALUE);
    		        		}
    		        		else
    		        		{
    		        			allBrands.add(brand.intValue());
    		        		}
    		        	}
    		        }
    		        else
    		        {
    		        	allBrands.addAll(qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
    		        	allNonBrands.addAll(qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
    		        }
    		        
    		        
    		     
    			}
    			
    			if(allBrands!=null && allBrands.size()>0)
		        {
    				allBrandBeans = qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBrands, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allBrandBeans)
	    			{
	    				String s = blBean.getBrand()+"~"+blBean.getBrandType();
	    				spendByBrandKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allBrandBeans)
					{
		        		String s = blBean.getBrand()+"~"+blBean.getBrandType();
						for(String key: spendByBrandKey.keySet())
						{
							if(key.contains(blBean.getBrand()+"") && sortedSpendByBrandKey.get(key)==null)
							{
								sortedSpendByBrandKey.put(key, spendByBrandKey.get(key));
							}
						}
					}
		        }
    			
    			if(allNonBrands!=null && allNonBrands.size()>0)
		        {
    				allNonBrandBeans = qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allNonBrands, selectedQPRs);
		        	
		        	for(SpendByReportBean blBean: allNonBrandBeans)
	    			{
	    				String s = blBean.getStudyType()+"~"+blBean.getBrandType();
	    				spendByNonBrandKey.put(s, blBean);
	    			}
		        	
		        	for(SpendByReportBean blBean: allNonBrandBeans)
					{
		        		String s = blBean.getStudyType()+"~"+blBean.getBrandType();
						for(String key: spendByNonBrandKey.keySet())
						{
							if(key.contains(blBean.getStudyType()+"") && sortedSpendByNonBrandKey.get(key)==null)
							{
								sortedSpendByNonBrandKey.put(key, spendByNonBrandKey.get(key));
							}
						}
					}
		        }
    			
    		}
        	
        	
        	/*Set<Integer> budgetYearNonBrand = new HashSet<Integer>(); 
        	
    		if(fetchLatestCostProjects)
    		{
    			//allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
    			
    			//Brand Filter
    	        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    	        {
    	        	for(Long brand : spendReportFilter.getBrands())
    	        	{
    	        		allNonBrands.add(brand.intValue());
    	        	}
    	        }
    	        else
    	        {
    	        	allNonBrands.addAll(projectDAONew.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    	        }
    			
    	        budgetYearNonBrand = new HashSet<Integer>(allNonBrands);
    		}
    		else
    		{
    			// http://redmine.nvish.com/redmine/issues/423
    			
    			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
    			{
    				
    			}
    			else
    			{
    				coplaSnapShotId=new Long("0");
    				
    			}
    			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr1SnapShotId=new Long("0");
    				
    			}
    			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr2SnapShotId=new Long("0");
    				
    			}
    			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				qpr3SnapShotId=new Long("0");
    				
    			}
    			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
    			{
    				
    			}
    			else
    			{
    				fullYearSnapShotId=new Long("0");
    				
    			}
    			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
    			{
    				//allNonBrands = qprSnapshotDAO.getNonBrandsForQPRSnapshot(budgetYear);
    				
    				//Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		allNonBrands.add(brand.intValue());
    		        	}
    		        }
    		        else
    		        {
    		        	allNonBrands.addAll(qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i])));
    		        }
    			}
    			
    			  budgetYearNonBrand = new HashSet<Integer>(allNonBrands);
    		}
        	
    		budgetYearBrands.put(new Integer(budgetYearsArr[i]), budgetYearBrand);
    		budgetYearNonBrands.put(new Integer(budgetYearsArr[i]), budgetYearNonBrand);*/
    	
        	
        	for(String key: sortedSpendByBrandKey.keySet())
        	{
    	
        		
        		SpendByReportBean bLBean = sortedSpendByBrandKey.get(key);
    			
    	    	SpendByReportBean spendByBean = new SpendByReportBean();
    	    	spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
    	/*List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	//List<Integer> allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
    	
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
    		
    	
		for(Integer brand:allBrands)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			
			boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
			*/
    	    	
			if(bLBean.getBrand()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
			/*	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(coplaSnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
				*/
				
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBrandAgencySnapshot(coplaSnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getBrand()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr1SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBrandAgencySnapshot(qpr1SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getBrand()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr2SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBrandAgencySnapshot(qpr2SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getBrand()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr3SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBrandAgencySnapshot(qpr3SnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getBrand()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{

				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(fullYearSnapShotId,bLBean.getBrand(),bLBean.getBrandType(), spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getBrandAgencySnapshot(fullYearSnapShotId,bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getBrand()!=null)
			{
				//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
				List<Project> latestCostBudgetLocation = null;
				latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getBrand(),bLBean.getBrandType(),spendReportFilter, null);
				/*if(fetchLatestCostProjects)
				{
					latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getBrand(),spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				
	    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
	    				// those QPR Snapshots which are not frozen.
	    				if(budgetYearBrands!=null && budgetYearBrands.get(new Integer(budgetYearsArr[i]))!=null && budgetYearBrands.get(new Integer(budgetYearsArr[i])).contains(bLBean.getBrand()))
	    				{
	    					latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getBrand(),spendReportFilter, projectIds);
	    				}
	    				
	    				
	    			}
				}
				*/
				
				
			
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
				{
					//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
			
			boolean addCost = false;
			
			if(fetchLatestCostProjects)
			{
				if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
				{
					addCost = true;
				}
			}
			else
			{
				if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
				{
					addCost = true;
				}
			}
			
			//if(addCost)
		//	{
			
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(bLBean.getBrand()));
				spendByBean.setBrand(bLBean.getBrand());
				
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
				String brandKey = spendByBean.getBrandNonBrandName()+"~"+bLBean.getBrandType();
				
				
				if(finalSpendByBrandMap!=null && finalSpendByBrandMap.containsKey(brandKey))
				{
					
	    			List<SpendByReportBean> spendReportBeanList = finalSpendByBrandMap.get(brandKey);
					spendReportBeanList.add(spendByBean);
				}
				else
				{
					List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
					
					// This is done for adding the blank Spend By Report Beans for previous budget years 
					if(i>0)
					{
						for(int j=0;j<i;j++)
						{
							SpendByReportBean blankSpendByBean = new SpendByReportBean();
							spendReportBeanList.add(blankSpendByBean);
						}
					}
					spendReportBeanList.add(spendByBean);
					finalSpendByBrandMap.put(brandKey, spendReportBeanList);
				}
			}
			//spendByProjectsList.add(spendByBean);
		//}	
		
		//Add the Non Brands
		//List<Integer> allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
		
		
        	for(String key: sortedSpendByNonBrandKey.keySet())
        	{
    	
        		
        		SpendByReportBean bLBean = sortedSpendByNonBrandKey.get(key);
    			
    	    	SpendByReportBean spendByBean = new SpendByReportBean();
    	    	spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
    	
			/*
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
			*/
    	    	
			if(bLBean.getStudyType()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
				/*
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(coplaSnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
				
				
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}*/
				
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getNonBrandAgencySnapshot(coplaSnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
		
			if(bLBean.getStudyType()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr1SnapShotId,bLBean.getStudyType(), bLBean.getBrandType(), spendReportFilter);
				
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getNonBrandAgencySnapshot(qpr1SnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getStudyType()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr2SnapShotId,bLBean.getStudyType(),bLBean.getBrandType(),spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getNonBrandAgencySnapshot(qpr2SnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getStudyType()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr3SnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getNonBrandAgencySnapshot(qpr3SnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
			
			
			if(bLBean.getStudyType()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				/*
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(fullYearSnapShotId,bLBean.getStudyType(), bLBean.getBrandType(), spendReportFilter);
				
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
				*/
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getNonBrandAgencySnapshot(fullYearSnapShotId,bLBean.getStudyType(),bLBean.getBrandType(), spendReportFilter);
    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    				}
				}
			}
		
			if(bLBean.getStudyType()!=null)
			{
				//List<Project> latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(budgetYear, nonBrand,spendReportFilter);
				List<Project> latestCostNonBrand =null;
				latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getStudyType(),bLBean.getBrandType(),spendReportFilter, null);
				
				/*if(fetchLatestCostProjects)
				{
					latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getStudyType(),spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				
	    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
	    				// those QPR Snapshots which are not frozen.
	    				if(budgetYearNonBrands!=null && budgetYearNonBrands.get(new Integer(budgetYearsArr[i]))!=null && budgetYearNonBrands.get(new Integer(budgetYearsArr[i])).contains(bLBean.getStudyType()))
	    				{
	    					latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(new Integer(budgetYearsArr[i]), bLBean.getStudyType(),spendReportFilter, projectIds);
	    				}
	    			}
				}
				*/
			
				if(latestCostNonBrand!=null && latestCostNonBrand.size()>0 && latestCostNonBrand.get(0).getTotalCost()!=null)
				{
					//spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostNonBrand.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
				
				boolean addCost = false;
				
				if(fetchLatestCostProjects)
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
					{
						addCost = true;
					}
				}
				else
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
					{
						addCost = true;
					}
				}
				
				// This logic is if there is cost for any of the QPR Snapshot then add the cost otherwise display '-'
			//	if(addCost)
			//	{
				
					//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
					// Issue #http://redmine.nvish.com/redmine/issues/475
					spendByBean.setBrand(bLBean.getStudyType());
					
					if(bLBean.getStudyType()!=null && bLBean.getStudyType()==1)
					{
						spendByBean.setBrandNonBrandName("Multi-Brand Study");
					}
					else if(bLBean.getStudyType()!=null && bLBean.getStudyType()==2)
					{
						spendByBean.setBrandNonBrandName("Non-brand related");
					}
					
					spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
					//spendByProjectsList.add(spendByBean);
					
					String nonBrandKey = spendByBean.getBrandNonBrandName()+"~"+bLBean.getBrandType();
					
					if(finalSpendByBrandMap!=null && finalSpendByBrandMap.containsKey(nonBrandKey))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByBrandMap.get(nonBrandKey);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByBrandMap.put(nonBrandKey, spendReportBeanList);
					}
				//}
			}
		}	
		
	 	
    	}
   
    	return finalSpendByBrandMap;
    }
    
    
    @Override
    public List<SpendByReportBean> getSpendByBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	//List<Integer> allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
    	List<Integer> allBrands = new ArrayList<Integer>();
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    		
    	
    	
    	if(fetchLatestCostProjects)
		{
    		//allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear);
    		
    		//Brand Filter
	        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
	        {
	        	for(Long brand : spendReportFilter.getBrands())
	        	{
	        		allBrands.add(brand.intValue());
	        	}
	        }
	        else
	        {
	        	allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear,spendReportFilter);
	        }
			
		}
		else
		{
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
				//Brand Filter
		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
		        {
		        	for(Long brand : spendReportFilter.getBrands())
		        	{
		        		allBrands.add(brand.intValue());
		        	}
		        }
		        else
		        {
		        	allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
		        }
			}
		}
    	
    		
    	
		for(Integer brand:allBrands)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			if(brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(coplaSnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(brand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
	
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr1SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(brand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr2SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(brand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(qpr3SnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(brand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
						
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBrandSnapshot(fullYearSnapShotId,brand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(brand!=null)
			{
				//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
				List<Project> latestCostBudgetLocation = null;
				
				if(fetchLatestCostProjects)
				{
					latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter, projectIds);
	    			}
				}
				
				
				
				{
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
			spendByBean.setBrand(brand);
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				spendByProjectsList.add(spendByBean);
			}
			//spendByProjectsList.add(spendByBean);
		}	
		
		//Add the Non Brands
		//List<Integer> allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
		List<Integer> allNonBrands = new ArrayList<Integer>();
		if(fetchLatestCostProjects)
		{
			//allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear);
			
			//Brand Filter
	        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
	        {
	        	for(Long brand : spendReportFilter.getBrands())
	        	{
	        		allNonBrands.add(brand.intValue());
	        	}
	        }
	        else
	        {
	        	allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear,spendReportFilter);
	        }
			
		}
		else
		{
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allNonBrands = qprSnapshotDAO.getNonBrandsForQPRSnapshot(budgetYear);
				
				//Brand Filter
		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
		        {
		        	for(Long brand : spendReportFilter.getBrands())
		        	{
		        		allNonBrands.add(brand.intValue());
		        	}
		        }
		        else
		        {
		        	allNonBrands = qprSnapshotDAO.getNonBrandsForQPRSnapshot(budgetYear);
		        }
			}
		}
		
		for(Integer nonBrand:allNonBrands)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			if(nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(coplaSnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							coplaTotalCostNull = false;
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
	
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr1SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr2SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(qpr3SnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
		
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
						
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByNonBrandSnapshot(fullYearSnapShotId,nonBrand,spendReportFilter);
				//spendByBean.setBrandNonBrandName(brand+"");
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(nonBrand!=null)
			{
				//List<Project> latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(budgetYear, nonBrand,spendReportFilter);
				List<Project> latestCostNonBrand =null;
						
				if(fetchLatestCostProjects)
				{
					latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(budgetYear, nonBrand,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				latestCostNonBrand = projectDAONew.getSpendByNonBrandLatestCost(budgetYear, nonBrand,spendReportFilter, projectIds);
	    			}
				}
				
				{
					if(latestCostNonBrand!=null && latestCostNonBrand.size()>0 && latestCostNonBrand.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostNonBrand.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostNonBrand.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
			// Issue #http://redmine.nvish.com/redmine/issues/475
			
			spendByBean.setBrand(nonBrand);
			
			if(nonBrand==1)
			{
				spendByBean.setBrandNonBrandName("Multi-Brand Study");
			}
			else if(nonBrand==2)
			{
				spendByBean.setBrandNonBrandName("Non-brand related");
			}
			
			//spendByProjectsList.add(spendByBean);
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				spendByProjectsList.add(spendByBean);
			}
		}	
		
	 	
		if(allBrands!=null && allBrands.size()>0 && allNonBrands!=null && allNonBrands.size()>0)
    	{
			if(spendByProjectsList.size()==0)
    		{
    			// adding Blank Row
        		SpendByReportBean spendByBean = new SpendByReportBean();
        		spendByBean.setCoplaTotalCost(null);
        		spendByBean.setQpr1TotalCost(null);
        		spendByBean.setQpr2TotalCost(null);
        		spendByBean.setQpr3TotalCost(null);
        		spendByBean.setFullYearTotalCost(null);
        		spendByBean.setLatestTotalCost(null);
        		
        		spendByBean.setProjectId(null);
        		spendByBean.setProjectName("");
        		spendByBean.setBudgetLocationName("");
        		spendByProjectsList.add(spendByBean);
    		}
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    	return spendByProjectsList;
    }
    
    
    @Override
    public Map<Integer, List<SpendByReportBean>> getSpendByAgencyMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<Integer, List<SpendByReportBean>> spendByAgencyMap = new HashMap<Integer, List<SpendByReportBean>>();
    	Set<Long> allAgencies = new HashSet<Long>();
    	
    	Map<Integer,Set<Long>> budgetYearAgencies = new HashMap<Integer, Set<Long>>();
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	Set<Long> budgetYearAgency = new HashSet<Long>(); 
	    	
	    	if(fetchLatestCostProjects)
			{
	    		allAgencies.addAll(projectDAONew.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
				
	    		budgetYearAgency = new HashSet<Long>(allAgencies);
	    		
			}
			else
			{
				// http://redmine.nvish.com/redmine/issues/423
				
				if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
				{
					
				}
				else
				{
					coplaSnapShotId=new Long("0");
					
				}
				if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr1SnapShotId=new Long("0");
					
				}
				if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr2SnapShotId=new Long("0");
					
				}
				if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					qpr3SnapShotId=new Long("0");
					
				}
				if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
				}
				else
				{
					fullYearSnapShotId=new Long("0");
					
				}
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					allAgencies.addAll(qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i])));
				}
				budgetYearAgency = new HashSet<Long>(allAgencies);
			}
	    	budgetYearAgencies.put(new Integer(budgetYearsArr[i]), budgetYearAgency);
    	}
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
	    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	    	
	    	//List<Long> allAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear);
	    	
	    	
	    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	
	    		
	    	
	    		
			for(Long agency:allAgencies)
			{
	    	
				SpendByReportBean spendByBean = new SpendByReportBean();
				
				boolean coplaTotalCostNull = true;
				boolean qpr1TotalCostNull = true;
				boolean qpr2TotalCostNull = true;
				boolean qpr3TotalCostNull = true;
				boolean fullYearTotalCostNull = true;
				boolean latestTotalCostNull = true;
				
				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				
				if(agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(coplaSnapShotId,agency, spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							coplaTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					coplaTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				else if(agency!=null)
				{
					coplaQPRFreeze = false;
				}
					
				if(agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr1SnapShotId,agency,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    					qpr1TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				else if(agency!=null)
				{
					qpr1QPRFreeze = false;
				}
				
				if(agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr2SnapShotId,agency,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					qpr2TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				else if(agency!=null)
				{
					qpr2QPRFreeze = false;
				}
				
				if(agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr3SnapShotId,agency,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							qpr3TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					qpr3TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				else if(agency!=null)
				{
					qpr3QPRFreeze = false;
				}
				
				if(agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(fullYearSnapShotId,agency,spendReportFilter);
				
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							fullYearTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    					fullYearTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				else if(agency!=null)
				{
					fullYearQPRFreeze = false;
				}
				
				if(agency!=null)
				{
				
					//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
					List<ProjectCostDetailsBean> latestCostAgency = null;
					if(fetchLatestCostProjects)
					{
						latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(new Integer(budgetYearsArr[i]), agency,spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
	
		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				
		    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearAgencies.get(new Integer(budgetYearsArr[i])).contains(agency))
		    				{
		    					latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(new Integer(budgetYearsArr[i]), agency,spendReportFilter, projectIds);
		    				}
		    			}
					}
					
					{
						if(latestCostAgency!=null && latestCostAgency.size()>0)
						{
							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								
								latestTotalCostNull = false;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					latestTotalCostNull = false;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
				}
				
				if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
				{
					spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
				
					if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
					{
						spendByBean.setResearchAgecnyType("Kantar");
					}
					else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
					{
						spendByBean.setResearchAgecnyType("Non-Kantar");
					}
					else
					{
						spendByBean.setResearchAgecnyType(" ");
					}
					
				}
				else
				{
					spendByBean.setResearchAgecny(" ");
				}
				
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				//spendByProjectsList.add(spendByBean);
				
				//http://redmine.nvish.com/redmine/issues/515
				if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
				{
					//spendByProjectsList.add(spendByBean);
					
					
					
					
					if(spendByAgencyMap.get(agency.intValue())!=null)
					{
						spendByProjectsList = spendByAgencyMap.get(agency.intValue());
					}
					else
					{
						spendByProjectsList = new ArrayList<SpendByReportBean>();
					}
							
					spendByProjectsList.add(spendByBean);
					
					spendByAgencyMap.put(agency.intValue(), spendByProjectsList);
				}
				
				else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
				{
					if(spendByAgencyMap.get(agency.intValue())!=null)
					{
						spendByProjectsList = spendByAgencyMap.get(agency.intValue());
					}
					else
					{
						spendByProjectsList = new ArrayList<SpendByReportBean>();
					}
							
					spendByProjectsList.add(spendByBean);
					
					spendByAgencyMap.put(agency.intValue(), spendByProjectsList);
				}
			}	
		    
	
			if(allAgencies!=null && allAgencies.size()>0)
	    	{
	    		if(spendByProjectsList.size()==0)
	    		{
	    			SpendByReportBean spendByBean = new SpendByReportBean();
	        		spendByBean.setCoplaTotalCost(null);
	        		spendByBean.setQpr1TotalCost(null);
	        		spendByBean.setQpr2TotalCost(null);
	        		spendByBean.setQpr3TotalCost(null);
	        		spendByBean.setFullYearTotalCost(null);
	        		spendByBean.setLatestTotalCost(null);
	        		
	        		spendByBean.setProjectId(null);
	        		spendByBean.setProjectName("");
	        		spendByBean.setBudgetLocationName("");
	        		spendByProjectsList.add(spendByBean);
	    		}
	    	}
	    	else
	    	{
	    		// adding Blank Row
	    		SpendByReportBean spendByBean = new SpendByReportBean();
	    		spendByBean.setCoplaTotalCost(null);
	    		spendByBean.setQpr1TotalCost(null);
	    		spendByBean.setQpr2TotalCost(null);
	    		spendByBean.setQpr3TotalCost(null);
	    		spendByBean.setFullYearTotalCost(null);
	    		spendByBean.setLatestTotalCost(null);
	    		
	    		spendByBean.setProjectId(null);
	    		spendByBean.setProjectName("");
	    		spendByBean.setBudgetLocationName("");
	    		spendByProjectsList.add(spendByBean);
	    		
	    	}
    	}	
	    return spendByAgencyMap;
	    	
    }
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByAgency(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<Integer, List<SpendByReportBean>> spendByAgencyMap = new HashMap<Integer, List<SpendByReportBean>>();
    	Set<Long> allAgencies = new HashSet<Long>();
    	
    	Map<Integer,Set<Long>> budgetYearAgencies = new HashMap<Integer, Set<Long>>();
    	
    	// New Ones
    	
    	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByAgencyMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
    	
    	LinkedHashMap<String, SpendByReportBean> spendByAgencyKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByAgencyKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	Set<Long> budgetYearAgency = new HashSet<Long>(); 
	    	
	    	List<Long> selectedQPRs = new ArrayList<Long>();
	    	
	    	
	    	if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				selectedQPRs.add(coplaSnapShotId);
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr1SnapShotId);
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr2SnapShotId);
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr3SnapShotId);
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				selectedQPRs.add(fullYearSnapShotId);
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			
	    	if(fetchLatestCostProjects)
			{
	    		
	    		if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allAgencies.addAll(qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs));
	    			// Agencies should be fetched on the basis of Budget locations associated for each user
					allAgencies.addAll(qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
					
					if(allAgencies!=null && allAgencies.size()>0)
			        {
						for(Long agency: allAgencies)
		    			{
							if(agency!=null)
					    	{
								String s = agency+"";
			    				SpendByReportBean blBean = new SpendByReportBean();
			    		    	blBean.setResearchAgecny(SynchroGlobal.getAllResearchAgency().get(agency.intValue()));
			    		    	
			    				spendByAgencyKey.put(s, blBean);
					    	}
		    			}
			        	
			        	
			        }
				}
	    		
	    		allAgencies = new HashSet<Long>();
	    		allAgencies.addAll(projectDAONew.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
				
	    		for(Long agency: allAgencies)
				{
			    	if(agency!=null)
			    	{
		    			String s = agency+"";
	    				SpendByReportBean blBean = new SpendByReportBean();
	    		    	blBean.setResearchAgecny(SynchroGlobal.getAllResearchAgency().get(agency.intValue()));
	    		    	
	    				spendByAgencyKey.put(s, blBean);
			    	}
				}
	    		
			}
			else
			{
				// http://redmine.nvish.com/redmine/issues/423
				
				
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					//allAgencies.addAll(qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs));
					// Agencies should be fetched on the basis of Budget locations associated for each user
					allAgencies.addAll(qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, spendReportFilter));
				}
				if(allAgencies!=null && allAgencies.size()>0)
		        {
					for(Long agency: allAgencies)
	    			{
						if(agency!=null)
				    	{
							String s = agency+"";
		    				SpendByReportBean blBean = new SpendByReportBean();
		    		    	blBean.setResearchAgecny(SynchroGlobal.getAllResearchAgency().get(agency.intValue()));
		    		    	
		    				spendByAgencyKey.put(s, blBean);
				    	}
	    			}
		        	
		        	
		        }
				
			}
	    
	    	
	    		
	    	
	    		
	    	for(String key: spendByAgencyKey.keySet())
	    	{
	    	
	    		SpendByReportBean bLBean = spendByAgencyKey.get(key);
				
		    	SpendByReportBean spendByBean = new SpendByReportBean();
		    	spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
		    	/*
				
				boolean coplaTotalCostNull = true;
				boolean qpr1TotalCostNull = true;
				boolean qpr2TotalCostNull = true;
				boolean qpr3TotalCostNull = true;
				boolean fullYearTotalCostNull = true;
				boolean latestTotalCostNull = true;
				
				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				*/
		    	Long agency = new Long(key);
				if(agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(coplaSnapShotId,agency, spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				
					
				if(agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr1SnapShotId,agency,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							//qpr1TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    					//qpr1TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				
				
				if(agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr2SnapShotId,agency,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							//qpr2TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					//qpr2TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				
				
				if(agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr3SnapShotId,agency,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							//qpr3TotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					//qpr3TotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				
				
				if(agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(fullYearSnapShotId,agency,spendReportFilter);
				
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							//fullYearTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    					//fullYearTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				
				if(agency!=null)
				{
				
					//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
				/*	List<ProjectCostDetailsBean> latestCostAgency = null;
					if(fetchLatestCostProjects)
					{
						latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(new Integer(budgetYearsArr[i]), agency,spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
	
		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				
		    				// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearAgencies.get(new Integer(budgetYearsArr[i])).contains(agency))
		    				{
		    					latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(new Integer(budgetYearsArr[i]), agency,spendReportFilter, projectIds);
		    				}
		    			}
					}
					
					{
						if(latestCostAgency!=null && latestCostAgency.size()>0)
						{
							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								
								//latestTotalCostNull = false;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					//latestTotalCostNull = false;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}*/
					
					
					
					List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(new Integer(budgetYearsArr[i]), agency, spendReportFilter, null);
					
					if(latestCostAgency!=null && latestCostAgency.size()>0 )
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							//latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
	    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					//latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				
				
				boolean addCost = false;
				
				if(fetchLatestCostProjects)
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
					{
						addCost = true;
					}
				}
				else
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
					{
						addCost = true;
					}
				}
				
				// This logic is if there is cost for any of the QPR Snapshot then add the cost otherwise display '-'
			//	if(addCost)
				//	{
					spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
					spendByBean.setResearchAgecny(bLBean.getResearchAgecny());
					
					//spendByProjectsList.add(spendByBean);
					/*
					//http://redmine.nvish.com/redmine/issues/515
					if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
					{
						//spendByProjectsList.add(spendByBean);
						
						
						
						
						if(spendByAgencyMap.get(agency.intValue())!=null)
						{
							spendByProjectsList = spendByAgencyMap.get(agency.intValue());
						}
						else
						{
							spendByProjectsList = new ArrayList<SpendByReportBean>();
						}
								
						spendByProjectsList.add(spendByBean);
						
						spendByAgencyMap.put(agency.intValue(), spendByProjectsList);
					}
					
					else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
					{
						if(spendByAgencyMap.get(agency.intValue())!=null)
						{
							spendByProjectsList = spendByAgencyMap.get(agency.intValue());
						}
						else
						{
							spendByProjectsList = new ArrayList<SpendByReportBean>();
						}
								
						spendByProjectsList.add(spendByBean);
						
						spendByAgencyMap.put(agency.intValue(), spendByProjectsList);
					}*/
					
					if(finalSpendByAgencyMap!=null && finalSpendByAgencyMap.containsKey(key))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByAgencyMap.get(key);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByAgencyMap.put(key, spendReportBeanList);
					}
				//}
			}	
		    
	
			
    	}	
	    return finalSpendByAgencyMap;
	    	
    }
    
    @Override
    public List<SpendByReportBean> getSpendByAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	
    	//List<Long> allAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear);
    	List<Long> allAgencies = new ArrayList<Long>();
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		allAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear, spendReportFilter);
			
		}
		else
		{
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				allAgencies = qprSnapshotDAO.getAgenciesForQPRSnapshot(budgetYear);
			}
		}
    		
    	
    		
		for(Long agency:allAgencies)
		{
    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			if(agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(coplaSnapShotId,agency, spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						coplaTotalCostNull = false;
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					coplaTotalCostNull = false;
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr1SnapShotId,agency,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						qpr1TotalCostNull = false;
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					
    					qpr1TotalCostNull = false;
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr2SnapShotId,agency,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						qpr2TotalCostNull = false;
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					qpr2TotalCostNull = false;
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(qpr3SnapShotId,agency,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
						qpr3TotalCostNull = false;
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					qpr3TotalCostNull = false;
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencySnapshot(fullYearSnapShotId,agency,spendReportFilter);
			
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
						fullYearTotalCostNull = false;
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			
    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    					
    					fullYearTotalCostNull = false;
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(agency!=null)
			{
			
				//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
				List<ProjectCostDetailsBean> latestCostAgency = null;
				if(fetchLatestCostProjects)
				{
					latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
	    			}
				}
				
				{
					if(latestCostAgency!=null && latestCostAgency.size()>0)
					{
						//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
						
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
							
							latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			
	    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
	    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
			
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}
				
			}
			else
			{
				spendByBean.setResearchAgecny(" ");
			}
			
			
			//spendByProjectsList.add(spendByBean);
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				spendByProjectsList.add(spendByBean);
			}
		}	
	    

		if(allAgencies!=null && allAgencies.size()>0)
    	{
    		if(spendByProjectsList.size()==0)
    		{
    			SpendByReportBean spendByBean = new SpendByReportBean();
        		spendByBean.setCoplaTotalCost(null);
        		spendByBean.setQpr1TotalCost(null);
        		spendByBean.setQpr2TotalCost(null);
        		spendByBean.setQpr3TotalCost(null);
        		spendByBean.setFullYearTotalCost(null);
        		spendByBean.setLatestTotalCost(null);
        		
        		spendByBean.setProjectId(null);
        		spendByBean.setProjectName("");
        		spendByBean.setBudgetLocationName("");
        		spendByProjectsList.add(spendByBean);
    		}
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
		
    	return spendByProjectsList;
    }
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByAgencyTypeMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean  fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	Map<String, List<SpendByReportBean>> spendByAgencyTypeMap = new HashMap<String, List<SpendByReportBean>>();
    	
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    	
	    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
	    	//List<Long> allKantarAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear);
	    		
	    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	
	    	boolean coplaQPRFreeze = true;
			boolean qpr1QPRFreeze = true;
			boolean qpr2QPRFreeze = true;
			boolean qpr3QPRFreeze = true;
			boolean fullYearQPRFreeze = true;
	    	
			SpendByReportBean spendByBean = new SpendByReportBean();
			
			if(fetchLatestCostProjects || (isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0) || (isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					|| (isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0) || (isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					|| (isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0))
			{
				if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(coplaSnapShotId,1,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr1SnapShotId,1,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr2SnapShotId,1,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr3SnapShotId,1,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(fullYearSnapShotId,1,spendReportFilter);
				
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 1,spendReportFilter);
				List<ProjectCostDetailsBean> latestCostAgency = null;
				
				if(fetchLatestCostProjects)
				{
					latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(new Integer(budgetYearsArr[i]), 1,spendReportFilter,null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
		
					if(projectIds!=null && projectIds.size()>0)
					{
						latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(new Integer(budgetYearsArr[i]), 1,spendReportFilter, projectIds);
					}
				}
				
				{
					if(latestCostAgency!=null && latestCostAgency.size()>0)
					{
						//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
							spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				spendByBean.setResearchAgecnyType("Kantar");
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
			//	spendByProjectsList.add(spendByBean);
				
				
				if(spendByAgencyTypeMap.get("Kantar")!=null)
				{
					spendByProjectsList = spendByAgencyTypeMap.get("Kantar");
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				spendByAgencyTypeMap.put("Kantar", spendByProjectsList);
				
				//Non-Kantar Agency Type
			    
				spendByBean = new SpendByReportBean();
				if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(coplaSnapShotId,2,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr1SnapShotId,2,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr2SnapShotId,2,spendReportFilter);
					
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr3SnapShotId,2,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
					
					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(fullYearSnapShotId,2,spendReportFilter);
				
					if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
					{
						//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
							spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				//latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 2,spendReportFilter);
		
				
				if(fetchLatestCostProjects)
				{
					latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(new Integer(budgetYearsArr[i]), 2,spendReportFilter,null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
		
					if(projectIds!=null && projectIds.size()>0)
					{
						latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(new Integer(budgetYearsArr[i]), 2,spendReportFilter,projectIds);
					}
				}
				{
					if(latestCostAgency!=null && latestCostAgency.size()>0)
					{
						//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
						{
							spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
						else
						{
							Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		        			
							BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
							spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
						}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				spendByBean.setResearchAgecnyType("Non Kantar");
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
				if(spendByAgencyTypeMap.get("Non Kantar")!=null)
				{
					spendByProjectsList = spendByAgencyTypeMap.get("Non Kantar");
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				spendByAgencyTypeMap.put("Non Kantar", spendByProjectsList);
				
				//spendByProjectsList.add(spendByBean);
			}
			else
			{
				spendByBean.setResearchAgecnyType("Kantar");
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				//spendByProjectsList.add(spendByBean);
				
				if(spendByAgencyTypeMap.get("Kantar")!=null)
				{
					spendByProjectsList = spendByAgencyTypeMap.get("Kantar");
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
						
				spendByProjectsList.add(spendByBean);
				spendByAgencyTypeMap.put("Kantar", spendByProjectsList);
				
				 spendByBean = new SpendByReportBean();
				if(spendByAgencyTypeMap.get("Non Kantar")!=null)
				{
					spendByProjectsList = spendByAgencyTypeMap.get("Non Kantar");
				}
				else
				{
					spendByProjectsList = new ArrayList<SpendByReportBean>();
				}
				
				spendByBean.setResearchAgecnyType("Non Kantar");
				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
				
				spendByProjectsList.add(spendByBean);
				spendByAgencyTypeMap.put("Non Kantar", spendByProjectsList);
				
				
			}
    	}
	    return spendByAgencyTypeMap;
    }
    
    @Override
    public List<SpendByReportBean> getSpendByAgencyType(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean  fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	//List<Long> allKantarAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear);
    	
    	
    		
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
		SpendByReportBean spendByBean = new SpendByReportBean();
		
		if(fetchLatestCostProjects || (isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0) || (isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				|| (isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0) || (isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				|| (isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0))
		{
			if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(coplaSnapShotId,1,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr1SnapShotId,1,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr2SnapShotId,1,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr3SnapShotId,1,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(fullYearSnapShotId,1,spendReportFilter);
			
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 1,spendReportFilter);
			List<ProjectCostDetailsBean> latestCostAgency = null;
			
			if(fetchLatestCostProjects)
			{
				latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 1,spendReportFilter,null);
			}
			else
			{
				
				// This has been done as part of http://redmine.nvish.com/redmine/issues/423
				List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				if(projectIds!=null && projectIds.size()>0)
				{
					latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 1,spendReportFilter, projectIds);
				}
			}
			
			{
				if(latestCostAgency!=null && latestCostAgency.size()>0)
				{
					//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
						spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
			spendByBean.setResearchAgecnyType("Kantar");
			spendByProjectsList.add(spendByBean);
			
			//Non-Kantar Agency Type
		    
			spendByBean = new SpendByReportBean();
			if(coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(coplaSnapShotId,2,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr1SnapShotId,2,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr2SnapShotId,2,spendReportFilter);
				
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(qpr3SnapShotId,2,spendReportFilter);
				//spendByBean.setBudgetLocation(budgetLocation);
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByAgencyTypeSnapshot(fullYearSnapShotId,2,spendReportFilter);
			
				if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
				{
					//spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			//latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 2,spendReportFilter);
	
			
			if(fetchLatestCostProjects)
			{
				latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 2,spendReportFilter,null);
			}
			else
			{
				
				// This has been done as part of http://redmine.nvish.com/redmine/issues/423
				List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				if(projectIds!=null && projectIds.size()>0)
				{
					latestCostAgency = projectDAONew.getSpendByAgencyTypeLatestCost(budgetYear, 2,spendReportFilter,projectIds);
				}
			}
			{
				if(latestCostAgency!=null && latestCostAgency.size()>0)
				{
					//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			
						BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
						spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
			spendByBean.setResearchAgecnyType("Non Kantar");
			spendByProjectsList.add(spendByBean);
		}
		else
		{
			spendByBean.setResearchAgecnyType(" ");
			spendByProjectsList.add(spendByBean);
		}
    	return spendByProjectsList;
    }
    /**
     * This method if for calculating the Agency Costs in one Currency
     * @param projectCostList
     * @return
     */
    private BigDecimal calculateAgencyTotalCost(List<QPRProjectCostSnapshot> projectCostList)
    {
    	BigDecimal totalCost = new BigDecimal(0);
    	for(QPRProjectCostSnapshot projectCost:projectCostList )
    	{
    		BigDecimal agencyCost = projectCost.getEstimatedCost();
    		if(projectCost.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		{
    			totalCost = totalCost.add(agencyCost);
    		}
    		else
    		{
    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCost.getCostCurrency())) * (projectCost.getEstimatedCost().doubleValue()));
    			totalCost = totalCost.add(gbpEstimatedCost);
    		}
    	}
    	return totalCost;
    }
    
    private BigDecimal calculateAgencyTotalCost1(List<ProjectCostDetailsBean> projectCostList)
    {
    	BigDecimal totalCost = new BigDecimal(0);
    	for(ProjectCostDetailsBean projectCost:projectCostList )
    	{
    		BigDecimal agencyCost = projectCost.getEstimatedCost();
    		if(projectCost.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		{
    			totalCost = totalCost.add(agencyCost);
    		}
    		else
    		{
    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCost.getCostCurrency())) * (projectCost.getEstimatedCost().doubleValue()));
    			totalCost = totalCost.add(gbpEstimatedCost);
    		}
    	}
    	return totalCost;
    }
    
    @Override
    public List<SpendByReportBean> getSpendByCrossTab(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter,
    		boolean fetchLatestCostProjects, boolean isSpendByProject, boolean isSpendByBudgetLocation, boolean isSpendByBrand, 
    		boolean isSpendByMethodology, boolean isSpendByAgency, boolean isSpendByKantarNonKantar, boolean isSpendByCategoryType, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) 
    {

    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	List<Integer> allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear, spendReportFilter);
    	
    		
		if(fetchLatestCostProjects)
		{
			allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear, spendReportFilter);
			
		}
		else
		{
			allBudgetLocations = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(budgetYear);
		}
		
		
		List<String> allMethodologies = null;
    	if(fetchLatestCostProjects)
		{
    		allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear,spendReportFilter);
		}
		else
		{
			allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
		}
    	
    	List<Integer> allBrands = null;
    	if(fetchLatestCostProjects)
		{
    		allBrands = projectDAONew.getBrandsForQPRSnapshot(budgetYear,spendReportFilter);
		}
		else
		{
			allBrands = qprSnapshotDAO.getBrandsForQPRSnapshot(budgetYear);
		}
    	List<Integer> allNonBrands = null;
		if(fetchLatestCostProjects)
		{
			allNonBrands = projectDAONew.getNonBrandsForQPRSnapshot(budgetYear,spendReportFilter);			
		}
		else
		{
			allNonBrands = qprSnapshotDAO.getNonBrandsForQPRSnapshot(budgetYear);
		}
		
		List<Long> allAgencies = null;
    	if(fetchLatestCostProjects)
		{
    		allAgencies = projectDAONew.getAgenciesForQPRSnapshot(budgetYear, spendReportFilter);
		}
		else
		{
			allAgencies = qprSnapshotDAO.getAgenciesForQPRSnapshot(budgetYear);
		}
    	
    	
    	List<String> allCategories = null;
    	if(fetchLatestCostProjects)
		{
    		allCategories = projectDAONew.getCategoryTypesForQPRSnapshot(budgetYear,spendReportFilter);
    	
		}
		else
		{
			allCategories = qprSnapshotDAO.getCategoryTypesForQPRSnapshot(budgetYear);
		
		}
    	
    	// If Crosstab for Spend By Project is selected, then it will have the details at Project Level
    	if(isSpendByProject)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			spendByProjectsList=getSpendByProjectsAgencyCrossTab(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByProjects(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand && isSpendByAgency)
    	{
    		spendByProjectsList=populateAllCrossTab(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allBrands, allNonBrands, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    	}
    	
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabAll(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor); // DONE
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabAll(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allBrands, allNonBrands, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLMethCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabBLMethCategoryType(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLMethCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies,allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabBLMethCategoryType(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies,allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLMeth(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabBLMeth(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethBrandCT(budgetYear, currencyId, spendReportFilter, allMethodologies, allBrands, allNonBrands, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabMethBrandCT(budgetYear, currencyId, spendReportFilter,  allMethodologies, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethBrand(budgetYear, currencyId, spendReportFilter, allMethodologies, allBrands, allNonBrands, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabMethBrand(budgetYear, currencyId, spendReportFilter,  allMethodologies, allBrands, allNonBrands, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation  && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByBudgetLocation(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabBLCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBL(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByBudgetLocation(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethCT(budgetYear, currencyId, spendReportFilter, allMethodologies, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByMethodology(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabMethCategoryType(budgetYear, currencyId, spendReportFilter, allMethodologies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			
    		}
    	}
    	else if(isSpendByMethodology)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMeth(budgetYear, currencyId, spendReportFilter, allMethodologies, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByMethodology(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBrandCT(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByBrand(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabBrandCT(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBrand(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByBrand(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	// This is done in case the Spend By Agency is selected alone with Spend By Project or Spend By Kantar/NonKantar
    	else if(isSpendByAgency && isSpendByCategoryType)
    	{
    		//spendByProjectsList=getSpendByAgency(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		spendByProjectsList=populateAgencyCrossTabCT(budgetYear, currencyId, spendReportFilter, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    	}
    	
    	// This is done in case the Spend By Agency is selected alone with Spend By Project or Spend By Kantar/NonKantar
    	else if(isSpendByAgency)
    	{
    		spendByProjectsList=getSpendByAgency(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}
    	// This is done if Spend By Project is selected with Spend by Kantar/Non-Kantar http://redmine.nvish.com/redmine/issues/523
    	else if(isSpendByKantarNonKantar)
    	{
    		spendByProjectsList=getSpendByAgencyType(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}
    	
    	else if(isSpendByCategoryType)
    	{
    		spendByProjectsList=getSpendByCategoryType(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}
    	
		if(spendByProjectsList!=null && spendByProjectsList.size()>0)
    	{
    		
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    	return spendByProjectsList;
    
    }
    
    @Override
    public Map<String,List<SpendByReportBean>> getSpendByCrossTab(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter,
    		boolean fetchLatestCostProjects, boolean isSpendByProject, boolean isSpendByBudgetLocation, boolean isSpendByBrand, 
    		boolean isSpendByMethodology, boolean isSpendByAgency, boolean isSpendByKantarNonKantar, boolean isSpendByCategoryType, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) 
    {

    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	//List<Integer> allBudgetLocations = projectDAONew.getBudgetLocationsForQPRSnapshot(budgetYear);
    
    	
    	
    	// New Fields
    	
    	Set<Integer> allBudgetLocations = new HashSet<Integer>();
    	Set<String> allMethodologies = new HashSet<String>();
    	Set<Integer> allBrands = new HashSet<Integer>();
    	Set<Integer> allNonBrands = new HashSet<Integer>();
    	Set<String> allCategories = new HashSet<String>();
    	List<Project> allProjects = new ArrayList<Project>();
    	
    	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
    	
    	
    	LinkedHashMap<String, Project> spendByProjectKey = new LinkedHashMap<String, Project>();
    	
    	LinkedHashMap<String, Project> sortedSpendByProjectKey = new LinkedHashMap<String, Project>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByBudgetLocationKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByBudgetLocationKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByMethodologyKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByMethodologyKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByNonBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> sortedSpendByNonBrandKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	LinkedHashMap<String, SpendByReportBean> spendByCategoryKey = new LinkedHashMap<String, SpendByReportBean>();
    	
    	//First get the projects and make the key
    	for(int i=0;i<budgetYearsArr.length;i++)
    	{
    		Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
	    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
	    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
	    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
	    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
	    	
	    	List<Long> selectedQPRs = new ArrayList<Long>();
	    	List<SpendByReportBean> allBudgetLocationBeans = new ArrayList<SpendByReportBean>();
	    	
	    	List<SpendByReportBean> allMethodologyBeans = new ArrayList<SpendByReportBean>();
	    	
	    	List<SpendByReportBean> allBrandBeans = new ArrayList<SpendByReportBean>();
	    	
	    	List<SpendByReportBean> allNonBrandBeans = new ArrayList<SpendByReportBean>();
	    	
	    
	    	if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				selectedQPRs.add(coplaSnapShotId);
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr1SnapShotId);
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr2SnapShotId);
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				selectedQPRs.add(qpr3SnapShotId);
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				selectedQPRs.add(fullYearSnapShotId);
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			
			if(fetchLatestCostProjects)
			{
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter, selectedQPRs);
					if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				allProjects = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),projectIds,selectedQPRs);
	    				
	    				for(Project project: allProjects)
	        			{
	    					
	    					
	    					String s = "";
	        				if(isSpendByProject)
	        				{
	        					//s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	        					s = project.getProjectID()+"~"+project.getName();
	        				}
	        				
	        				if(isSpendByBudgetLocation)
	        				{
	        					if(isSpendByProject)
	        					{
	        						s = s + "~"+ project.getBudgetLocation() + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}
	        					else
	        					{
	        						//s = s + "~"+ project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        						s = project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}
	        				
	        					
	        				}
	        				/*if(isSpendByBudgetLocation)
	        				{
	        					s = s + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        				}*/
	        				
	        				if(isSpendByMethodology)
	        				{
	        					if(isSpendByProject || isSpendByBudgetLocation)
	        					{
	        						s = s + "~"+ project.getMethodologies()+"~"+project.getMethGroup();
	        					}
	        					else
	        					{
	        						s = project.getMethodologies()+"~"+project.getMethGroup();
	        					}
	        				}
	        				if(isSpendByBrand)
	        				{
	        					if(project.getBrandSpecificStudyType()!=null || project.getBrand()!=null)
	        					{
		        					//if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==-1)
	        						if(project.getBrand()!=null && project.getBrand().intValue()!=-1 && project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==1)
		        					{
		        						
	        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
	        							{
	        								s = s +"~" + SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
	        							}
	        							else
	        							{
	        								s = SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
	        							}
	        							
		        					}
		        					else
		        					{
		        						if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==1)
		        						{
		        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
		        							{
		        								s = s +"~" + "Multi-Brand Study"+"~"+project.getBrandType();
		        							}
		        							else
		        							{
		        								s = "Multi-Brand Study"+"~"+project.getBrandType();
		        							}
		        						}
		        						else if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==2)
		        						{
		        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
		        							{
		        								s = s +"~" + "Non-brand related"+"~"+project.getBrandType();
		        							}
		        							else
		        							{
		        								s = "Non-brand related"+"~"+project.getBrandType();
		        							}
		        						}
		        					}
	        					}
	        					
	        				}
	        				if(isSpendByCategoryType)
	        				{
	        					if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology || isSpendByBrand)
	        					{
	        						s = s + "~" + project.getCategories();
	        					}
	        					else
	        					{
	        						s = project.getCategories();
	        					}
	        				}
	        				
	        				if(isSpendByAgency || isSpendByKantarNonKantar)
	        				{
	        					// TODO : Add the Agency Logic
	        				/*	List<Long> allAgencies = new ArrayList<Long>();
	        					allAgencies = qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, project.getProjectID());
	        					if(allAgencies!=null && allAgencies.size() > 0)
	        					{
	        						for(Long agency: allAgencies)
	        	        			{
	        							String agencykey="";
	        							agencykey = s + "~" + agency;
	        							//s = s + "~" + agency;
	        							//spendByProjectKey.put(s,project);
	        							if(spendByProjectKey.get(agencykey)==null)
	        							{
	        								spendByProjectKey.put(agencykey,project);
	        							}
	        							
	        	        			}
	        					} */
	        					
	        					// This is done as we need to save the Agency Type as well for Agencies
	        					List<QPRProjectCostSnapshot> allAgencies = new ArrayList<QPRProjectCostSnapshot>();
	        					allAgencies = qprSnapshotDAO.getAgenciesAgencyTypeForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, project.getProjectID());
	        					if(allAgencies!=null && allAgencies.size() > 0)
	        					{
	        						for(QPRProjectCostSnapshot qprAgency: allAgencies)
	        	        			{
	        							String agencykey="";
	        							agencykey = s + "~" + qprAgency.getAgencyId() + "~" + qprAgency.getAgencyType();
	        							//s = s + "~" + agency;
	        							//spendByProjectKey.put(s,project);
	        							if(spendByProjectKey.get(agencykey)==null)
	        							{
	        								spendByProjectKey.put(agencykey,project);
	        							}
	        							
	        	        			}
	        					}
	        				}
	        				else
	        				{
	        				
	        					spendByProjectKey.put(s,project);
	        				}
	        			}
	    				
	    				// This is done so that the same project Ids should remain together
	    				for(Project project: allProjects)
	    				{
	    					//String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	    					for(String key: spendByProjectKey.keySet())
	    					{
	    						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
	    						{
	    							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
	    						}
	    					}
	    				}
	    			}
				
				}
				
				allProjects = new ArrayList<Project>();
    			
    			allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter);
    			
    			for(Project project: allProjects)
    			{
    				
    				
    				//String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
					String s = "";
    				if(isSpendByProject)
    				{
    					//s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
    					s = project.getProjectID()+"~"+project.getName();
    				}
    				
    				if(isSpendByBudgetLocation)
    				{
    					/*if(isSpendByProject)
    					{
    						s = s + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    					}
    					else
    					{
    						//s = s + "~"+ project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    						s = project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    					}*/
    					
    					if(isSpendByProject)
    					{
    						s = s + "~"+ project.getBudgetLocation() + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    					}
    					else
    					{
    						//s = s + "~"+ project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    						s = project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    					}
    					
    					
    				}
    				
    				/*if(isSpendByBudgetLocation)
    				{
    					s = s + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
    				}*/
    				
    				if(isSpendByMethodology)
    				{
    					if(isSpendByProject || isSpendByBudgetLocation)
    					{
    						s = s + "~"+ project.getMethodologies()+"~"+project.getMethGroup();
    					}
    					else
    					{
    						s = project.getMethodologies()+"~"+project.getMethGroup();
    					}
    				}
    				if(isSpendByBrand)
    				{
    					if(project.getBrandSpecificStudyType()!=null || project.getBrand()!=null)
    					{
        					//if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==-1)
    						if(project.getBrand()!=null && project.getBrand().intValue()!=-1 && project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==1 )
        					{
        						
    							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
    							{
    								s = s +"~" + SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
    							}
    							else
    							{
    								s = SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
    							}
    							
        					}
        					else
        					{
        						if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==1)
        						{
        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
        							{
        								s = s +"~" + "Multi-Brand Study"+"~"+project.getBrandType();
        							}
        							else
        							{
        								s = "Multi-Brand Study"+"~"+project.getBrandType();
        							}
        						}
        						else if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==2)
        						{
        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
        							{
        								s = s +"~" + "Non-brand related"+"~"+project.getBrandType();
        							}
        							else
        							{
        								s = "Non-brand related"+"~"+project.getBrandType();
        							}
        						}
        					}
    					}
    					
    				}
    				if(isSpendByCategoryType)
    				{
    					if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology || isSpendByBrand)
    					{
    						s = s + "~" + project.getCategories();
    					}
    					else
    					{
    						s = project.getCategories();
    					}
    				}
    				
    				if(isSpendByAgency || isSpendByKantarNonKantar)
    				{
    					// TODO : Add the Agency Logic
    					List<ProjectCostDetailsBean> pcdBean  = projectDAONew.getProjectCostDetails(project.getProjectID());
    					if(pcdBean!=null && pcdBean.size() > 0)
    					{
    						for(ProjectCostDetailsBean pcb: pcdBean)
    	        			{
    							
    							String agencykey="";
    							String agencyType="";
    							if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())==1)
                				{
                  					agencyType = "Kantar";
                				}
                				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())==2)
                				{
                					agencyType = "Non-Kantar";
                				}
                				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(pcb.getAgencyId().intValue())==3)
                				{
                					//agencyType = "Not Classified";
                					agencyType = "Unclassified Agency";
                				}
    							
    							//agencykey = s + "~" + pcb.getAgencyId();
    							
    							agencykey = s + "~" + pcb.getAgencyId() + "~" +agencyType;
    							
    							if(spendByProjectKey.get(agencykey)==null)
    							{
    								spendByProjectKey.put(agencykey,project);
    							}
    							
    							//spendByProjectKey.put(s,project);
    	        			}
    					}
    				}
    				else
    				{
    				
    					spendByProjectKey.put(s,project);
    				}
    				
    				//spendByProjectKey.put(s,project);
    			}
    			
    			
    			for(Project project: allProjects)
				{
					String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
					for(String key: spendByProjectKey.keySet())
					{
						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
						{
							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
						}
					}
				}
			}
			else
			{
				// http://redmine.nvish.com/redmine/issues/423
				
				if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
				{
					
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter, selectedQPRs);
					if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				allProjects = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]),projectIds,selectedQPRs);
	    				
	    				for(Project project: allProjects)
	        			{
	        				//String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	    					String s = "";
	        				if(isSpendByProject)
	        				{
	        					//s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	        					s = project.getProjectID()+"~"+project.getName();
	        				}
	        				
	        				if(isSpendByBudgetLocation)
	        				{
	        					/*if(isSpendByProject)
	        					{
	        						s = s + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}
	        					else
	        					{
	        						//s = s + "~"+ project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        						s = project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}*/
	        					if(isSpendByProject)
	        					{
	        						s = s + "~"+ project.getBudgetLocation() + "~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}
	        					else
	        					{
	        						//s = s + "~"+ project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        						s = project.getBudgetLocation()+"~"+project.getRegion()+"~"+project.getArea()+"~"+project.getT20_40();
	        					}
	        					
	        				}
	        				
	        				if(isSpendByMethodology)
	        				{
	        					if(isSpendByProject || isSpendByBudgetLocation)
	        					{
	        						s = s + "~"+ project.getMethodologies()+"~"+project.getMethGroup();
	        					}
	        					else
	        					{
	        						s = project.getMethodologies()+"~"+project.getMethGroup();
	        					}
	        				}
	        				if(isSpendByBrand)
	        				{
	        					if(project.getBrandSpecificStudyType()!=null || project.getBrand()!=null)
	        					{
		        					//if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType().intValue()==-1)
	        						if(project.getBrand()!=null && project.getBrand().intValue()!=-1 && project.getBrandSpecificStudy()!=null && project.getBrandSpecificStudy().intValue()==1)
		        					{
	        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
	        							{
	        								s = s +"~" + SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
	        							}
	        							else
	        							{
	        								s = SynchroGlobal.getAllBrands().get(project.getBrand().intValue())+"~"+project.getBrandType();
	        							}
	        							
		        					}
		        					else
		        					{
		        						if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==1)
		        						{
		        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
		        							{
		        								s = s +"~" + "Multi-Brand Study"+"~"+project.getBrandType();
		        							}
		        							else
		        							{
		        								s = "Multi-Brand Study"+"~"+project.getBrandType();
		        							}
		        						}
		        						else if(project.getBrandSpecificStudyType()!=null && project.getBrandSpecificStudyType()==2)
		        						{
		        							if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology)
		        							{
		        								s = s +"~" + "Non-brand related"+"~"+project.getBrandType();
		        							}
		        							else
		        							{
		        								s = "Non-brand related"+"~"+project.getBrandType();
		        							}
		        						}
		        					}
	        					}
	        					
	        				}
	        				if(isSpendByCategoryType)
	        				{
	        					if(isSpendByProject || isSpendByBudgetLocation || isSpendByMethodology || isSpendByBrand)
	        					{
	        						s = s + "~" + project.getCategories();
	        					}
	        					else
	        					{
	        						s = project.getCategories();
	        					}
	        				}
	        				
	        				if(isSpendByAgency || isSpendByKantarNonKantar)
	        				{
	        					// TODO : Add the Agency Logic
	        					/*List<Long> allAgencies = new ArrayList<Long>();
	        					allAgencies = qprSnapshotDAO.getAgenciesForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, project.getProjectID());
	        					if(allAgencies!=null && allAgencies.size() > 0)
	        					{
	        						for(Long agency: allAgencies)
	        	        			{
	        							String agencykey="";
	        							agencykey = s + "~" + agency;
	        							//s = s + "~" + agency;
	        							//spendByProjectKey.put(s,project);
	        							if(spendByProjectKey.get(agencykey)==null)
	        							{
	        								spendByProjectKey.put(agencykey,project);
	        							}
	        							
	        	        			}
	        					}*/
	        					
	        					// This is done as we need to save the Agency Type as well for Agencies
	        					List<QPRProjectCostSnapshot> allAgencies = new ArrayList<QPRProjectCostSnapshot>();
	        					allAgencies = qprSnapshotDAO.getAgenciesAgencyTypeForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs, project.getProjectID());
	        					if(allAgencies!=null && allAgencies.size() > 0)
	        					{
	        						for(QPRProjectCostSnapshot qprAgency: allAgencies)
	        	        			{
	        							String agencykey="";
	        							agencykey = s + "~" + qprAgency.getAgencyId() + "~" + qprAgency.getAgencyType();
	        							//s = s + "~" + agency;
	        							//spendByProjectKey.put(s,project);
	        							if(spendByProjectKey.get(agencykey)==null)
	        							{
	        								spendByProjectKey.put(agencykey,project);
	        							}
	        							
	        	        			}
	        					}
	        				}
	        				else
	        				{
	        				
	        					spendByProjectKey.put(s,project);
	        				}
	        			}
	    				
	    				// This is done so that the same project Ids should remain together
	    				for(Project project: allProjects)
	    				{
	    					//String s = project.getProjectID()+"~"+project.getName()+"~"+project.getBudgetLocation();
	    					for(String key: spendByProjectKey.keySet())
	    					{
	    						if(key.contains(project.getProjectID()+"") && sortedSpendByProjectKey.get(key)==null)
	    						{
	    							sortedSpendByProjectKey.put(key, spendByProjectKey.get(key));
	    						}
	    					}
	    				}
	    			}
					
					//Budget Location Filter
			 /*       if(spendReportFilter.getBudgetLocations() != null && spendReportFilter.getBudgetLocations().size()>0 ) 
			        {
			        	for(Long bl : spendReportFilter.getBudgetLocations())
			        	{
			        		allBudgetLocations.add(bl.intValue());
			        	}
			        	//allBudgetLocations = spendReportFilter.getBudgetLocations();		            
			        }
			        else
			        {
			        	allBudgetLocations.addAll(qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs));
			        }
			        
			      //Methodology Filter
			        if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
			        {
			        	for(Long meth : spendReportFilter.getMethDetails())
			        	{
			        		allMethodologies.add(meth.toString());
			        	}
			        }
			        else
			        {
			        	//allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i])));
			        	allMethodologies.addAll(qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs));
			        }
			        
			      //Brand Filter
    		        if(spendReportFilter.getBrands() != null && spendReportFilter.getBrands().size()>0 ) 
    		        {
    		        	for(Long brand : spendReportFilter.getBrands())
    		        	{
    		        		allBrands.add(brand.intValue());
    		        		allNonBrands.add(brand.intValue());
    		        	}
    		        }
    		        else
    		        {
    		        	allBrands.addAll(qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs));
    		        	allNonBrands.addAll(qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), selectedQPRs));
    		        }
			        
    		        allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs));
    		        
    		        
			        if(allBudgetLocations!=null && allBudgetLocations.size()>0)
			        {
			        	allBudgetLocationBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs);
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
		    			{
		    				String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
		    				spendByBudgetLocationKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allBudgetLocationBeans)
						{
			        		String s = blBean.getBudgetLocation()+"~"+blBean.getRegion()+"~"+blBean.getArea()+"~"+blBean.getT20_40();
							for(String key: spendByBudgetLocationKey.keySet())
							{
								if(key.contains(blBean.getBudgetLocation()+"") && sortedSpendByBudgetLocationKey.get(key)==null)
								{
									sortedSpendByBudgetLocationKey.put(key, spendByBudgetLocationKey.get(key));
								}
							}
						}
			        }
			        
			        if(allMethodologies!=null && allMethodologies.size()>0)
			        {
			        	//allMethodologyBeans = qprSnapshotDAO.getBudgetLocationsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBudgetLocations, selectedQPRs);
						
						List<String> allMethList = new ArrayList<String>();
						
						for(String meth: allMethodologies)
						{
							allMethList.add(meth);
						}
						
			        	allMethodologyBeans = qprSnapshotDAO.getMethodologiesForQPRSnapshot(new Integer(budgetYearsArr[i]), allMethList, selectedQPRs);
			        	
			        	for(SpendByReportBean blBean: allMethodologyBeans)
		    			{
		    				String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
		    				spendByMethodologyKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allMethodologyBeans)
						{
			        		String s = blBean.getMethodologies()+"~"+blBean.getMethGroup();
							for(String key: spendByMethodologyKey.keySet())
							{
								if(key.contains(blBean.getMethodologies()+"") && sortedSpendByMethodologyKey.get(key)==null)
								{
									sortedSpendByMethodologyKey.put(key, spendByMethodologyKey.get(key));
								}
							}
						}
			        }
			        
			        if(allBrands!=null && allBrands.size()>0)
			        {
	    				allBrandBeans = qprSnapshotDAO.getBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allBrands, selectedQPRs);
			        	
			        	for(SpendByReportBean blBean: allBrandBeans)
		    			{
		    				String s = blBean.getBrand()+"~"+blBean.getBrandType();
		    				spendByBrandKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allBrandBeans)
						{
			        		String s = blBean.getBrand()+"~"+blBean.getBrandType();
							for(String key: spendByBrandKey.keySet())
							{
								if(key.contains(blBean.getBrand()+"") && sortedSpendByBrandKey.get(key)==null)
								{
									sortedSpendByBrandKey.put(key, spendByBrandKey.get(key));
								}
							}
						}
			        }
	    			
	    			if(allNonBrands!=null && allNonBrands.size()>0)
			        {
	    				allNonBrandBeans = qprSnapshotDAO.getNonBrandsForQPRSnapshot(new Integer(budgetYearsArr[i]), allNonBrands, selectedQPRs);
			        	
			        	for(SpendByReportBean blBean: allNonBrandBeans)
		    			{
		    				String s = blBean.getStudyType()+"~"+blBean.getBrandType();
		    				spendByNonBrandKey.put(s, blBean);
		    			}
			        	
			        	for(SpendByReportBean blBean: allNonBrandBeans)
						{
			        		String s = blBean.getStudyType()+"~"+blBean.getBrandType();
							for(String key: spendByNonBrandKey.keySet())
							{
								if(key.contains(blBean.getStudyType()+"") && sortedSpendByNonBrandKey.get(key)==null)
								{
									sortedSpendByNonBrandKey.put(key, spendByNonBrandKey.get(key));
								}
							}
						}
			        }
	    			
	    			if(allCategories!=null && allCategories.size()>0)
	    	        {
	    	        	for(String category: allCategories)
	        			{
	    	        		if(category!=null)
	    					{
	    		        		String s = category;
	    	    				SpendByReportBean blBean = new SpendByReportBean();
	    	    		    	blBean.setCategoryTypes(category);
	    	    		    	blBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(category));
	    	    				spendByCategoryKey.put(s, blBean);
	    					}
	        				
	        			}
	    	        	
	    	        	
	    	        }*/
				}
			}
			
		
    	
    	// If Crosstab for Spend By Project is selected, then it will have the details at Project Level
    	if(isSpendByProject)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByBudgetLocation && isSpendByBrand && isSpendByCategoryType)
	    		{
    				//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
    				finalSpendByCrossTabMap = populateCrossTabProjectMethBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			
    			else if(isSpendByBudgetLocation && isSpendByMethodology)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByBudgetLocation && isSpendByBrand)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByBudgetLocation && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByMethodology && isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMethBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			
    			else if(isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMethCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			
    			else if(isSpendByBrand && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			
    			else if(isSpendByBudgetLocation)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByMethodology)
    			{
    				// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMethAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    			}
    			
    			else if(isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			
    			else if(isSpendByCategoryType)
	    		{
	    			// Done
    				finalSpendByCrossTabMap = populateCrossTabProjectCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else
    			{
    				// Done
    				finalSpendByCrossTabMap = populateCrossTabProjectAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    			}
    			//
    			
	    		
    		}
    		else
    		{
    		
	    		if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMethCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByMethodology)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLMeth(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByBrand)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBLCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology && isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMethBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		
	    		else if(isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMethCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBudgetLocation)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBL(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectMeth(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabProjectBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByCategoryType)
	    		{
	    			finalSpendByCrossTabMap = populateCrossTabProjectCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    		
    		
    	}
    	
    	else if(isSpendByBudgetLocation)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
    				//Done
    				finalSpendByCrossTabMap = populateCrossTabBLMethBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else if(isSpendByMethodology && isSpendByBrand)
	    		{
	    			//Done
    				finalSpendByCrossTabMap = populateCrossTabBLMethBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMethCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabBLBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMethAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    		else
    		{
	    		if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMethBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology && isSpendByBrand)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMethBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMethCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand && isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByMethodology)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLMeth(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBLCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    		
    	}
    	
    	else if(isSpendByMethodology)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			if(isSpendByBrand && isSpendByCategoryType)
	    		{
    				//Done
    				finalSpendByCrossTabMap = populateCrossTabMethBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabMethBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabMethCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabMethAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    		else
    		{
	    		if(isSpendByBrand && isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabMethBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByBrand)
	    		{
	    			//DOne
	    			finalSpendByCrossTabMap = populateCrossTabMethBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
	    		else if(isSpendByCategoryType)
	    		{
	    			//Done
	    			finalSpendByCrossTabMap = populateCrossTabMethCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    	}
    	
    	else if(isSpendByBrand)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			if(isSpendByCategoryType)
	    		{
    				//Done
    				finalSpendByCrossTabMap = populateCrossTabBrandCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    			else
    			{
    				//Done
    				finalSpendByCrossTabMap = populateCrossTabBrandAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    			}
    		}
    		else
    		{
	    		if(isSpendByCategoryType)
	    		{
	    			// Done
	    			finalSpendByCrossTabMap = populateCrossTabBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		}
    		}
    	}
    	
    	else if(isSpendByCategoryType)
    	{
    		if(isSpendByAgency || isSpendByKantarNonKantar)
    		{
    			//Done
    			finalSpendByCrossTabMap = populateCrossTabCTAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    		
    		}
    	}
    	
    	// This is called when only the Spend By Agency and SpendBy Kantar Non Kantar option is selected for Crosstab
    	else if(isSpendByAgency && isSpendByKantarNonKantar)
    	{
    		//Done
			finalSpendByCrossTabMap = populateCrossTabAgency(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, spendByProjectKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
	    	
    	}
    	
    	/*
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			
    		}
    		else
    		{
    			//spendByProjectsList=populateCrossTabAll(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor); // DONE
    			// Done
    			//finalSpendByCrossTabMap = populateCrossTabBLMethBrandCT(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByBudgetLocationKey, sortedSpendByMethodologyKey, sortedSpendByBrandKey, sortedSpendByNonBrandKey, spendByCategoryKey,  coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    		}
    	}
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			
    		}
    		else
    		{
    			//spendByProjectsList=populateCrossTabAll(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allBrands, allNonBrands, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    			// Done
    			finalSpendByCrossTabMap = populateCrossTabBLMethBrand(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByBudgetLocationKey, sortedSpendByMethodologyKey, sortedSpendByBrandKey, sortedSpendByNonBrandKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLMethCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabBLMethCategoryType(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLMethCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies,allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabBLMethCategoryType(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies,allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation && isSpendByMethodology)
    	{
    		if(isSpendByAgency)
    		{
    			//spendByProjectsList=populateAgencyCrossTabBLMeth(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor );
    		}
    		else
    		{
    			// Done
    			finalSpendByCrossTabMap = populateCrossTabBLMeth(new Integer(budgetYearsArr[i]), currencyId, spendReportFilter, sortedSpendByBudgetLocationKey, sortedSpendByMethodologyKey, coplaSnapShotId, qpr1SnapShotId,  qpr2SnapShotId,  qpr3SnapShotId,  fullYearSnapShotId, i, finalSpendByCrossTabMap);
    			                        
    			//spendByProjectsList=populateCrossTabBLMeth(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allMethodologies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethBrandCT(budgetYear, currencyId, spendReportFilter, allMethodologies, allBrands, allNonBrands, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabMethBrandCT(budgetYear, currencyId, spendReportFilter,  allMethodologies, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethBrand(budgetYear, currencyId, spendReportFilter, allMethodologies, allBrands, allNonBrands, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=populateCrossTabMethBrand(budgetYear, currencyId, spendReportFilter,  allMethodologies, allBrands, allNonBrands, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation  && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBLCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByBudgetLocation(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabBLCT(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBudgetLocation)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBL(budgetYear, currencyId, spendReportFilter, allBudgetLocations, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByBudgetLocation(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByMethodology && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMethCT(budgetYear, currencyId, spendReportFilter, allMethodologies, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByMethodology(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabMethCategoryType(budgetYear, currencyId, spendReportFilter, allMethodologies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			
    		}
    	}
    	else if(isSpendByMethodology)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabMeth(budgetYear, currencyId, spendReportFilter, allMethodologies, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByMethodology(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBrand && isSpendByCategoryType)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBrandCT(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			//spendByProjectsList=getSpendByBrand(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    			spendByProjectsList=populateCrossTabBrandCT(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	else if(isSpendByBrand)
    	{
    		if(isSpendByAgency)
    		{
    			spendByProjectsList=populateAgencyCrossTabBrand(budgetYear, currencyId, spendReportFilter, allBrands, allNonBrands, allAgencies, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    		}
    		else
    		{
    			spendByProjectsList=getSpendByBrand(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		}
    	}
    	
    	// This is done in case the Spend By Agency is selected alone with Spend By Project or Spend By Kantar/NonKantar
    	else if(isSpendByAgency && isSpendByCategoryType)
    	{
    		//spendByProjectsList=getSpendByAgency(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    		spendByProjectsList=populateAgencyCrossTabCT(budgetYear, currencyId, spendReportFilter, allAgencies, allCategories, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor,  isQPR2SpendFor,  isQPR3SpendFor,  isFullYearSpendFor);
    	}
    	
    	// This is done in case the Spend By Agency is selected alone with Spend By Project or Spend By Kantar/NonKantar
    	else if(isSpendByAgency)
    	{
    		spendByProjectsList=getSpendByAgency(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}
    	// This is done if Spend By Project is selected with Spend by Kantar/Non-Kantar http://redmine.nvish.com/redmine/issues/523
    	else if(isSpendByKantarNonKantar)
    	{
    		spendByProjectsList=getSpendByAgencyType(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}
    	
    	else if(isSpendByCategoryType)
    	{
    		spendByProjectsList=getSpendByCategoryType(budgetYear, currencyId, spendReportFilter, fetchLatestCostProjects, isCOPLASpendFor, isQPR1SpendFor, isQPR2SpendFor, isQPR3SpendFor, isFullYearSpendFor);
    	}*/
    	
    	}
    	return finalSpendByCrossTabMap;
    
    }
    
    private List<SpendByReportBean> populateAllCrossTab(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {
    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				for(Long agency:allAgencies)
				{
				
					for(Integer brand:allBrands)
					{
						
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
							boolean dataExist = false;
							
							SpendByReportBean spendByBean = new SpendByReportBean();
							if(budgetLocation!=null && methodology!=null && brand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,budgetLocation,methodology,brand, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
							}
							if(budgetLocation!=null && methodology!=null && brand!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
							{
	
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,budgetLocation,methodology,brand, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
							}
							if(budgetLocation!=null && methodology!=null && brand!=null  && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,budgetLocation,methodology,brand, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
							}
							if(budgetLocation!=null && methodology!=null && brand!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,budgetLocation,methodology,brand, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
							}
							if(budgetLocation!=null && methodology!=null && brand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,budgetLocation,methodology,brand, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
							}
							
							if(budgetLocation!=null && methodology!=null && brand!=null && agency!=null)
							{
								
								//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
								List<ProjectCostDetailsBean> latestCostAgency = null;
								if(fetchLatestCostProjects)
								{
									//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
									latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrand(budgetYear, agency,spendReportFilter, null, budgetLocation, methodology, brand);
								}
								else
								{
									
									// This has been done as part of http://redmine.nvish.com/redmine/issues/423
									List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
					    			if(projectIds!=null && projectIds.size()>0)
					    			{
					    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
					    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
					    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrand(budgetYear, agency,spendReportFilter, projectIds, budgetLocation, methodology, brand);
					    			}
								}
								
								
								if(latestCostAgency!=null && latestCostAgency.size()>0)
								{
									//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
									
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist=true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
				    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist=true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
								
							}
							
							
							if(dataExist)
							{
								spendByBean.setBudgetLocation(budgetLocation);
								spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
								spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
								spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
								spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
								
								spendByBean.setMethodologies(methodology);
								spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
								spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
								spendByBean.setBrand(brand);
								
								if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
								{
									spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
									if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
									{
										spendByBean.setResearchAgecnyType("Kantar");
									}
									else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
									{
										spendByBean.setResearchAgecnyType("Non-Kantar");
									}
									else
									{
										spendByBean.setResearchAgecnyType(" ");
									}
								}
								else
								{
									spendByBean.setResearchAgecny(" ");
								}
								
								spendByReportBeanList.add(spendByBean);
							}
						}
				
				
						for(Integer nonBrand:allNonBrands)
						{
		
								//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
								boolean dataExist = false;
								
								SpendByReportBean spendByBean = new SpendByReportBean();
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
								{
									List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(coplaSnapShotId,budgetLocation,methodology,nonBrand, agency,spendReportFilter);
									//spendByBean.setBudgetLocation(budgetLocation);
									if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
									{
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
					    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setCoplaTotalCost(null);
									}
								}
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
								{
									List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr1SnapShotId,budgetLocation,methodology,nonBrand, agency,spendReportFilter);
									//spendByBean.setBudgetLocation(budgetLocation);
									if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
									{
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
					    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setQpr1TotalCost(null);
									}
								}
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
								{
									
									List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr2SnapShotId,budgetLocation,methodology,nonBrand, agency,spendReportFilter);
									//spendByBean.setBudgetLocation(budgetLocation);
									if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
									{
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
					    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setQpr2TotalCost(null);
									}
								}
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
								{
									
									List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr3SnapShotId,budgetLocation,methodology,nonBrand, agency,spendReportFilter);
									//spendByBean.setBudgetLocation(budgetLocation);
									if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
									{
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
					    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setQpr3TotalCost(null);
									}
								}
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
								{
									
									List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(fullYearSnapShotId,budgetLocation,methodology,nonBrand, agency,spendReportFilter);
									//spendByBean.setBudgetLocation(budgetLocation);
									if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
									{
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
					    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setFullYearTotalCost(null);
									}
								}
								
								
								if(budgetLocation!=null && methodology!=null && nonBrand!=null && agency!=null)
								{
									
									//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
									List<ProjectCostDetailsBean> latestCostAgency = null;
									if(fetchLatestCostProjects)
									{
										//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
										latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrand(budgetYear, agency,spendReportFilter, null, budgetLocation, methodology, nonBrand);
									}
									else
									{
										
										// This has been done as part of http://redmine.nvish.com/redmine/issues/423
										List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
		
						    			if(projectIds!=null && projectIds.size()>0)
						    			{
						    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
						    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
						    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrand(budgetYear, agency,spendReportFilter, projectIds, budgetLocation, methodology, nonBrand);
						    			}
									}
									
									
									if(latestCostAgency!=null && latestCostAgency.size()>0)
									{
										//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
										
										if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					    				{
											spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
											dataExist=true;
					    				}
					    				else
					    				{
					    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					            			
					    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
					    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					    					dataExist=true;
					    				}
									}
									else
									{
										spendByBean.setLatestTotalCost(null);
									}
									
								}
		
								if(dataExist)
								{
									spendByBean.setBudgetLocation(budgetLocation);
									spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
									spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
									spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
									spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
									
									spendByBean.setMethodologies(methodology);
									spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
									//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
									if(nonBrand==1)
									{
										spendByBean.setBrandNonBrandName("Multi-Brand Study");
									}
									else if(nonBrand==2)
									{
										spendByBean.setBrandNonBrandName("Non-brand related");
									}
									
									spendByBean.setBrand(nonBrand);
									
									if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
									{
										spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
										
										if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
										{
											spendByBean.setResearchAgecnyType("Kantar");
										}
										else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
										{
											spendByBean.setResearchAgecnyType("Non-Kantar");
										}
										else
										{
											spendByBean.setResearchAgecnyType(" ");
										}
									}
									else
									{
										spendByBean.setResearchAgecny(" ");
									}
									
									spendByReportBeanList.add(spendByBean);
								}
							
							
						}
				}
			}
		}
		return spendByReportBeanList;
	}
    
    private List<SpendByReportBean> populateAgencyCrossTabBLMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				
				for(Long agency:allAgencies)
				{
			    	
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(budgetLocation!=null && methodology!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,budgetLocation,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{

						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,budgetLocation,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,budgetLocation,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,budgetLocation,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,budgetLocation,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
				
					
					if(budgetLocation!=null && methodology!=null && agency!=null)
					{
						
						//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
						List<ProjectCostDetailsBean> latestCostAgency = null;
						if(fetchLatestCostProjects)
						{
							//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
							latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, null, budgetLocation, methodology);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
			    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, projectIds, budgetLocation, methodology);
			    			}
						}
						
						
						if(latestCostAgency!=null && latestCostAgency.size()>0)
						{
							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
						
					}
					
					if(dataExist)
					{
						spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
						{
							spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
							if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
							{
								spendByBean.setResearchAgecnyType("Kantar");
							}
							else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
							{
								spendByBean.setResearchAgecnyType("Non-Kantar");
							}
							else
							{
								spendByBean.setResearchAgecnyType(" ");
							}
						}
						else
						{
							spendByBean.setResearchAgecny(" ");
						}
						
						spendByReportBeanList.add(spendByBean);
					}
				}
			}
				
			
				
			
		}
		return spendByReportBeanList;
	
    }
    
    private List<SpendByReportBean> populateAgencyCrossTabBLMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				for(String categoryType:allCategories)
				{
					for(Long agency:allAgencies)
					{
				    	
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(budgetLocation!=null && methodology!=null && agency!=null && categoryType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,budgetLocation,methodology, null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && agency!=null && categoryType!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
	
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,budgetLocation,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && agency!=null && categoryType!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,budgetLocation,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && agency!=null &&  categoryType!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,budgetLocation,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && agency!=null && categoryType!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,budgetLocation,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
					
						
						if(budgetLocation!=null && methodology!=null && agency!=null && categoryType!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, null, budgetLocation, methodology);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, projectIds, budgetLocation, methodology);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						
						if(dataExist)
						{
							spendByBean.setBudgetLocation(budgetLocation);
							spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
							spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setCategoryTypes(categoryType);
							spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					}
				}
		}
				
			
				
			
		}
		return spendByReportBeanList;
	
    }
    
    private List<SpendByReportBean> populateAgencyCrossTabMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		
			for(String methodology:allMethodologies)
			{
				for(String categoryType:allCategories)
				{
					for(Long agency:allAgencies)
					{
				    	
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(methodology!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,null,methodology, null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(methodology!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
	
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,null,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(methodology!=null && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,null,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(methodology!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,null,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(methodology!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,null,methodology,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
					
						
						if(methodology!=null && agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, null, null, methodology);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, projectIds, null, methodology);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						
						if(dataExist)
						{
							//spendByBean.setBudgetLocation(budgetLocation);
							//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setCategoryTypes(categoryType);
							spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					}
				}
		
				
			
				
			
		}
		return spendByReportBeanList;
	
    }
    
    private List<SpendByReportBean> populateAgencyCrossTabCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter,  List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		
			
				for(String categoryType:allCategories)
				{
					for(Long agency:allAgencies)
					{
				    	
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,null,null, null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
	
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,null,null,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,null,null,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,null,null,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,null,null,null, categoryType, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
					
						
						if(agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, null, null, null);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBLMeth(budgetYear, agency,spendReportFilter, projectIds, null, null);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						
						if(dataExist)
						{
							//spendByBean.setBudgetLocation(budgetLocation);
							//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
						//	spendByBean.setMethodologies(methodology);
						//	spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setCategoryTypes(categoryType);
							spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					}
				}
		
		
		return spendByReportBeanList;
	
    }
    
    private List<SpendByReportBean> populateAgencyCrossTabMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
    		
			for(String methodology:allMethodologies)
			{
				for(Integer brand:allBrands)
				{
					for(Long agency:allAgencies)
					{
				    	
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(methodology!=null && brand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,null,methodology,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(methodology!=null && brand!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{

							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,null,methodology,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(methodology!=null && brand!=null  && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,null,methodology,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(methodology!=null && brand!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,null,methodology,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(methodology!=null && brand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,null,methodology,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(methodology!=null && brand!=null && agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, null, methodology, brand);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, projectIds, methodology, brand);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
					//	spendByBean.setBudgetLocation(budgetLocation);
					//	spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					//	spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					//	spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						
						if(dataExist)
						{
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setBrand(brand);
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					}
				}
				
				for(Integer nonBrand:allNonBrands)
				{

					for(Long agency:allAgencies)
					{
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(methodology!=null && nonBrand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(coplaSnapShotId,null,methodology,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(methodology!=null && nonBrand!=null && agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr1SnapShotId,null,methodology,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(methodology!=null && nonBrand!=null && agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr2SnapShotId,null,methodology,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(methodology!=null && nonBrand!=null && agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr3SnapShotId,null,methodology,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(methodology!=null && nonBrand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(fullYearSnapShotId,null,methodology,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(methodology!=null && nonBrand!=null && agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, null, methodology, nonBrand);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, projectIds, methodology, nonBrand);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						//spendByBean.setBudgetLocation(budgetLocation);
						//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						if(dataExist)
						{
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
							
							spendByBean.setBrand(nonBrand);
							
							if(nonBrand==1)
							{
								spendByBean.setBrandNonBrandName("Multi-Brand Study");
							}
							else if(nonBrand==2)
							{
								spendByBean.setBrandNonBrandName("Non-brand related");
							}
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					
					}
				}
				
			
		}
		return spendByReportBeanList;
	
    }
    
    
    private List<SpendByReportBean> populateAgencyCrossTabMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
    		
			for(String methodology:allMethodologies)
			{
				for(String categoryType : allCategories)
				{
					for(Integer brand:allBrands)
					{
						for(Long agency:allAgencies)
						{
					    	
							//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
							boolean dataExist = false;
							
							SpendByReportBean spendByBean = new SpendByReportBean();
							if(methodology!=null && brand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,null,methodology,brand,categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
							}
							if(methodology!=null && brand!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
							{
	
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,null,methodology,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
							}
							if(methodology!=null && brand!=null  && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,null,methodology,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
							}
							if(methodology!=null && brand!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,null,methodology,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
							}
							if(methodology!=null && brand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,null,methodology,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
							}
							
							if(methodology!=null && brand!=null && agency!=null)
							{
								
								//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
								List<ProjectCostDetailsBean> latestCostAgency = null;
								if(fetchLatestCostProjects)
								{
									//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
									latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, null, methodology, brand);
								}
								else
								{
									
									// This has been done as part of http://redmine.nvish.com/redmine/issues/423
									List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
					    			if(projectIds!=null && projectIds.size()>0)
					    			{
					    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
					    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
					    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, projectIds, methodology, brand);
					    			}
								}
								
								
								if(latestCostAgency!=null && latestCostAgency.size()>0)
								{
									//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
									
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
				    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
								
							}
						//	spendByBean.setBudgetLocation(budgetLocation);
						//	spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						//	spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						//	spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							
							if(dataExist)
							{
								spendByBean.setMethodologies(methodology);
								spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
								spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
								
								spendByBean.setCategoryTypes(categoryType);
								spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
								
								spendByBean.setBrand(brand);
								
								if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
								{
									spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
									if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
									{
										spendByBean.setResearchAgecnyType("Kantar");
									}
									else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
									{
										spendByBean.setResearchAgecnyType("Non-Kantar");
									}
									else
									{
										spendByBean.setResearchAgecnyType(" ");
									}
								}
								else
								{
									spendByBean.setResearchAgecny(" ");
								}
								
								spendByReportBeanList.add(spendByBean);
							}
						}
					}
					
					for(Integer nonBrand:allNonBrands)
					{
	
						for(Long agency:allAgencies)
						{
							//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
							boolean dataExist = false;
							
							SpendByReportBean spendByBean = new SpendByReportBean();
							if(methodology!=null && nonBrand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
							{
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(coplaSnapShotId,null,methodology,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
							}
							if(methodology!=null && nonBrand!=null && agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
							{
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr1SnapShotId,null,methodology,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
							}
							if(methodology!=null && nonBrand!=null && agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr2SnapShotId,null,methodology,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
							}
							if(methodology!=null && nonBrand!=null && agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr3SnapShotId,null,methodology,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
							}
							if(methodology!=null && nonBrand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(fullYearSnapShotId,null,methodology,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
							}
							
							if(methodology!=null && nonBrand!=null && agency!=null)
							{
								
								//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
								List<ProjectCostDetailsBean> latestCostAgency = null;
								if(fetchLatestCostProjects)
								{
									//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
									latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, null, methodology, nonBrand);
								}
								else
								{
									
									// This has been done as part of http://redmine.nvish.com/redmine/issues/423
									List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
					    			if(projectIds!=null && projectIds.size()>0)
					    			{
					    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
					    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
					    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, projectIds, methodology, nonBrand);
					    			}
								}
								
								
								if(latestCostAgency!=null && latestCostAgency.size()>0)
								{
									//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
									
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
				    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
								
							}
							//spendByBean.setBudgetLocation(budgetLocation);
							//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
							//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							if(dataExist)
							{
								spendByBean.setMethodologies(methodology);
								spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
								//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
								
								spendByBean.setBrand(nonBrand);
								
								spendByBean.setCategoryTypes(categoryType);
								spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
								
								if(nonBrand==1)
								{
									spendByBean.setBrandNonBrandName("Multi-Brand Study");
								}
								else if(nonBrand==2)
								{
									spendByBean.setBrandNonBrandName("Non-brand related");
								}
								
								if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
								{
									spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
									
									if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
									{
										spendByBean.setResearchAgecnyType("Kantar");
									}
									else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
									{
										spendByBean.setResearchAgecnyType("Non-Kantar");
									}
									else
									{
										spendByBean.setResearchAgecnyType(" ");
									}
								}
								else
								{
									spendByBean.setResearchAgecny(" ");
								}
								
								spendByReportBeanList.add(spendByBean);
							}
						
						}
					}
					
				}
		}
		return spendByReportBeanList;
	
    }
    
    
    private List<SpendByReportBean> populateAgencyCrossTabBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBrands, List<Integer> allNonBrands, List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
    		
				for(String categoryType : allCategories)
				{
					for(Integer brand:allBrands)
					{
						for(Long agency:allAgencies)
						{
					    	
							//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
							boolean dataExist = false;
							
							SpendByReportBean spendByBean = new SpendByReportBean();
							if(brand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,null,null,brand,categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
							}
							if(brand!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
							{
	
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,null,null,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
							}
							if(brand!=null  && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,null,null,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
							}
							if(brand!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,null,null,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
							}
							if(brand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,null,null,brand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
							}
							
							if(brand!=null && agency!=null)
							{
								
								//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
								List<ProjectCostDetailsBean> latestCostAgency = null;
								if(fetchLatestCostProjects)
								{
									//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
									latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, null, null, brand);
								}
								else
								{
									
									// This has been done as part of http://redmine.nvish.com/redmine/issues/423
									List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
					    			if(projectIds!=null && projectIds.size()>0)
					    			{
					    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
					    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
					    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandMeth(budgetYear, agency,spendReportFilter, projectIds, null, brand);
					    			}
								}
								
								
								if(latestCostAgency!=null && latestCostAgency.size()>0)
								{
									//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
									
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
				    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
								
							}
						//	spendByBean.setBudgetLocation(budgetLocation);
						//	spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						//	spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						//	spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							
							if(dataExist)
							{
								//spendByBean.setMethodologies(methodology);
								//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
								spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
								
								spendByBean.setCategoryTypes(categoryType);
								spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
								
								spendByBean.setBrand(brand);
								
								if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
								{
									spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
									if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
									{
										spendByBean.setResearchAgecnyType("Kantar");
									}
									else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
									{
										spendByBean.setResearchAgecnyType("Non-Kantar");
									}
									else
									{
										spendByBean.setResearchAgecnyType(" ");
									}
								}
								else
								{
									spendByBean.setResearchAgecny(" ");
								}
								
								spendByReportBeanList.add(spendByBean);
							}
						}
					}
					
					for(Integer nonBrand:allNonBrands)
					{
	
						for(Long agency:allAgencies)
						{
							//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
							boolean dataExist = false;
							
							SpendByReportBean spendByBean = new SpendByReportBean();
							if(nonBrand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
							{
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(coplaSnapShotId,null,null,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
							}
							if(nonBrand!=null && agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
							{
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr1SnapShotId,null,null,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
							}
							if(nonBrand!=null && agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr2SnapShotId,null,null,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
							}
							if(nonBrand!=null && agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(qpr3SnapShotId,null,null,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
							}
							if(nonBrand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
							{
								
								List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrandCT(fullYearSnapShotId,null,null,nonBrand, categoryType, agency,spendReportFilter);
								//spendByBean.setBudgetLocation(budgetLocation);
								if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
								{
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
				    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
							}
							
							if(nonBrand!=null && agency!=null)
							{
								
								//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
								List<ProjectCostDetailsBean> latestCostAgency = null;
								if(fetchLatestCostProjects)
								{
									//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
									latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, null, null, nonBrand);
								}
								else
								{
									
									// This has been done as part of http://redmine.nvish.com/redmine/issues/423
									List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
					    			if(projectIds!=null && projectIds.size()>0)
					    			{
					    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
					    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
					    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandMeth(budgetYear, agency,spendReportFilter, projectIds, null, nonBrand);
					    			}
								}
								
								
								if(latestCostAgency!=null && latestCostAgency.size()>0)
								{
									//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
									
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
										spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			
				    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
				    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
								
							}
							//spendByBean.setBudgetLocation(budgetLocation);
							//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
							//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							if(dataExist)
							{
								//spendByBean.setMethodologies(methodology);
								//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
								//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
								
								spendByBean.setBrand(nonBrand);
								
								spendByBean.setCategoryTypes(categoryType);
								spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
								
								if(nonBrand==1)
								{
									spendByBean.setBrandNonBrandName("Multi-Brand Study");
								}
								else if(nonBrand==2)
								{
									spendByBean.setBrandNonBrandName("Non-brand related");
								}
								
								if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
								{
									spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
									
									if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
									{
										spendByBean.setResearchAgecnyType("Kantar");
									}
									else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
									{
										spendByBean.setResearchAgecnyType("Non-Kantar");
									}
									else
									{
										spendByBean.setResearchAgecnyType(" ");
									}
								}
								else
								{
									spendByBean.setResearchAgecny(" ");
								}
								
								spendByReportBeanList.add(spendByBean);
							}
						
						}
					}
					
				
		}
		return spendByReportBeanList;
	
    }
    
    
    private List<SpendByReportBean> populateAgencyCrossTabBL(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor  )
	{


    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			
				for(Long agency:allAgencies)
				{
			    	
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(budgetLocation!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,budgetLocation,null,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								 dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(budgetLocation!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{

						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,budgetLocation,null,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(budgetLocation!=null && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,budgetLocation,null,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(budgetLocation!=null &&  agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,budgetLocation,null,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(budgetLocation!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,budgetLocation,null,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					

					if(budgetLocation!=null && agency!=null)
					{
						
						//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
						List<ProjectCostDetailsBean> latestCostAgency = null;
						if(fetchLatestCostProjects)
						{
							//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
							latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBL(budgetYear, agency,spendReportFilter, null, budgetLocation);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
			    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBL(budgetYear, agency,spendReportFilter, projectIds, budgetLocation);
			    			}
						}
						
						
						if(latestCostAgency!=null && latestCostAgency.size()>0)
						{
							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
						
					}
					
					if(dataExist)
					{
						spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						//spendByBean.setMethodologies(methodology);
						//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
						{
							spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
							if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
							{
								spendByBean.setResearchAgecnyType("Kantar");
							}
							else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
							{
								spendByBean.setResearchAgecnyType("Non-Kantar");
							}
							else
							{
								spendByBean.setResearchAgecnyType(" ");
							}
						}
						else
						{
							spendByBean.setResearchAgecny(" ");
						}
						
						spendByReportBeanList.add(spendByBean);
					}
				}
		
				
			
				
			
		}
		return spendByReportBeanList;
	
    
	}
    
    
    private List<SpendByReportBean> populateAgencyCrossTabBLCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<Long> allAgencies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor  )
  	{


      	
      	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
      	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
      	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
      	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
      	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
      	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
      	
      	
      	if(fetchLatestCostProjects)
  		{
      		
  		}
  		else
  		{
  			
  			// http://redmine.nvish.com/redmine/issues/423
  			
  			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
  			{
  				
  			}
  			else
  			{
  				coplaSnapShotId=new Long("0");
  				
  			}
  			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
  			{
  				
  			}
  			else
  			{
  				qpr1SnapShotId=new Long("0");
  				
  			}
  			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
  			{
  				
  			}
  			else
  			{
  				qpr2SnapShotId=new Long("0");
  				
  			}
  			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
  			{
  				
  			}
  			else
  			{
  				qpr3SnapShotId=new Long("0");
  				
  			}
  			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
  			{
  				
  			}
  			else
  			{
  				fullYearSnapShotId=new Long("0");
  			}
  			
  		}
      		
  		for(Integer budgetLocation:allBudgetLocations)
  		{
  			for(String categoryType: allCategories)
  			{
  				for(Long agency:allAgencies)
  				{
  			    	
  					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
  					boolean dataExist = false;
  					
  					SpendByReportBean spendByBean = new SpendByReportBean();
  					if(budgetLocation!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
  					{
  						
  						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(coplaSnapShotId,budgetLocation,null,null, categoryType, agency,spendReportFilter);
  						//spendByBean.setBudgetLocation(budgetLocation);
  						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
  						{
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								 dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
  		    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setCoplaTotalCost(null);
  						}
  					}
  					if(budgetLocation!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
  					{

  						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr1SnapShotId,budgetLocation,null,null, categoryType, agency,spendReportFilter);
  						//spendByBean.setBudgetLocation(budgetLocation);
  						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
  						{
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
  		    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setQpr1TotalCost(null);
  						}
  					}
  					if(budgetLocation!=null && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
  					{
  						
  						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr2SnapShotId,budgetLocation,null,null, categoryType, agency,spendReportFilter);
  						//spendByBean.setBudgetLocation(budgetLocation);
  						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
  						{
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
  		    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setQpr2TotalCost(null);
  						}
  					}
  					if(budgetLocation!=null &&  agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
  					{
  						
  						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(qpr3SnapShotId,budgetLocation,null,null, categoryType, agency,spendReportFilter);
  						//spendByBean.setBudgetLocation(budgetLocation);
  						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
  						{
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
  		    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setQpr3TotalCost(null);
  						}
  					}
  					if(budgetLocation!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
  					{
  						
  						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrandCT(fullYearSnapShotId,budgetLocation,null,null, categoryType, agency,spendReportFilter);
  						//spendByBean.setBudgetLocation(budgetLocation);
  						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
  						{
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
  		    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setFullYearTotalCost(null);
  						}
  					}
  					

  					if(budgetLocation!=null && agency!=null)
  					{
  						
  						//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
  						List<ProjectCostDetailsBean> latestCostAgency = null;
  						if(fetchLatestCostProjects)
  						{
  							//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
  							latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBL(budgetYear, agency,spendReportFilter, null, budgetLocation);
  						}
  						else
  						{
  							
  							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
  							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

  			    			if(projectIds!=null && projectIds.size()>0)
  			    			{
  			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
  			    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
  			    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBL(budgetYear, agency,spendReportFilter, projectIds, budgetLocation);
  			    			}
  						}
  						
  						
  						if(latestCostAgency!=null && latestCostAgency.size()>0)
  						{
  							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
  							
  							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
  		    				{
  								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  								dataExist = true;
  		    				}
  		    				else
  		    				{
  		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
  		            			
  		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
  		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
  		    					dataExist = true;
  		    				}
  						}
  						else
  						{
  							spendByBean.setLatestTotalCost(null);
  						}
  						
  					}
  					
  					if(dataExist)
  					{
  						spendByBean.setBudgetLocation(budgetLocation);
  						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
  						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
  						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
  						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
  						
  						spendByBean.setCategoryTypes(categoryType);
						//spendByBean.setCategoryNames(SynchroDAOUtil.getMethodologyNames(categoryType));
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
  						
  						//spendByBean.setMethodologies(methodology);
  						//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
  						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
  						
  						if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
  						{
  							spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
  							if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
  							{
  								spendByBean.setResearchAgecnyType("Kantar");
  							}
  							else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
  							{
  								spendByBean.setResearchAgecnyType("Non-Kantar");
  							}
  							else
  							{
  								spendByBean.setResearchAgecnyType(" ");
  							}
  						}
  						else
  						{
  							spendByBean.setResearchAgecny(" ");
  						}
  						
  						spendByReportBeanList.add(spendByBean);
  					}
  				}
  		
  				
  		}
  				
  			
  		}
  		return spendByReportBeanList;
  	
      
  	}
    
    private List<SpendByReportBean> populateAgencyCrossTabMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
			for(String methodology:allMethodologies)
			{
				
				for(Long agency:allAgencies)
				{
			    	
					SpendByReportBean spendByBean = new SpendByReportBean();
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					if( methodology!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,null,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								 dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(methodology!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{

						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,null,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(methodology!=null && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,null,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(methodology!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,null,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(methodology!=null  && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,null,methodology,null, agency,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
		    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(methodology!=null && agency!=null)
					{
						
						//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
						List<ProjectCostDetailsBean> latestCostAgency = null;
						if(fetchLatestCostProjects)
						{
							//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
							latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostMeth(budgetYear, agency,spendReportFilter, null, methodology);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
			    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostMeth(budgetYear, agency,spendReportFilter, projectIds, methodology);
			    			}
						}
						
						
						if(latestCostAgency!=null && latestCostAgency.size()>0)
						{
							//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			
		    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
		    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
						
					}
					//spendByBean.setBudgetLocation(budgetLocation);
				//	spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
				//	spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
				//	spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
				//	spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
					
					if(dataExist)
					{
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
						{
							spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
							if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
							{
								spendByBean.setResearchAgecnyType("Kantar");
							}
							else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
							{
								spendByBean.setResearchAgecnyType("Non-Kantar");
							}
							else
							{
								spendByBean.setResearchAgecnyType(" ");
							}
						}
						else
						{
							spendByBean.setResearchAgecny(" ");
						}
						
						spendByReportBeanList.add(spendByBean);
					}
				}
			}
				
			
				
			
		
		return spendByReportBeanList;
	
    
    }

 
    private List<SpendByReportBean> populateAgencyCrossTabBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBrands, List<Integer> allNonBrands, List<Long> allAgencies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {

    	
    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
		
				for(Integer brand:allBrands)
				{
					for(Long agency:allAgencies)
					{
				    	
						SpendByReportBean spendByBean = new SpendByReportBean();
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						if(brand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(coplaSnapShotId,null,null,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(brand!=null && agency!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{

							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr1SnapShotId,null,null,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(brand!=null  && agency!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr2SnapShotId,null,null,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(brand!=null && agency!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(qpr3SnapShotId,null,null,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(brand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyBrand(fullYearSnapShotId,null,null,brand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(brand!=null && agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandOnly(budgetYear, agency,spendReportFilter, null, brand);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostBrandOnly(budgetYear, agency,spendReportFilter, projectIds, brand);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						/*spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));*/
						
						if(dataExist)
						{
							spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setBrand(brand);
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					}
				}
				
				for(Integer nonBrand:allNonBrands)
				{

					for(Long agency:allAgencies)
					{
						SpendByReportBean spendByBean = new SpendByReportBean();
						
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						if(nonBrand!=null && agency!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(coplaSnapShotId,null,null,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(nonBrand!=null && agency!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr1SnapShotId,null,null,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(nonBrand!=null && agency!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr2SnapShotId,null,null,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(nonBrand!=null && agency!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(qpr3SnapShotId,null,null,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(nonBrand!=null && agency!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getSpendByCrossTabAgencyNonBrand(fullYearSnapShotId,null,null,nonBrand, agency,spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
			    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(nonBrand!=null && agency!=null)
						{
							
							//List<ProjectCostDetailsBean> latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter);
							List<ProjectCostDetailsBean> latestCostAgency = null;
							if(fetchLatestCostProjects)
							{
								//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, null);
								latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandOnly(budgetYear, agency,spendReportFilter, null, nonBrand);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				//latestCostAgency = projectDAONew.getSpendByAgencyLatestCost(budgetYear, agency,spendReportFilter, projectIds);
				    				latestCostAgency = projectDAONew.getSpendByAgencyCrossTabLatestCostNonBrandOnly(budgetYear, agency,spendReportFilter, projectIds, nonBrand);
				    			}
							}
							
							
							if(latestCostAgency!=null && latestCostAgency.size()>0)
							{
								//spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency));
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									spendByBean.setLatestTotalCost(calculateAgencyTotalCost1(latestCostAgency).setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			
			    					BigDecimal tc = calculateAgencyTotalCost1(latestCostAgency);
			    					spendByBean.setLatestTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
							
						}
						/*spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));*/
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
						
						
						if(dataExist)
						{
							if(nonBrand==1)
							{
								spendByBean.setBrandNonBrandName("Multi-Brand Study");
							}
							else if(nonBrand==2)
							{
								spendByBean.setBrandNonBrandName("Non-brand related");
							}
							
							spendByBean.setBrand(nonBrand);
							
							if(agency!=null && agency.intValue()>0 && SynchroGlobal.getResearchAgency().containsKey(agency.intValue()))
							{
								spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agency.intValue()));
								
								if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==1)
								{
									spendByBean.setResearchAgecnyType("Kantar");
								}
								else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agency.intValue())==2)
								{
									spendByBean.setResearchAgecnyType("Non-Kantar");
								}
								else
								{
									spendByBean.setResearchAgecnyType(" ");
								}
							}
							else
							{
								spendByBean.setResearchAgecny(" ");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					
					}
				
		}
		return spendByReportBeanList;
	
    }
    private List<SpendByReportBean> populateCrossTabAll(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor)
    {

    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				for(Integer brand:allBrands)
				{
				 					    	
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(budgetLocation!=null && methodology!=null && brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(coplaSnapShotId,budgetLocation,methodology,brand, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && brand!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr1SnapShotId,budgetLocation,methodology,brand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && brand!=null  &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr2SnapShotId,budgetLocation,methodology,brand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && brand!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr3SnapShotId,budgetLocation,methodology,brand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && brand!=null  && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(fullYearSnapShotId,budgetLocation,methodology,brand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(budgetLocation!=null && methodology!=null && brand!=null)
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByLatestCostBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, brand, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByLatestCostBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, brand, projectIds);
			    			}
						}
						
						
						
						
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					
					}
					
					if(dataExist)
					{
						spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						spendByBean.setBrand(brand);
						
						spendByReportBeanList.add(spendByBean);
						
					}
				
				}
				
				for(Integer nonBrand:allNonBrands)
				{

					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(budgetLocation!=null && methodology!=null && nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(coplaSnapShotId,budgetLocation,methodology,nonBrand, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr1SnapShotId,budgetLocation,methodology,nonBrand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr2SnapShotId,budgetLocation,methodology,nonBrand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr3SnapShotId,budgetLocation,methodology,nonBrand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(fullYearSnapShotId,budgetLocation,methodology,nonBrand, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(budgetLocation!=null && methodology!=null && nonBrand!=null)
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByLatestCostNonBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, nonBrand, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByLatestCostNonBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, nonBrand, projectIds);
			    			}
						}
						
						
						
						{
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
					}
					
					if(dataExist)
					{
						spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
						
						spendByBean.setBrand(nonBrand);
						// Issue #http://redmine.nvish.com/redmine/issues/475
						if(nonBrand==1)
						{
							spendByBean.setBrandNonBrandName("Multi-Brand Study");
						}
						else if(nonBrand==2)
						{
							spendByBean.setBrandNonBrandName("Non-brand related");
						}
						
						spendByReportBeanList.add(spendByBean);
					}
				
				
				}
				
			}
		}
	return spendByReportBeanList;
	
    }
    
    private List<SpendByReportBean> populateCrossTabAll(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands,  List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor)
    {

    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    		
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				for(String categoryType:allCategories)
				{
					for(Integer brand:allBrands)
					{
					 					    	
						
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(budgetLocation!=null && methodology!=null && brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(coplaSnapShotId,budgetLocation,methodology,brand,categoryType, spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setCoplaTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setCoplaTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && brand!=null && categoryType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr1SnapShotId,budgetLocation,methodology,brand,categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr1TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			            			{
			            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            				dataExist = true;
			            			}
			            			else
			            			{
			            				spendByBean.setQpr1TotalCost(null);
			            			}
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && brand!=null  &&  categoryType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr2SnapShotId,budgetLocation,methodology,brand, categoryType,spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr2TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setQpr2TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && brand!=null &&  categoryType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(qpr3SnapShotId,budgetLocation,methodology,brand, categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
							{
								//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr3TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setQpr3TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && brand!=null  && categoryType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrand(fullYearSnapShotId,budgetLocation,methodology,brand, categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setFullYearTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setFullYearTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(budgetLocation!=null && methodology!=null && brand!=null && categoryType!=null)
						{
							//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
							List<Project> latestCostBudgetLocation = null;
							
							if(fetchLatestCostProjects)
							{
								latestCostBudgetLocation = projectDAONew.getSpendByLatestCostBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, brand, categoryType, null);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				
				    				latestCostBudgetLocation = projectDAONew.getSpendByLatestCostBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, brand, categoryType, projectIds);
				    			}
							}
							
							
							
							
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						
						}
						
						if(dataExist)
						{
							spendByBean.setBudgetLocation(budgetLocation);
							spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
							spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
							
							spendByBean.setBrand(brand);
							
							spendByBean.setCategoryTypes(categoryType);
							//spendByBean.setCategoryNames(SynchroDAOUtil.getMethodologyNames(categoryType));
							spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
							
							spendByReportBeanList.add(spendByBean);
							
						}
					
					}
					
					for(Integer nonBrand:allNonBrands)
					{
	
						//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
						boolean dataExist = false;
						
						SpendByReportBean spendByBean = new SpendByReportBean();
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(coplaSnapShotId,budgetLocation,methodology,nonBrand, categoryType, spendReportFilter);
							//spendByBean.setBudgetLocation(budgetLocation);
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setCoplaTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setCoplaTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr1SnapShotId,budgetLocation,methodology,nonBrand,categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr1TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			            			{
			            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            				dataExist = true;
			            			}
			            			else
			            			{
			            				spendByBean.setQpr1TotalCost(null);
			            			}
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr2SnapShotId,budgetLocation,methodology,nonBrand, categoryType,spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr2TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setQpr2TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(qpr3SnapShotId,budgetLocation,methodology,nonBrand, categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
							{
								//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setQpr3TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setQpr3TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
							//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrand(fullYearSnapShotId,budgetLocation,methodology,nonBrand, categoryType, spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
										dataExist = true;
									}
									else
									{
										spendByBean.setFullYearTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    						dataExist = true;
			    					}
			    					else
			    					{
			    						spendByBean.setFullYearTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
						
						if(budgetLocation!=null && methodology!=null && nonBrand!=null && categoryType!=null )
						{
							//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByBrandLatestCost(budgetYear, brand,spendReportFilter);
							List<Project> latestCostBudgetLocation = null;
							
							if(fetchLatestCostProjects)
							{
								latestCostBudgetLocation = projectDAONew.getSpendByLatestCostNonBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, nonBrand, categoryType, null);
							}
							else
							{
								
								// This has been done as part of http://redmine.nvish.com/redmine/issues/423
								List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
				    			if(projectIds!=null && projectIds.size()>0)
				    			{
				    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
				    				
				    				latestCostBudgetLocation = projectDAONew.getSpendByLatestCostNonBrandAll(budgetYear, budgetLocation, spendReportFilter, methodology, nonBrand, categoryType, projectIds);
				    			}
							}
							
							
							
							{
								if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
								{
									//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
									if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				    				{
				    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
				    					dataExist = true;
				    				}
				    				else
				    				{
				    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
				            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
				            			dataExist = true;
				    				}
								}
								else
								{
									spendByBean.setLatestTotalCost(null);
								}
							}
						}
						
						if(dataExist)
						{
							spendByBean.setBudgetLocation(budgetLocation);
							spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
							spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
							spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
							spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
							
							spendByBean.setMethodologies(methodology);
							spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
							//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
							
							spendByBean.setCategoryTypes(categoryType);
							//spendByBean.setCategoryNames(SynchroDAOUtil.getMethodologyNames(categoryType));
							spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
							
							spendByBean.setBrand(nonBrand);
							// Issue #http://redmine.nvish.com/redmine/issues/475
							if(nonBrand==1)
							{
								spendByBean.setBrandNonBrandName("Multi-Brand Study");
							}
							else if(nonBrand==2)
							{
								spendByBean.setBrandNonBrandName("Non-brand related");
							}
							
							spendByReportBeanList.add(spendByBean);
						}
					
					
					}
					
				}
		}
	}
	return spendByReportBeanList;
	
    }
    private List<SpendByReportBean> populateCrossTabBLMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String methodology:allMethodologies)
			{
				//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
				boolean dataExist = false;
				
				SpendByReportBean spendByBean = new SpendByReportBean();
				if(budgetLocation!=null && methodology!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(coplaSnapShotId,budgetLocation,methodology,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(budgetLocation!=null && methodology!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr1SnapShotId,budgetLocation,methodology, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            				dataExist = true;
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(budgetLocation!=null && methodology!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr2SnapShotId,budgetLocation,methodology,spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(budgetLocation!=null && methodology!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr3SnapShotId,budgetLocation,methodology, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if(budgetLocation!=null && methodology!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(fullYearSnapShotId,budgetLocation,methodology, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				if(budgetLocation!=null && methodology!=null)
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, projectIds);
		    			}
					}
					
					
					
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					dataExist = true;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			dataExist = true;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				
				if(dataExist)
				{
					spendByBean.setBudgetLocation(budgetLocation);
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
					
					spendByBean.setMethodologies(methodology);
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
					//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
					
					spendByReportBeanList.add(spendByBean);
				}
			
			
			
			}
		}
		return spendByReportBeanList;
	
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, SpendByReportBean> sortedSpendByBudgetLocationKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByMethodologyKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String bLKey: sortedSpendByBudgetLocationKey.keySet())
    	{
			SpendByReportBean bLBean = sortedSpendByBudgetLocationKey.get(bLKey);
			for(String methKey: sortedSpendByMethodologyKey.keySet())
	    	{
				SpendByReportBean methBean = sortedSpendByMethodologyKey.get(methKey);
		    	SpendByReportBean spendByBean = new SpendByReportBean();
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies() ,spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(),bLBean.getT20_40(), methBean.getMethodologies(), spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr1TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
		    	
		    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null )
				{
					
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(new Integer(budgetYearsArr[i]), bLBean.getMethodologies(), bLBean.getMethGroup(), spendReportFilter, null);
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, null);
					
					List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), spendReportFilter, null);
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            		
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
		    	
		    	spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
				spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
				spendByBean.setArea(bLBean.getArea());
				spendByBean.setRegion(bLBean.getRegion());
				spendByBean.setT20_40(bLBean.getT20_40());
				spendByBean.setBudgetYear(budgetYear);
				
				spendByBean.setMethodologies(methBean.getMethodologies());
				spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methBean.getMethodologies()));
				
				spendByBean.setMethGroup(methBean.getMethGroup());
				
				String crossTabKey = bLKey + "~" + methKey;
				if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
				{
					
	    			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
					spendReportBeanList.add(spendByBean);
				}
				else
				{
					List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
					
					// This is done for adding the blank Spend By Report Beans for previous budget years 
					if(i>0)
					{
						for(int j=0;j<i;j++)
						{
							SpendByReportBean blankSpendByBean = new SpendByReportBean();
							spendReportBeanList.add(blankSpendByBean);
						}
					}
					spendReportBeanList.add(spendByBean);
					finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
				}
	    	}
    	}
    	
    	return finalSpendByCrossTabMap;
		
	
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, SpendByReportBean> sortedSpendByBudgetLocationKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByMethodologyKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByBrandKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByNonBrandKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String bLKey: sortedSpendByBudgetLocationKey.keySet())
    	{
			SpendByReportBean bLBean = sortedSpendByBudgetLocationKey.get(bLKey);
			for(String methKey: sortedSpendByMethodologyKey.keySet())
	    	{
				SpendByReportBean methBean = sortedSpendByMethodologyKey.get(methKey);
				for(String brandKey: sortedSpendByBrandKey.keySet())
		        {
					
					SpendByReportBean brandBean = sortedSpendByBrandKey.get(brandKey);
					SpendByReportBean spendByBean = new SpendByReportBean();
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrand(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrand(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr1TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrand(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrand(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrand(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null)
					{
						
						List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyBrandLatestCost(budgetYear, bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), spendReportFilter, null);
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            		
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
			    	
			    	spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
					spendByBean.setArea(bLBean.getArea());
					spendByBean.setRegion(bLBean.getRegion());
					spendByBean.setT20_40(bLBean.getT20_40());
					spendByBean.setBudgetYear(budgetYear);
					
					spendByBean.setMethodologies(methBean.getMethodologies());
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methBean.getMethodologies()));
					
					spendByBean.setMethGroup(methBean.getMethGroup());
					
					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brandBean.getBrand()));
					spendByBean.setBrand(brandBean.getBrand());
					
					String crossTabKey = bLKey + "~" + methKey + "~" + spendByBean.getBrandNonBrandName()+"~"+brandBean.getBrandType();;
					
					if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
					}
		    	}
				
				for(String nonBrandKey: sortedSpendByNonBrandKey.keySet())
	        	{

					
					SpendByReportBean nonBrandBean = sortedSpendByNonBrandKey.get(nonBrandKey);
					SpendByReportBean spendByBean = new SpendByReportBean();
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrand(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrand(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr1TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrand(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrand(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
			    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrand(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
			    	
			    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null)
					{
						
						List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyNonBrandLatestCost(budgetYear, bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), spendReportFilter, null);
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            		
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
			    	
			    	spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
					spendByBean.setArea(bLBean.getArea());
					spendByBean.setRegion(bLBean.getRegion());
					spendByBean.setT20_40(bLBean.getT20_40());
					spendByBean.setBudgetYear(budgetYear);
					
					spendByBean.setMethodologies(methBean.getMethodologies());
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methBean.getMethodologies()));
					
					spendByBean.setMethGroup(methBean.getMethGroup());
					
					
					
					spendByBean.setBrand(nonBrandBean.getStudyType());
					
					if(nonBrandBean.getStudyType()!=null && nonBrandBean.getStudyType()==1)
					{
						spendByBean.setBrandNonBrandName("Multi-Brand Study");
					}
					else if(nonBrandBean.getStudyType()!=null && nonBrandBean.getStudyType()==2)
					{
						spendByBean.setBrandNonBrandName("Non-brand related");
					}
					
					
					String crossTabKey = bLKey + "~" + methKey + "~" + spendByBean.getBrandNonBrandName()+"~"+nonBrandBean.getBrandType();
					
					if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
					}
		    	
	        	}
	    	}
    	}
    	
    	return finalSpendByCrossTabMap;
	
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, SpendByReportBean> sortedSpendByBudgetLocationKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByMethodologyKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByBrandKey, LinkedHashMap<String, SpendByReportBean> sortedSpendByNonBrandKey, LinkedHashMap<String, SpendByReportBean> spendByCategoryKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String bLKey: sortedSpendByBudgetLocationKey.keySet())
    	{
			SpendByReportBean bLBean = sortedSpendByBudgetLocationKey.get(bLKey);
			for(String methKey: sortedSpendByMethodologyKey.keySet())
	    	{
				SpendByReportBean methBean = sortedSpendByMethodologyKey.get(methKey);
				for(String categoryKey: spendByCategoryKey.keySet())
				{
					SpendByReportBean categoryBean = spendByCategoryKey.get(categoryKey);
					for(String brandKey: sortedSpendByBrandKey.keySet())
			        {
						
						SpendByReportBean brandBean = sortedSpendByBrandKey.get(brandKey);
						SpendByReportBean spendByBean = new SpendByReportBean();
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrandCT(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setCoplaTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setCoplaTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrandCT(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr1TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr1TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrandCT(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr2TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr2TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrandCT(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr3TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr3TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethBrandCT(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setFullYearTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setFullYearTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && brandBean.getBrand()!=null && categoryBean.getCategoryTypes()!=null)
						{
							
							List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyBrandCTLatestCost(budgetYear, bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), brandBean.getBrand(), brandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter, null);
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            		
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
				    	
				    	spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
						spendByBean.setArea(bLBean.getArea());
						spendByBean.setRegion(bLBean.getRegion());
						spendByBean.setT20_40(bLBean.getT20_40());
						spendByBean.setBudgetYear(budgetYear);
						
						spendByBean.setMethodologies(methBean.getMethodologies());
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methBean.getMethodologies()));
						
						spendByBean.setMethGroup(methBean.getMethGroup());
						
						spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brandBean.getBrand()));
						spendByBean.setBrand(brandBean.getBrand());
						
						spendByBean.setCategoryTypes(categoryBean.getCategoryTypes());
		 				spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
						
						String crossTabKey = bLKey + "~" + methKey + "~" + spendByBean.getBrandNonBrandName()+"~"+brandBean.getBrandType() + "~" + categoryKey;
						
						if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
						{
							
			    			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
							spendReportBeanList.add(spendByBean);
						}
						else
						{
							List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
							
							// This is done for adding the blank Spend By Report Beans for previous budget years 
							if(i>0)
							{
								for(int j=0;j<i;j++)
								{
									SpendByReportBean blankSpendByBean = new SpendByReportBean();
									spendReportBeanList.add(blankSpendByBean);
								}
							}
							spendReportBeanList.add(spendByBean);
							finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
						}
			    	}
					
					for(String nonBrandKey: sortedSpendByNonBrandKey.keySet())
		        	{
	
						
						SpendByReportBean nonBrandBean = sortedSpendByNonBrandKey.get(nonBrandKey);
						SpendByReportBean spendByBean = new SpendByReportBean();
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
						{
							
							List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrandCT(coplaSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setCoplaTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setCoplaTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrandCT(qpr1SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr1TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr1TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrandCT(qpr2SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr2TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr2TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrandCT(qpr3SnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setQpr3TotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setQpr3TotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
						{
							
				    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethNonBrandCT(fullYearSnapShotId,bLBean.getBudgetLocation(),bLBean.getRegion(),bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter);
							
							if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
							{
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
									if(projectSnapShot.get(0).getTotalCost()!=null)
									{
										spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									}
									else
									{
										spendByBean.setFullYearTotalCost(null);
									}
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			    					if(projectSnapShot.get(0).getTotalCost()!=null)
			    					{
			    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					}
			    					else
			    					{
			    						spendByBean.setFullYearTotalCost(null);
			    					}
			    				}
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
						}
				    	
				    	if(bLBean.getBudgetLocation()!=null && methBean.getMethodologies()!=null && nonBrandBean.getStudyType()!=null && categoryBean.getCategoryTypes()!=null)
						{
							
							List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyNonBrandCTLatestCost(budgetYear, bLBean.getBudgetLocation(), bLBean.getRegion(), bLBean.getArea(), bLBean.getT20_40(), methBean.getMethodologies(), nonBrandBean.getStudyType(), nonBrandBean.getBrandType(), categoryBean.getCategoryTypes(), spendReportFilter, null);
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            		
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
				    	
				    	spendByBean.setBudgetLocation(bLBean.getBudgetLocation());
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(bLBean.getBudgetLocation()));
						spendByBean.setArea(bLBean.getArea());
						spendByBean.setRegion(bLBean.getRegion());
						spendByBean.setT20_40(bLBean.getT20_40());
						spendByBean.setBudgetYear(budgetYear);
						
						spendByBean.setMethodologies(methBean.getMethodologies());
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methBean.getMethodologies()));
						
						spendByBean.setMethGroup(methBean.getMethGroup());
						
						
						
						spendByBean.setBrand(nonBrandBean.getStudyType());
						
						if(nonBrandBean.getStudyType()!=null && nonBrandBean.getStudyType()==1)
						{
							spendByBean.setBrandNonBrandName("Multi-Brand Study");
						}
						else if(nonBrandBean.getStudyType()!=null && nonBrandBean.getStudyType()==2)
						{
							spendByBean.setBrandNonBrandName("Non-brand related");
						}
						
						spendByBean.setCategoryTypes(categoryBean.getCategoryTypes());
		 				spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
						
						String crossTabKey = bLKey + "~" + methKey + "~" + spendByBean.getBrandNonBrandName()+"~"+nonBrandBean.getBrandType() + "~" + categoryKey;
						
						if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
						{
							
			    			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
							spendReportBeanList.add(spendByBean);
						}
						else
						{
							List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
							
							// This is done for adding the blank Spend By Report Beans for previous budget years 
							if(i>0)
							{
								for(int j=0;j<i;j++)
								{
									SpendByReportBean blankSpendByBean = new SpendByReportBean();
									spendReportBeanList.add(blankSpendByBean);
								}
							}
							spendReportBeanList.add(spendByBean);
							finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
						}
			    	
		        	}
				}
	    	}
    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
			
			if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
			
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
		if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
		{
			
			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
			spendReportBeanList.add(spendByBean);
		}
		else
		{
			List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
			
			// This is done for adding the blank Spend By Report Beans for previous budget years 
			if(i>0)
			{
				for(int j=0;j<i;j++)
				{
					SpendByReportBean blankSpendByBean = new SpendByReportBean();
					spendReportBeanList.add(blankSpendByBean);
				}
			}
			spendReportBeanList.add(spendByBean);
			finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
		}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}
    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	   
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, null, projectBean.getCategories(), budgetYear, spendReportFilter);
	    		
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}
    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);
    		
    		LOG.debug("SORTED PROJECT KEY ==>"+ projectKey);
    		System.out.println("SORTED PROJECT KEY ==>"+ projectKey);
    		LOG.info("SORTED PROJECT KEY ==>"+ projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
	    		
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null  && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	   
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, null, null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}
    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}
    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
		if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
		{
			
			List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
			spendReportBeanList.add(spendByBean);
		}
		else
		{
			List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
			
			// This is done for adding the blank Spend By Report Beans for previous budget years 
			if(i>0)
			{
				for(int j=0;j<i;j++)
				{
					SpendByReportBean blankSpendByBean = new SpendByReportBean();
					spendReportBeanList.add(blankSpendByBean);
				}
			}
			spendReportBeanList.add(spendByBean);
			finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
		}


    	}
    	
    	return finalSpendByCrossTabMap;
    
    }

    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(),  null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(),  null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(),  null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(),null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(),null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(),null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(),null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(),null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(),projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBL(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null  && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null  && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 )
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
	    		
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null)
			{
				
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getCategories()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMeth(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(),null, projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1  && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null &&  projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 )
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 )
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1  && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1  && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(),null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories());
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null &&  projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, qpr2SnapShotId, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandSnapshotList(spendByBean, null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories());
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsBrand(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null)
			{
	    		
	    		Project latestCostBudgetLocation = projectDAONew.getProjectsNonBrand(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getTotalCost()!=null)
				{
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[11]);
				agencyType = projectKey.split("~")[12];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			if(StringUtils.isNotBlank(agencyType))
			{
				spendByBean.setResearchAgecnyType(agencyType);
			}
			else
			{
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType="";
			try
			{
				agencyId = new Long(projectKey.split("~")[10]);
				agencyType = projectKey.split("~")[11];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(coplaSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId,agencyType);
	    		
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(coplaSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(),null, agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId,agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr1SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(),null, agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
				
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr1SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr2SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
				
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
				//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr2SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null ,agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr3SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null ,agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
				
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
				//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr3SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(fullYearSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
				//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(fullYearSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null ,agencyId);                                                      
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    		
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			if(StringUtils.isNotBlank(agencyType))
			{
				spendByBean.setResearchAgecnyType(agencyType);
			}
			else
			{
				spendByBean.setResearchAgecnyType("");
			}
			
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType="";
			try
			{
				agencyId = new Long(projectKey.split("~")[9]);
				agencyType=projectKey.split("~")[10];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(coplaSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    		
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), null, projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = null;
			try
			{
				agencyId = new Long(projectKey.split("~")[9]);
				agencyType = projectKey.split("~")[10];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(coplaSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId);
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    		
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(coplaSnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
				                                                      
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
	    		//List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr1SnapShotId,projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId);
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
				
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
						
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				} */
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = null;
			try
			{
				//agencyId = new Long(projectKey.split("~")[8]);
				//agencyType = projectKey.split("~")[9];
				agencyId = new Long(projectKey.split("~")[7]);
				agencyType = projectKey.split("~")[8];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLMethAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType="";
			try
			{
				agencyId = new Long(projectKey.split("~")[8]);
				agencyType = projectKey.split("~")[9];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[8]);
				agencyType = projectKey.split("~")[9];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(),null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null  && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType,  budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				} */
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = null;
			try
			{
				agencyId = new Long(projectKey.split("~")[7]);
				agencyType = projectKey.split("~")[8];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				} */
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				//agencyId = new Long(projectKey.split("~")[7]);
				//agencyType = projectKey.split("~")[8];
				agencyId = new Long(projectKey.split("~")[6]);
				agencyType = projectKey.split("~")[7];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null  && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null  && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null  && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null  && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null  && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 &&  agencyId!=null && agencyType!=null  && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				//agencyId = new Long(projectKey.split("~")[6]);
				//agencyType = projectKey.split("~")[7];
				agencyId = new Long(projectKey.split("~")[5]);
				agencyType = projectKey.split("~")[6];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectMethAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType="";
			
			try
			{
				//agencyId = new Long(projectKey.split("~")[5]);
				//agencyType = projectKey.split("~")[6];
				agencyId = new Long(projectKey.split("~")[4]);
				agencyType = projectKey.split("~")[5];
				
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && agencyId!=null  && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && agencyId!=null  && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && agencyId!=null  && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && agencyId!=null  && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null,null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				//agencyId = new Long(projectKey.split("~")[6]);
				//agencyType = projectKey.split("~")[7];
				agencyId = new Long(projectKey.split("~")[5]);
				agencyType = projectKey.split("~")[6];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null  && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), null, null, null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBLAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[6]);
				agencyType = projectKey.split("~")[7];
			}
			catch(Exception e)
			{
				continue;
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				//agencyId = new Long(projectKey.split("~")[5]);
				//agencyType = projectKey.split("~")[6];
				agencyId = new Long(projectKey.split("~")[4]);
				agencyType = projectKey.split("~")[5];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(projectBean.getProjectID() , projectBean.getName(), null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				//agencyId = new Long(projectKey.split("~")[4]);
				//agencyType = projectKey.split("~")[5];
				agencyId = new Long(projectKey.split("~")[3]);
				agencyType = projectKey.split("~")[4];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && agencyId!=null  && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    		    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabProjectAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				//agencyId = new Long(projectKey.split("~")[3]);
				//agencyType = projectKey.split("~")[4];
				agencyId = new Long(projectKey.split("~")[2]);
				agencyType = projectKey.split("~")[3];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && agencyId!=null && agencyType!=null  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getProjectID()!=null && projectBean.getName()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(projectBean.getProjectID() , projectBean.getName(), null, null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    		    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[9]);
				agencyType = projectKey.split("~")[10];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					/*
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[8]);
				agencyType = projectKey.split("~")[9];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(),null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId,agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType="";
			try
			{
				agencyId = new Long(projectKey.split("~")[7]);
				agencyType = projectKey.split("~")[8];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId,agencyType);
	    	}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyName = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[7]);
				agencyName = projectKey.split("~")[8];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyName!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyName);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyName, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyName!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyName, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				} */
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyName);
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLMethAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[6]);
				agencyType = projectKey.split("~")[7];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getMethodologies()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}
				*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[6]);
				agencyType = projectKey.split("~")[7];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null &&  projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBudgetLocation()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(),null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*
				spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[5]);
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}
				*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBLAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[4]);
				agencyType = projectKey.split("~")[5];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null &&  agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBudgetLocation()!=null &&  agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, projectBean.getBudgetLocation(),projectBean.getRegion(),projectBean.getArea(), projectBean.getT20_40(), null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[5]);
				agencyType = projectKey.split("~")[6];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null  && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1  && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[4]);
				agencyType = projectKey.split("~")[5];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null  && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getMethodologies()!=null && projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*
				spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			spendByBean.setResearchAgecnyType(agencyType);
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[3]);
				agencyType = projectKey.split("~")[4];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getMethodologies()!=null &&  projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId,agencyType);
	    	}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId,agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabMethAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = null;
			
			try
			{
				agencyId = new Long(projectKey.split("~")[2]);
				agencyType = projectKey.split("~")[3];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getMethodologies()!=null &&  agencyId!=null &&  agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getMethodologies()!=null &&  agencyId!=null &&  agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null && agencyId!=null &&  agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getMethodologies()!=null  && agencyId!=null &&  agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null  &&  agencyId!=null &&  agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getMethodologies()!=null  && agencyId!=null && agencyType!=null )
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, projectBean.getMethodologies(), projectBean.getMethGroup(), null, projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBrandCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[3]);
				agencyType = projectKey.split("~")[4];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabBrandAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[2]);
				agencyType = projectKey.split("~")[3];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null  && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1  && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	// This is for Non Brand
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostNonBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(projectBean.getBrand()!=null && projectBean.getBrand().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrand().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}
					*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	else if(projectBean.getBrandSpecificStudyType()!=null && projectBean.getBrandSpecificStudyType().intValue()!=-1 && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsNonBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), projectBean.getBrandSpecificStudyType().intValue(), projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null && latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
				/*	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					*/
					
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
		//	spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
		//	spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabCTAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			try
			{
				agencyId = new Long(projectKey.split("~")[1]);
				agencyType = projectKey.split("~")[2];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
	    	}
	    	
	    	if(projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getCategories()!=null && agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    	
	    	if(projectBean.getCategories()!=null &&  agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(),agencyId, agencyType);
			}
	    		    	
	    	if(projectBean.getCategories()!=null && agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), projectBean.getCategories(), agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
			/*	spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				} */
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    
    private LinkedHashMap<String,List<SpendByReportBean>>  populateCrossTabAgency(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, LinkedHashMap<String, Project> sortedSpendByProjectKey, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, int i, LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCrossTabMap )
    {

    	for(String projectKey: sortedSpendByProjectKey.keySet())
    	{
    		Project projectBean = sortedSpendByProjectKey.get(projectKey);

			SpendByReportBean spendByBean = new SpendByReportBean();
			
			Long agencyId = null;
			String agencyType = "";
			
			try
			{
				agencyId = new Long(projectKey.split("~")[1]);
				agencyType = projectKey.split("~")[2];
			}
			catch(Exception e)
			{
				
			}
	    	
	    	if(agencyId!=null && agencyType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  coplaSnapShotId, null, null, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
	    	}
	    	
	    	if(agencyId!=null && agencyType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, qpr1SnapShotId, null, null, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(agencyId!=null && agencyType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, qpr2SnapShotId, null, null, currencyId, null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(agencyId!=null && agencyType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, qpr3SnapShotId, null, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    	
	    	if(agencyId!=null && agencyType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
	    		spendByBean = getProjectCostBrandAgencySnapshotList(spendByBean,  null, null, null, null, fullYearSnapShotId, currencyId,  null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null,agencyId, agencyType);
			}
	    		    	
	    	if(agencyId!=null && agencyType!=null)
			{
				
	    		ProjectCostDetailsBean latestCostBudgetLocation = projectDAONew.getProjectsBrandAgency(null , null, null,null,null, null, null, projectBean.getMethGroup(), null, projectBean.getBrandType(), null, agencyId, agencyType, budgetYear, spendReportFilter);
				if(latestCostBudgetLocation!=null &&  latestCostBudgetLocation.getEstimatedCost()!=null)
				{
					
					/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
					{
						spendByBean.setLatestTotalCost(latestCostBudgetLocation.getEstimatedCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	        			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	        		
					}*/
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    				    					
    					BigDecimal agencyCost = latestCostBudgetLocation.getEstimatedCost();
    		    		if(latestCostBudgetLocation.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    		    		{
    		    			spendByBean.setLatestTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    		    		else
    		    		{
    		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(latestCostBudgetLocation.getCostCurrency())) * (latestCostBudgetLocation.getEstimatedCost().doubleValue()));
    		    			spendByBean.setLatestTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
    		    		}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
            			if(latestCostBudgetLocation.getEstimatedCost()!=null)
            			{
            				spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
            			}
            			else
            			{
            				spendByBean.setLatestTotalCost(null);
            			}
    				}
				}
				else
				{
					spendByBean.setLatestTotalCost(null);
				}
			}
	    	
	    	spendByBean.setBudgetLocation(projectBean.getBudgetLocation());
			spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(projectBean.getBudgetLocation()));
			spendByBean.setArea(projectBean.getArea());
			spendByBean.setRegion(projectBean.getRegion());
			spendByBean.setT20_40(projectBean.getT20_40());
			spendByBean.setBudgetYear(budgetYear);
			
			spendByBean.setMethodologies(projectBean.getMethodologies());
			spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(projectBean.getMethodologies()));
			
			spendByBean.setMethGroup(projectBean.getMethGroup());
			
			//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
			//spendByBean.setBrand(projectBean.getBrand().intValue());
			if(projectBean.getBrand()!=null)
			{
				spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(projectBean.getBrand().intValue()));
				spendByBean.setBrand(projectBean.getBrand().intValue());
			}
			
			spendByBean.setCategoryTypes(projectBean.getCategories());
			if(agencyId!=null)
			{
				spendByBean.setResearchAgecny(SynchroGlobal.getResearchAgency().get(agencyId.intValue()));
				/*spendByBean.setResearchAgecnyType("");
				if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==1)
				{
					spendByBean.setResearchAgecnyType("Kantar");
				}
				else if(SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())!=null && SynchroGlobal.getResearchAgencyGroupFromAgency(agencyId.intValue())==2)
				{
					spendByBean.setResearchAgecnyType("Non-Kantar");
				}
				else
				{
					spendByBean.setResearchAgecnyType(" ");
				}*/
			}
			else
			{
				spendByBean.setResearchAgecny("");
				spendByBean.setResearchAgecnyType("");
			}
			
			spendByBean.setResearchAgecnyType(agencyType);
			
			//spendByBean.setCategoryTypesNames(categoryBean.getCategoryTypesNames());
			
			String crossTabKey = projectKey;
		
			if(finalSpendByCrossTabMap!=null && finalSpendByCrossTabMap.containsKey(crossTabKey))
			{
				
				List<SpendByReportBean> spendReportBeanList = finalSpendByCrossTabMap.get(crossTabKey);
				spendReportBeanList.add(spendByBean);
			}
			else
			{
				List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
				
				// This is done for adding the blank Spend By Report Beans for previous budget years 
				if(i>0)
				{
					for(int j=0;j<i;j++)
					{
						SpendByReportBean blankSpendByBean = new SpendByReportBean();
						spendReportBeanList.add(blankSpendByBean);
					}
				}
				spendReportBeanList.add(spendByBean);
				finalSpendByCrossTabMap.put(crossTabKey, spendReportBeanList);
			}

    	}
    	
    	return finalSpendByCrossTabMap;
    
    }
    private List<SpendByReportBean> populateCrossTabBLCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String categoryType:allCategories)
			{
				//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
				boolean dataExist = false;
				
				SpendByReportBean spendByBean = new SpendByReportBean();
				if(budgetLocation!=null && categoryType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLCT(coplaSnapShotId,budgetLocation,categoryType,spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(budgetLocation!=null && categoryType!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLCT(qpr1SnapShotId,budgetLocation,categoryType, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            				dataExist = true;
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(budgetLocation!=null && categoryType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLCT(qpr2SnapShotId,budgetLocation,categoryType,spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(budgetLocation!=null && categoryType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLCT(qpr3SnapShotId,budgetLocation,categoryType, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if(budgetLocation!=null && categoryType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLCT(fullYearSnapShotId,budgetLocation,categoryType, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				if(budgetLocation!=null && categoryType!=null)
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						//latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				
		    				//latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, projectIds);
		    			}
					}
					
					
					
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					dataExist = true;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			dataExist = true;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
				
				if(dataExist)
				{
					spendByBean.setBudgetLocation(budgetLocation);
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
					
					spendByBean.setCategoryTypes(categoryType);
					spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
					
					
					spendByReportBeanList.add(spendByBean);
				}
			
			
			
			}
		}
		return spendByReportBeanList;
	
    
    }
    
    
    
    private List<SpendByReportBean> populateCrossTabBLMethCategoryType(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBudgetLocations, List<String> allMethodologies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		for(Integer budgetLocation:allBudgetLocations)
		{
			for(String categoryType:allCategories)
				{
				for(String methodology:allMethodologies)
				{
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(budgetLocation!=null && methodology!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMethCT(coplaSnapShotId,budgetLocation,methodology,categoryType,spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr1SnapShotId,budgetLocation,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr2SnapShotId,budgetLocation,methodology,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(qpr3SnapShotId,budgetLocation,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(budgetLocation!=null && methodology!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(fullYearSnapShotId,budgetLocation,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(budgetLocation!=null && methodology!=null)
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, budgetLocation, methodology,spendReportFilter, projectIds);
			    			}
						}
						
						
						
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
					
					if(dataExist)
					{
						spendByBean.setBudgetLocation(budgetLocation);
						spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					}
				
				}
				
				}
		}
		return spendByReportBeanList;
	
    
    }
    
    
    private List<SpendByReportBean> populateCrossTabMethCategoryType(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		
			for(String categoryType:allCategories)
			{
				for(String methodology:allMethodologies)
				{
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(categoryType!=null && methodology!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethCT(coplaSnapShotId, categoryType, methodology, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(categoryType!=null && methodology!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethCT(qpr1SnapShotId,categoryType,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(categoryType!=null && methodology!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethCT(qpr2SnapShotId,categoryType,methodology,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(categoryType!=null && methodology!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethCT(qpr3SnapShotId,categoryType,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(categoryType!=null && methodology!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						List<QPRProjectSnapshot> projectSnapShot =  null;
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBLMeth(fullYearSnapShotId,categoryType,methodology, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(categoryType!=null && methodology!=null)
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							//latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, categoryType, methodology,spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				
			    				//latestCostBudgetLocation = projectDAONew.getSpendByCrossTabBLMethodologyLatestCost(budgetYear, categoryType, methodology,spendReportFilter, projectIds);
			    			}
						}
						
						
						
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
					
					if(dataExist)
					{
						//spendByBean.setBudgetLocation(budgetLocation);
						//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
						//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
						//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
						//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
						
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					}
				
				}
				
				
		}
		return spendByReportBeanList;
	
    
    }
    private List<SpendByReportBean> populateCrossTabMethBrand(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		for(String methodology:allMethodologies)
		{
			for(Integer brand:allBrands)
			{
			 	
				//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
				boolean dataExist = false;
				
				SpendByReportBean spendByBean = new SpendByReportBean();
				if(methodology!=null && brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrand(coplaSnapShotId,methodology,brand, spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(methodology!=null && brand!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrand(qpr1SnapShotId,methodology,brand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            				dataExist = true;
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(methodology!=null && brand!=null  &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrand(qpr2SnapShotId,methodology,brand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(methodology!=null && brand!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrand(qpr3SnapShotId,methodology,brand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if(methodology!=null && brand!=null  && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrand(fullYearSnapShotId,methodology,brand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				if(methodology!=null && brand!=null )
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, methodology, brand, spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, methodology, brand, spendReportFilter, projectIds);
		    			}
					}
					
					
					
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					dataExist = true;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			dataExist = true;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				
				}
				/*spendByBean.setBudgetLocation(budgetLocation);
				spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
				spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
				spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
				spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));*/
				
				if(dataExist)
				{
					spendByBean.setMethodologies(methodology);
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
					spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
					
					spendByBean.setBrand(brand);
					
					spendByReportBeanList.add(spendByBean);
				}
			
			}
			
			for(Integer nonBrand:allNonBrands)
			{

			
				SpendByReportBean spendByBean = new SpendByReportBean();
				//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
				boolean dataExist = false;
				
				if(methodology!=null && nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrand(coplaSnapShotId,methodology,nonBrand, spendReportFilter);
					//spendByBean.setBudgetLocation(budgetLocation);
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setCoplaTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setCoplaTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				if(methodology!=null && nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
				{
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrand(qpr1SnapShotId,methodology,nonBrand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr1TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	            			{
	            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            				dataExist = true;
	            			}
	            			else
	            			{
	            				spendByBean.setQpr1TotalCost(null);
	            			}
	    				}
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				if(methodology!=null && nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrand(qpr2SnapShotId,methodology,nonBrand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr2TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr2TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				if(methodology!=null && nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrand(qpr3SnapShotId,methodology,nonBrand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
					{
						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setQpr3TotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setQpr3TotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				if( methodology!=null && nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
				{
					
					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrand(fullYearSnapShotId,methodology,nonBrand, spendReportFilter);
					
					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
					{
						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
							if(projectSnapShot.get(0).getTotalCost()!=null)
							{
								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
								dataExist = true;
							}
							else
							{
								spendByBean.setFullYearTotalCost(null);
							}
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	    					if(projectSnapShot.get(0).getTotalCost()!=null)
	    					{
	    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    						dataExist = true;
	    					}
	    					else
	    					{
	    						spendByBean.setFullYearTotalCost(null);
	    					}
	    				}
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				
				if(methodology!=null && nonBrand!=null )
				{
					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
					List<Project> latestCostBudgetLocation = null;
					if(fetchLatestCostProjects)
					{
						latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, methodology, nonBrand, spendReportFilter, null);
					}
					else
					{
						
						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

		    			if(projectIds!=null && projectIds.size()>0)
		    			{
		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
		    				
		    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, methodology, nonBrand, spendReportFilter, projectIds);
		    			}
					}
					
					
					{
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					}
				}
				//spendByBean.setBudgetLocation(budgetLocation);
				//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
				//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
				//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
				//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
				
				if(dataExist)
				{
					spendByBean.setMethodologies(methodology);
					spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
					//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
					
					spendByBean.setBrand(nonBrand);
					
					if(nonBrand==1)
					{
						spendByBean.setBrandNonBrandName("Multi-Brand Study");
					}
					else if(nonBrand==2)
					{
						spendByBean.setBrandNonBrandName("Non-brand related");
					}
					
					spendByReportBeanList.add(spendByBean);
				
				}
				
				
			}
		}
	return spendByReportBeanList;
	
    
    }
    
    
    private List<SpendByReportBean> populateCrossTabMethBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<String> allMethodologies, List<Integer> allBrands, List<Integer> allNonBrands, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		for(String methodology:allMethodologies)
		{
			for(String categoryType:allCategories)
			{
				for(Integer brand:allBrands)
				{
				 	
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(methodology!=null && brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrandCT(coplaSnapShotId,methodology,brand,categoryType, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(methodology!=null && brand!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrandCT(qpr1SnapShotId,methodology,brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(methodology!=null && brand!=null  &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrandCT(qpr2SnapShotId,methodology,brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(methodology!=null && brand!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrandCT(qpr3SnapShotId,methodology,brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(methodology!=null && brand!=null  && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethBrandCT(fullYearSnapShotId,methodology,brand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(methodology!=null && brand!=null )
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, methodology, brand, spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, methodology, brand, spendReportFilter, projectIds);
			    			}
						}
						
						
						
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					
					}
					/*spendByBean.setBudgetLocation(budgetLocation);
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));*/
					
					if(dataExist)
					{
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						spendByBean.setBrand(brand);
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					}
				
				}
				
				for(Integer nonBrand:allNonBrands)
				{
	
				
					SpendByReportBean spendByBean = new SpendByReportBean();
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					if(methodology!=null && nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrandCT(coplaSnapShotId,methodology,nonBrand, categoryType, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(methodology!=null && nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrandCT(qpr1SnapShotId,methodology,nonBrand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(methodology!=null && nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrandCT(qpr2SnapShotId,methodology,nonBrand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(methodology!=null && nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrandCT(qpr3SnapShotId,methodology,nonBrand, categoryType,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if( methodology!=null && nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabMethNonBrandCT(fullYearSnapShotId,methodology,nonBrand, categoryType,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(methodology!=null && nonBrand!=null )
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, methodology, nonBrand, spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, methodology, nonBrand, spendReportFilter, projectIds);
			    			}
						}
						
						
						{
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
					}
					//spendByBean.setBudgetLocation(budgetLocation);
					//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
					
					if(dataExist)
					{
						spendByBean.setMethodologies(methodology);
						spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
						
						spendByBean.setBrand(nonBrand);
						
						if(nonBrand==1)
						{
							spendByBean.setBrandNonBrandName("Multi-Brand Study");
						}
						else if(nonBrand==2)
						{
							spendByBean.setBrandNonBrandName("Non-brand related");
						}
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					
					}
					
					
				}
			}
    }
	return spendByReportBeanList;
	
    
    }
    
    
    private List<SpendByReportBean> populateCrossTabBrandCT(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, List<Integer> allBrands, List<Integer> allNonBrands, List<String> allCategories, boolean fetchLatestCostProjects, boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor )
    {


    	List<SpendByReportBean> spendByReportBeanList = new ArrayList<SpendByReportBean>(); 
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
			}
			
		}
    	
		
			for(String categoryType:allCategories)
			{
				for(Integer brand:allBrands)
				{
				 	
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					SpendByReportBean spendByBean = new SpendByReportBean();
					if(brand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrandCT(coplaSnapShotId,brand,categoryType, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(brand!=null &&  qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrandCT(qpr1SnapShotId, brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(brand!=null  &&  qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrandCT(qpr2SnapShotId, brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(brand!=null &&  qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrandCT(qpr3SnapShotId, brand, categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if(brand!=null  && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabBrandCT(fullYearSnapShotId, brand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(brand!=null )
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, null, brand, spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyBrandLatestCost(budgetYear, null, brand, spendReportFilter, projectIds);
			    			}
						}
						
						
						
						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
						{
							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    					dataExist = true;
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            			dataExist = true;
		    				}
						}
						else
						{
							spendByBean.setLatestTotalCost(null);
						}
					
					}
					/*spendByBean.setBudgetLocation(budgetLocation);
					spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));*/
					
					if(dataExist)
					{
						//spendByBean.setMethodologies(methodology);
						//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(brand));
						
						spendByBean.setBrand(brand);
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					}
				
				}
				
				for(Integer nonBrand:allNonBrands)
				{
	
				
					SpendByReportBean spendByBean = new SpendByReportBean();
					//This variable whether data exist for a particular row or not as per http://redmine.nvish.com/redmine/issues/475
					boolean dataExist = false;
					
					if(nonBrand!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(coplaSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrandCT(coplaSnapShotId, nonBrand, categoryType, spendReportFilter);
						//spendByBean.setBudgetLocation(budgetLocation);
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setCoplaTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setCoplaTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setCoplaTotalCost(null);
						}
					}
					if(nonBrand!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
					{
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr1SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrandCT(qpr1SnapShotId, nonBrand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr1TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		            			{
		            				spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		            				dataExist = true;
		            			}
		            			else
		            			{
		            				spendByBean.setQpr1TotalCost(null);
		            			}
		    				}
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
					}
					if(nonBrand!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr2SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrandCT(qpr2SnapShotId, nonBrand,categoryType, spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr2TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr2TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
					}
					if(nonBrand!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(qpr3SnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrandCT(qpr3SnapShotId, nonBrand, categoryType,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null )
						{
							//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setQpr3TotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setQpr3TotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
					}
					if( nonBrand!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
					{
						
						//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByBudgetLocationSnapshot(fullYearSnapShotId,budgetLocation,spendReportFilter);
						List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCrossTabNonBrandCT(fullYearSnapShotId, nonBrand, categoryType,spendReportFilter);
						
						if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
						{
							//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    				{
								if(projectSnapShot.get(0).getTotalCost()!=null)
								{
									spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
									dataExist = true;
								}
								else
								{
									spendByBean.setFullYearTotalCost(null);
								}
		    				}
		    				else
		    				{
		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
		    					if(projectSnapShot.get(0).getTotalCost()!=null)
		    					{
		    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    						dataExist = true;
		    					}
		    					else
		    					{
		    						spendByBean.setFullYearTotalCost(null);
		    					}
		    				}
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
					}
					
					if(nonBrand!=null )
					{
						//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
						List<Project> latestCostBudgetLocation = null;
						if(fetchLatestCostProjects)
						{
							latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, null, nonBrand, spendReportFilter, null);
						}
						else
						{
							
							// This has been done as part of http://redmine.nvish.com/redmine/issues/423
							List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);
	
			    			if(projectIds!=null && projectIds.size()>0)
			    			{
			    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
			    				
			    				latestCostBudgetLocation = projectDAONew.getSpendByCrossTabMethodologyNonBrandLatestCost(budgetYear, null, nonBrand, spendReportFilter, projectIds);
			    			}
						}
						
						
						{
							if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
							{
								//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
								if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
			    				{
			    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
			    					dataExist = true;
			    				}
			    				else
			    				{
			    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
			            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
			            			dataExist = true;
			    				}
							}
							else
							{
								spendByBean.setLatestTotalCost(null);
							}
						}
					}
					//spendByBean.setBudgetLocation(budgetLocation);
					//spendByBean.setBudgetLocationName(SynchroUtils.getBudgetLocationName(budgetLocation));
					//spendByBean.setArea(SynchroUtils.getAreaName(budgetLocation));
					//spendByBean.setRegion(SynchroUtils.getRegionName(budgetLocation));
					//spendByBean.setT20_40(SynchroUtils.getT20_T40Name(budgetLocation));
					
					if(dataExist)
					{
						//spendByBean.setMethodologies(methodology);
						//spendByBean.setMethodologyNames(SynchroDAOUtil.getMethodologyNames(methodology));
						//spendByBean.setBrandNonBrandName(SynchroGlobal.getAllBrands().get(nonBrand));
						
						spendByBean.setBrand(nonBrand);
						
						if(nonBrand==1)
						{
							spendByBean.setBrandNonBrandName("Multi-Brand Study");
						}
						else if(nonBrand==2)
						{
							spendByBean.setBrandNonBrandName("Non-brand related");
						}
						
						spendByBean.setCategoryTypes(categoryType);
						spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
						
						spendByReportBeanList.add(spendByBean);
					
					}
					
					
				}
			
    }
	return spendByReportBeanList;
	
    
    }
    
    
    @Override
    public List<SpendByReportBean> getSpendByCategoryType(Integer budgetYear, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
    	//List<String> allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
    	List<String> allCategories = new ArrayList<String>();
    	
    	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), budgetYear);
    	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), budgetYear);
    	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), budgetYear);
    	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), budgetYear);
    	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), budgetYear);
    	
    	if(fetchLatestCostProjects)
		{
    		allCategories = projectDAONew.getCategoryTypesForQPRSnapshot(budgetYear, spendReportFilter);
    		
    		//Methodology Filter
	      /*  if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
	        {
	        	for(Long meth : spendReportFilter.getMethDetails())
	        	{
	        		allMethodologies.add(meth.toString());
	        	}
	        }
	        else
	        {
	        	allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
	        }
			*/
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
							
				allCategories = qprSnapshotDAO.getCategoryTypesForQPRSnapshot(budgetYear);
				
				//Methodology Filter
		      /*  if(spendReportFilter.getMethDetails() != null && spendReportFilter.getMethDetails().size()>0 ) 
		        {
		        	for(Long meth : spendReportFilter.getMethDetails())
		        	{
		        		allMethodologies.add(meth.toString());
		        	}
		        }
		        else
		        {
		        	allMethodologies = qprSnapshotDAO.getMethodologiesForQPRSnapshot(budgetYear);
		        }
		        */
			}
		}
    	
    	
    		
    	
    		
		for(String categoryType:allCategories)
		{
			boolean coplaTotalCostNull = true;
			boolean qpr1TotalCostNull = true;
			boolean qpr2TotalCostNull = true;
			boolean qpr3TotalCostNull = true;
			boolean fullYearTotalCostNull = true;
			boolean latestTotalCostNull = true;
			
			SpendByReportBean spendByBean = new SpendByReportBean();
			if(categoryType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
			{
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(coplaSnapShotId,categoryType,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull=false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						coplaTotalCostNull=false;
    					}
    					else
    					{
    						spendByBean.setCoplaTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setCoplaTotalCost(null);
				}
			}
			if(categoryType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr1SnapShotId,categoryType,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr1TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr1TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr1TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr1TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr1TotalCost(null);
				}
			}
			if(categoryType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr2SnapShotId,categoryType,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr2TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr2TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr2TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr2TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr2TotalCost(null);
				}
			}
			if(categoryType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
		
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr3SnapShotId,categoryType,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							qpr3TotalCostNull = false;
						}
						else
						{
							spendByBean.setQpr3TotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						qpr3TotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setQpr3TotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setQpr3TotalCost(null);
				}
			}
			if(categoryType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
				//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
				
				List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(fullYearSnapShotId,categoryType,spendReportFilter);
				//spendByBean.setMethodologies(methodology);
				if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
				{
					//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
					if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
    				{
						if(projectSnapShot.get(0).getTotalCost()!=null)
						{
							spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
							fullYearTotalCostNull = false;
						}
						else
						{
							spendByBean.setFullYearTotalCost(null);
						}
    				}
    				else
    				{
    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
    					if(projectSnapShot.get(0).getTotalCost()!=null)
    					{
    						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
    						fullYearTotalCostNull = false;
    					}
    					else
    					{
    						spendByBean.setFullYearTotalCost(null);
    					}
    				}
				}
				else
				{
					spendByBean.setFullYearTotalCost(null);
				}
			}
			
			if(categoryType!=null)
			{
				//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
				List<Project> latestCostBudgetLocation = null;
				if(fetchLatestCostProjects)
				{
					latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(budgetYear, categoryType,spendReportFilter, null);
				}
				else
				{
					
					// This has been done as part of http://redmine.nvish.com/redmine/issues/423
					List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(budgetYear, spendReportFilter);

	    			if(projectIds!=null && projectIds.size()>0)
	    			{
	    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
	    				latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(budgetYear, categoryType,spendReportFilter, projectIds);
	    			}
				}
				
				
				{
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					latestTotalCostNull = false;
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			latestTotalCostNull = false;
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
				}
			}
			
			spendByBean.setCategoryTypes(categoryType);
			//spendByBean.setCategoryNames(SynchroDAOUtil.getMethodologyNames(categoryType));
			spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
			
			//http://redmine.nvish.com/redmine/issues/515
			if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
			{
				spendByProjectsList.add(spendByBean);
			}
		}	
	    	
		if(allCategories!=null && allCategories.size()>0)
    	{
    		if(spendByProjectsList.size()==0)
    		{
    			// adding Blank Row
        		SpendByReportBean spendByBean = new SpendByReportBean();
        		spendByBean.setCoplaTotalCost(null);
        		spendByBean.setQpr1TotalCost(null);
        		spendByBean.setQpr2TotalCost(null);
        		spendByBean.setQpr3TotalCost(null);
        		spendByBean.setFullYearTotalCost(null);
        		spendByBean.setLatestTotalCost(null);
        		
        		spendByBean.setProjectId(null);
        		spendByBean.setProjectName("");
        		spendByBean.setBudgetLocationName("");
        		spendByProjectsList.add(spendByBean);
    		}
    	}
    	else
    	{
    		// adding Blank Row
    		SpendByReportBean spendByBean = new SpendByReportBean();
    		spendByBean.setCoplaTotalCost(null);
    		spendByBean.setQpr1TotalCost(null);
    		spendByBean.setQpr2TotalCost(null);
    		spendByBean.setQpr3TotalCost(null);
    		spendByBean.setFullYearTotalCost(null);
    		spendByBean.setLatestTotalCost(null);
    		
    		spendByBean.setProjectId(null);
    		spendByBean.setProjectName("");
    		spendByBean.setBudgetLocationName("");
    		spendByProjectsList.add(spendByBean);
    		
    	}
    	return spendByProjectsList;
    }
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByCategoryTypeMap(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	
 	Map<String, List<SpendByReportBean>> spendByCategoryTypeMap = new HashMap<String, List<SpendByReportBean>>();
 	
 	Set<String> allCategories = new HashSet<String>();
 	
 	Map<Integer,Set<String>> budgetYearCategories = new HashMap<Integer, Set<String>>();
 	
 	for(int i=0;i<budgetYearsArr.length;i++)
 	{
 	 	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
 	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
 	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
 	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
 	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
 	   	
 	   	Set<String> budgetYearCategory = new HashSet<String>(); 
 	   	
 	   	if(fetchLatestCostProjects)
		{
   			allCategories.addAll(projectDAONew.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i]),spendReportFilter));
   			
   			budgetYearCategory = new HashSet<String>(allCategories);
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
			{
				
			}
			else
			{
				coplaSnapShotId=new Long("0");
				
			}
			if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr1SnapShotId=new Long("0");
				
			}
			if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr2SnapShotId=new Long("0");
				
			}
			if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				qpr3SnapShotId=new Long("0");
				
			}
			if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
			{
				
			}
			else
			{
				fullYearSnapShotId=new Long("0");
				
			}
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i])));
			}
			budgetYearCategory = new HashSet<String>(allCategories);
		}
 	   budgetYearCategories.put(new Integer(budgetYearsArr[i]), budgetYearCategory);
 	}
 	
 	for(int i=0;i<budgetYearsArr.length;i++)
 	{
 		
 		List<SpendByReportBean> spendByProjectsList = new ArrayList<SpendByReportBean>();
 	   	//List<String> allMethodologies = projectDAONew.getMethodologiesForQPRSnapshot(budgetYear);
 	   	
 	   	
 	   	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
 	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
 	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
 	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
 	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
 	   	
 	   
 	   	
 	   		
 			for(String categoryType:allCategories)
 			{
 				boolean coplaTotalCostNull = true;
 				boolean qpr1TotalCostNull = true;
 				boolean qpr2TotalCostNull = true;
 				boolean qpr3TotalCostNull = true;
 				boolean fullYearTotalCostNull = true;
 				boolean latestTotalCostNull = true;
 				
 				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				
 				SpendByReportBean spendByBean = new SpendByReportBean();
 				
 				if(categoryType!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
 				{
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(coplaSnapShotId,categoryType,spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						coplaTotalCostNull=false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setCoplaTotalCost(null);
 	   					}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						coplaTotalCostNull=false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setCoplaTotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setCoplaTotalCost(null);
 					}
 				}
 				else if(categoryType!=null)
 				{
 					coplaQPRFreeze=false;
 				}
 				
 				if(categoryType!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
 				{
 					//spendByBean.setQpr1TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID())).get(0).getTotalCost());
 					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr1SnapShotId, project.getProjectID());
 					
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr1SnapShotId,categoryType,spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								qpr1TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr1TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						qpr1TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr1TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr1TotalCost(null);
 					}
 				}
 				else if(categoryType!=null)
 				{
 					qpr1QPRFreeze=false;
 				}
 				
 				if(categoryType!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
 				{
 					//spendByBean.setQpr2TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID())).get(0).getTotalCost());
 					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr2SnapShotId, project.getProjectID());
 			
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr2SnapShotId,categoryType,spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								qpr2TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr2TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						qpr2TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr2TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr2TotalCost(null);
 					}
 				}
 				else if(categoryType!=null)
 				{
 					qpr2QPRFreeze=false;
 				}
 				
 				if(categoryType!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
 				{
 					//spendByBean.setQpr3TotalCost((qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID())).get(0).getTotalCost());
 					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(qpr3SnapShotId, project.getProjectID());
 			
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr3SnapShotId,categoryType,spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								qpr3TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr3TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						qpr3TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr3TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr3TotalCost(null);
 					}
 				}
 				else if(categoryType!=null)
 				{
 					qpr3QPRFreeze=false;
 				}
 				
 				if(categoryType!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
 				{
 					//spendByBean.setFullYearTotalCost((qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID())).get(0).getTotalCost());
 					//List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectSnapshot(fullYearSnapShotId, project.getProjectID());
 					
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(fullYearSnapShotId,categoryType,spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								fullYearTotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setFullYearTotalCost(null);
 							}
	 	   				}
	 	   				else
	 	   				{
	 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	 	   					{
	 	   						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	 	   						fullYearTotalCostNull = false;
	 	   					}
	 	   					else
	 	   					{
	 	   						spendByBean.setFullYearTotalCost(null);
	 	   					}
	 	   				}
 					}
 					else
 					{
 						spendByBean.setFullYearTotalCost(null);
 					}
 				}
 				else if(categoryType!=null)
 				{
 					fullYearQPRFreeze=false;
 				}
 				
 				if(categoryType!=null)
 				{
 					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
 					List<Project> latestCostBudgetLocation = null;
 					if(fetchLatestCostProjects)
 					{
 						latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(new Integer(budgetYearsArr[i]), categoryType,spendReportFilter, null);
 					}
 					else
 					{
 						
 						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
 						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
 	
 		    			if(projectIds!=null && projectIds.size()>0)
 		    			{
 		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
 		    				
 		    				
 		    			  	// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearCategories.get(new Integer(budgetYearsArr[i])).contains(categoryType))
		    				{
		    					latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(new Integer(budgetYearsArr[i]), categoryType,spendReportFilter, projectIds);
		    				}
 		    			}
 					}
 					
 					
 					{
 						if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
 						{
 							//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
 							if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 		    				{
 		    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 		    					latestTotalCostNull = false;
 		    				}
 		    				else
 		    				{
 		    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 		            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 		            			latestTotalCostNull = false;
 		    				}
 						}
 						else
 						{
 							spendByBean.setLatestTotalCost(null);
 						}
 					}
 				}
 				
 				spendByBean.setCategoryTypes(categoryType);
 				spendByBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(categoryType));
 				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
 				
 				//http://redmine.nvish.com/redmine/issues/515
 				if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
 				{
 					//spendByProjectsList.add(spendByBean);
 					
 					
 					
 					
 					if(spendByCategoryTypeMap.get(categoryType)!=null)
 					{
 						spendByProjectsList = spendByCategoryTypeMap.get(categoryType);
 					}
 					else
 					{
 						spendByProjectsList = new ArrayList<SpendByReportBean>();
 					}
 							
 					spendByProjectsList.add(spendByBean);
 					
 					spendByCategoryTypeMap.put(categoryType, spendByProjectsList);
 				}
 				
 				else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
				{
 					if(spendByCategoryTypeMap.get(categoryType)!=null)
 					{
 						spendByProjectsList = spendByCategoryTypeMap.get(categoryType);
 					}
 					else
 					{
 						spendByProjectsList = new ArrayList<SpendByReportBean>();
 					}
 							
 					spendByProjectsList.add(spendByBean);
 					
 					spendByCategoryTypeMap.put(categoryType, spendByProjectsList);
				}
 			}	
 		    	
 			if(allCategories!=null && allCategories.size()>0)
 	   	{
 	   		if(spendByProjectsList.size()==0)
 	   		{
 	   			// adding Blank Row
 	       		SpendByReportBean spendByBean = new SpendByReportBean();
 	       		spendByBean.setCoplaTotalCost(null);
 	       		spendByBean.setQpr1TotalCost(null);
 	       		spendByBean.setQpr2TotalCost(null);
 	       		spendByBean.setQpr3TotalCost(null);
 	       		spendByBean.setFullYearTotalCost(null);
 	       		spendByBean.setLatestTotalCost(null);
 	       		
 	       		spendByBean.setProjectId(null);
 	       		spendByBean.setProjectName("");
 	       		spendByBean.setBudgetLocationName("");
 	       		spendByProjectsList.add(spendByBean);
 	   		}
 	   	}
 	   	else
 	   	{
 	   		// adding Blank Row
 	   		SpendByReportBean spendByBean = new SpendByReportBean();
 	   		spendByBean.setCoplaTotalCost(null);
 	   		spendByBean.setQpr1TotalCost(null);
 	   		spendByBean.setQpr2TotalCost(null);
 	   		spendByBean.setQpr3TotalCost(null);
 	   		spendByBean.setFullYearTotalCost(null);
 	   		spendByBean.setLatestTotalCost(null);
 	   		
 	   		spendByBean.setProjectId(null);
 	   		spendByBean.setProjectName("");
 	   		spendByBean.setBudgetLocationName("");
 	   		spendByProjectsList.add(spendByBean);
 	   		
 	   	}
 	}
    	return spendByCategoryTypeMap;
    } 
    
    
    @Override
    public Map<String, List<SpendByReportBean>> getSpendByCategoryType(String[] budgetYearsArr, Integer currencyId, SpendReportExtractFilter spendReportFilter, boolean fetchLatestCostProjects,
    		boolean isCOPLASpendFor, boolean isQPR1SpendFor, boolean isQPR2SpendFor, boolean isQPR3SpendFor, boolean isFullYearSpendFor) {
    	
    	
 	Map<String, List<SpendByReportBean>> spendByCategoryTypeMap = new HashMap<String, List<SpendByReportBean>>();
 	
 	Set<String> allCategories = new HashSet<String>();
 	
 	Map<Integer,Set<String>> budgetYearCategories = new HashMap<Integer, Set<String>>();
 	
 	
 	LinkedHashMap<String,List<SpendByReportBean>> finalSpendByCategoryMap = new LinkedHashMap<String, List<SpendByReportBean>>(); 
	
	LinkedHashMap<String, SpendByReportBean> spendByCategoryKey = new LinkedHashMap<String, SpendByReportBean>();
	
	
	
 	
 	for(int i=0;i<budgetYearsArr.length;i++)
 	{
 	 	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
 	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
 	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
 	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
 	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
 	   	
 	   	Set<String> budgetYearCategory = new HashSet<String>(); 
 		List<Long> selectedQPRs = new ArrayList<Long>();
 		
 		if(isCOPLASpendFor && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0 )
		{
			selectedQPRs.add(coplaSnapShotId);
		}
		else
		{
			coplaSnapShotId=new Long("0");
			
		}
		if(isQPR1SpendFor && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr1SnapShotId);
		}
		else
		{
			qpr1SnapShotId=new Long("0");
			
		}
		if(isQPR2SpendFor && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr2SnapShotId);
		}
		else
		{
			qpr2SnapShotId=new Long("0");
			
		}
		if(isQPR3SpendFor && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
		{
			selectedQPRs.add(qpr3SnapShotId);
		}
		else
		{
			qpr3SnapShotId=new Long("0");
			
		}
		if(isFullYearSpendFor && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
		{
			selectedQPRs.add(fullYearSnapShotId);
		}
		else
		{
			fullYearSnapShotId=new Long("0");
			
		}
 	   	
 	   	if(fetchLatestCostProjects)
		{
   			//allCategories.addAll(projectDAONew.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i])));
   			
   			//budgetYearCategory = new HashSet<String>(allCategories);
 	   		
	 	   	if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i])));
				
				allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs, spendReportFilter));
			
		 	   	if(allCategories!=null && allCategories.size()>0)
		        {
		 	   		for(String category: allCategories)
		   			{
		   				if(category!=null)
		   				{
			 	   			String s = category;
			   				SpendByReportBean blBean = new SpendByReportBean();
			   		    	blBean.setCategoryTypes(category);
			   		    	blBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(category));
			   				spendByCategoryKey.put(s, blBean);
		   				}
		   			}
		        }
			}
	 	   	
	 	   allCategories = new HashSet<String>();
	 	  allCategories.addAll(projectDAONew.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter));
				
	 	  for(String category: allCategories)
			{
	 		  	if(category!=null)
				{
	 		  		String s = category;
					SpendByReportBean blBean = new SpendByReportBean();
			    	blBean.setCategoryTypes(category);
			    	blBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(category));
					spendByCategoryKey.put(s, blBean);
				}
			}
	 	   	
		}
		else
		{
			
			// http://redmine.nvish.com/redmine/issues/423
			
			
			if(coplaSnapShotId.intValue() > 0 || qpr1SnapShotId.intValue() >0 || qpr2SnapShotId.intValue()>0 || qpr3SnapShotId.intValue() > 0 || fullYearSnapShotId >0)
			{
				//allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i])));
				
				allCategories.addAll(qprSnapshotDAO.getCategoryTypesForQPRSnapshot(new Integer(budgetYearsArr[i]),selectedQPRs, spendReportFilter));
			}
			
			if(allCategories!=null && allCategories.size()>0)
	        {
	        	
				
	        	for(String category: allCategories)
    			{
	        		if(category!=null)
					{
		        		String s = category;
	    				SpendByReportBean blBean = new SpendByReportBean();
	    		    	blBean.setCategoryTypes(category);
	    		    	blBean.setCategoryTypesNames(SynchroDAOUtil.getCategoryNames(category));
	    				spendByCategoryKey.put(s, blBean);
					}
    				
    			}
	        	
	        	
	        }
			
		}
 	   
 	
 	
 	   for(String key: spendByCategoryKey.keySet())
 	   {	
 		
 		  SpendByReportBean bLBean = spendByCategoryKey.get(key);
			
	    SpendByReportBean spendByBean = new SpendByReportBean();
	    spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
 	   /*	
 	   	Long coplaSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("1"), new Integer(budgetYearsArr[i]));
 	   	Long qpr1SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("2"), new Integer(budgetYearsArr[i]));
 	   	Long qpr2SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("3"), new Integer(budgetYearsArr[i]));
 	   	Long qpr3SnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("4"), new Integer(budgetYearsArr[i]));
 	   	Long fullYearSnapShotId = qprSnapshotDAO.getSnapShotId(new Integer("5"), new Integer(budgetYearsArr[i]));
 	   	
 	   
 	   	
 	   		
 			for(String categoryType:allCategories)
 			{
 				boolean coplaTotalCostNull = true;
 				boolean qpr1TotalCostNull = true;
 				boolean qpr2TotalCostNull = true;
 				boolean qpr3TotalCostNull = true;
 				boolean fullYearTotalCostNull = true;
 				boolean latestTotalCostNull = true;
 				
 				boolean coplaQPRFreeze = true;
				boolean qpr1QPRFreeze = true;
				boolean qpr2QPRFreeze = true;
				boolean qpr3QPRFreeze = true;
				boolean fullYearQPRFreeze = true;
				
 				SpendByReportBean spendByBean = new SpendByReportBean();
 				*/
 				if(bLBean.getCategoryTypes()!=null && coplaSnapShotId!=null && coplaSnapShotId.intValue() > 0)
 				{
 				/*	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(coplaSnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   					//	coplaTotalCostNull=false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setCoplaTotalCost(null);
 	   					}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   					//	coplaTotalCostNull=false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setCoplaTotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setCoplaTotalCost(null);
 					}*/
 					
 					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getCategoryTypeAgencySnapshot(coplaSnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
 					{
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	    				{
 							spendByBean.setCoplaTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 						}
 	    				else
 	    				{
 	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
 	    					spendByBean.setCoplaTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	    				}
 					}
 				}
 				
 				
 				if(bLBean.getCategoryTypes()!=null && qpr1SnapShotId!=null && qpr1SnapShotId.intValue() > 0)
 				{
 					/*
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr1SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 							//	qpr1TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr1TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						//qpr1TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr1TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr1TotalCost(null);
 					}*/
 					
 					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getCategoryTypeAgencySnapshot(qpr1SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
 					{
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	    				{
 							spendByBean.setQpr1TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 						}
 	    				else
 	    				{
 	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
 	    					spendByBean.setQpr1TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	    				}
 					}
 				}
 				
 				
 				if(bLBean.getCategoryTypes()!=null && qpr2SnapShotId!=null && qpr2SnapShotId.intValue() > 0)
 				{
 				
 					/*
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr2SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								//qpr2TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr2TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						//qpr2TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr2TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr2TotalCost(null);
 					}
 					*/
 					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getCategoryTypeAgencySnapshot(qpr2SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
 					{
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	    				{
 							spendByBean.setQpr2TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 						}
 	    				else
 	    				{
 	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
 	    					spendByBean.setQpr2TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	    				}
 					}
 				}
 				
 				
 				if(bLBean.getCategoryTypes()!=null && qpr3SnapShotId!=null && qpr3SnapShotId.intValue() > 0)
 				{
 				
 					/*
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(qpr3SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								//qpr3TotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setQpr3TotalCost(null);
 							}
 	   				}
 	   				else
 	   				{
 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
 	   					{
 	   						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	   						//qpr3TotalCostNull = false;
 	   					}
 	   					else
 	   					{
 	   						spendByBean.setQpr3TotalCost(null);
 	   					}
 	   				}
 					}
 					else
 					{
 						spendByBean.setQpr3TotalCost(null);
 					}
 					*/
 					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getCategoryTypeAgencySnapshot(qpr3SnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
 					{
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	    				{
 							spendByBean.setQpr3TotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 						}
 	    				else
 	    				{
 	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
 	    					spendByBean.setQpr3TotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	    				}
 					}
 				}
 				
 				
 				if(bLBean.getCategoryTypes()!=null && fullYearSnapShotId!=null && fullYearSnapShotId.intValue() > 0)
 				{
 					/*
 					List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getSpendByCategoryTypes(fullYearSnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 					//spendByBean.setMethodologies(methodology);
 					if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
 					{
 						//spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost());
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	 	   				{
 							if(projectSnapShot.get(0).getTotalCost()!=null)
 							{
 								spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
 								//fullYearTotalCostNull = false;
 							}
 							else
 							{
 								spendByBean.setFullYearTotalCost(null);
 							}
	 	   				}
	 	   				else
	 	   				{
	 	   					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	 	   					if(projectSnapShot.get(0).getTotalCost()!=null)
	 	   					{
	 	   						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	 	   						//fullYearTotalCostNull = false;
	 	   					}
	 	   					else
	 	   					{
	 	   						spendByBean.setFullYearTotalCost(null);
	 	   					}
	 	   				}
 					}
 					else
 					{
 						spendByBean.setFullYearTotalCost(null);
 					}
 					*/
 					List<QPRProjectCostSnapshot> projectCostSnapshot = qprSnapshotDAO.getCategoryTypeAgencySnapshot(fullYearSnapShotId,bLBean.getCategoryTypes(),spendReportFilter);
 	    			if(projectCostSnapshot!=null && projectCostSnapshot.size()>0)
 					{
 						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
 	    				{
 							spendByBean.setFullYearTotalCost(calculateAgencyTotalCost(projectCostSnapshot).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 						}
 	    				else
 	    				{
 	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
 	    					BigDecimal tc = calculateAgencyTotalCost(projectCostSnapshot);
 	    					spendByBean.setFullYearTotalCost(BigDecimal.valueOf(tc.doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
 	    				}
 					}
 				}
 				
 				
 				if(bLBean.getCategoryTypes()!=null)
 				{
 					//List<Project> latestCostBudgetLocation = projectDAONew.getSpendByMethodologyLatestCost(budgetYear, methodology,spendReportFilter);
 					/*List<Project> latestCostBudgetLocation = null;
 					if(fetchLatestCostProjects)
 					{
 						latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(new Integer(budgetYearsArr[i]), categoryType,spendReportFilter, null);
 					}
 					else
 					{
 						
 						// This has been done as part of http://redmine.nvish.com/redmine/issues/423
 						List<Long> projectIds = qprSnapshotDAO.getSpendByBudgetYearProjectsForQPRSnapshot(new Integer(budgetYearsArr[i]), spendReportFilter);
 	
 		    			if(projectIds!=null && projectIds.size()>0)
 		    			{
 		    				//allProjects = projectDAONew.getSpendByBudgetYearProjectsForQPRSnapshot(projectIds);
 		    				
 		    				
 		    			  	// This has been done for only those projects for which there is methodology in the corresponding QPR Snapshot. Other wise the Latest cost will come for 
		    				// those QPR Snapshots which are not frozen.
		    				if(budgetYearCategories.get(new Integer(budgetYearsArr[i])).contains(categoryType))
		    				{
		    					latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(new Integer(budgetYearsArr[i]), categoryType,spendReportFilter, projectIds);
		    				}
 		    			}
 					}
 					*/
 					
 					List<Project> latestCostBudgetLocation = projectDAONew.getSpendByCategoryTypeLatestCost(new Integer(budgetYearsArr[i]), bLBean.getCategoryTypes(),spendReportFilter, null);
 					
					if(latestCostBudgetLocation!=null && latestCostBudgetLocation.size()>0 && latestCostBudgetLocation.get(0).getTotalCost()!=null)
					{
						//spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost());
						if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
	    				{
	    					spendByBean.setLatestTotalCost(latestCostBudgetLocation.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    					
	    				}
	    				else
	    				{
	    					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
	            			spendByBean.setLatestTotalCost(BigDecimal.valueOf(latestCostBudgetLocation.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
	            			
	    				}
					}
					else
					{
						spendByBean.setLatestTotalCost(null);
					}
 					
 				}
 				
 				
 				boolean addCost = false;
				
				if(fetchLatestCostProjects)
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null || spendByBean.getLatestTotalCost()!=null)
					{
						addCost = true;
					}
				}
				else
				{
					if(spendByBean.getCoplaTotalCost()!=null || spendByBean.getQpr1TotalCost()!=null || spendByBean.getQpr2TotalCost()!=null || spendByBean.getQpr3TotalCost()!=null || spendByBean.getFullYearTotalCost()!=null)
					{
						addCost = true;
					}
				}
				
				// This logic is if there is cost for any of the QPR Snapshot then add the cost otherwise display '-'
			//	if(addCost)
			//		{
	 				spendByBean.setCategoryTypes(bLBean.getCategoryTypes());
	 				spendByBean.setCategoryTypesNames(bLBean.getCategoryTypesNames());
	 				spendByBean.setBudgetYear(new Integer(budgetYearsArr[i]));
	 				
	 				/*
	 				//http://redmine.nvish.com/redmine/issues/515
	 				if((!qpr1TotalCostNull && isQPR1SpendFor) || (!coplaTotalCostNull && isCOPLASpendFor) || (!qpr2TotalCostNull && isQPR2SpendFor) || (!qpr3TotalCostNull && isQPR3SpendFor) || (!fullYearTotalCostNull && isFullYearSpendFor) ||  (!latestTotalCostNull && fetchLatestCostProjects))
	 				{
	 					//spendByProjectsList.add(spendByBean);
	 					
	 					
	 					
	 					
	 					if(spendByCategoryTypeMap.get(categoryType)!=null)
	 					{
	 						spendByProjectsList = spendByCategoryTypeMap.get(categoryType);
	 					}
	 					else
	 					{
	 						spendByProjectsList = new ArrayList<SpendByReportBean>();
	 					}
	 							
	 					spendByProjectsList.add(spendByBean);
	 					
	 					spendByCategoryTypeMap.put(categoryType, spendByProjectsList);
	 				}
	 				
	 				else if(!coplaQPRFreeze || !qpr1QPRFreeze || !qpr2QPRFreeze || !qpr3QPRFreeze || !fullYearQPRFreeze )
					{
	 					if(spendByCategoryTypeMap.get(categoryType)!=null)
	 					{
	 						spendByProjectsList = spendByCategoryTypeMap.get(categoryType);
	 					}
	 					else
	 					{
	 						spendByProjectsList = new ArrayList<SpendByReportBean>();
	 					}
	 							
	 					spendByProjectsList.add(spendByBean);
	 					
	 					spendByCategoryTypeMap.put(categoryType, spendByProjectsList);
					}*/
	 				
	 				if(finalSpendByCategoryMap!=null && finalSpendByCategoryMap.containsKey(key))
					{
						
		    			List<SpendByReportBean> spendReportBeanList = finalSpendByCategoryMap.get(key);
						spendReportBeanList.add(spendByBean);
					}
					else
					{
						List<SpendByReportBean> spendReportBeanList = new ArrayList<SpendByReportBean>();
						
						// This is done for adding the blank Spend By Report Beans for previous budget years 
						if(i>0)
						{
							for(int j=0;j<i;j++)
							{
								SpendByReportBean blankSpendByBean = new SpendByReportBean();
								spendReportBeanList.add(blankSpendByBean);
							}
						}
						spendReportBeanList.add(spendByBean);
						finalSpendByCategoryMap.put(key, spendReportBeanList);
					}
			//	}
 			}	
 		    	
 		
 	}
    	return finalSpendByCategoryMap;
    }
    
    
    private SpendByReportBean getProjectCostBrandSnapshotList(SpendByReportBean spendByBean, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, Integer currencyId, Long projectId, String projectName, Integer budgetLocation, String region, String area, String t20_40, String methodology, String methGroup, Integer brand, String brandType, String categoryType)
    {
    	
    	return getProjectCostBrandAgencySnapshotList(spendByBean, coplaSnapShotId, qpr1SnapShotId, qpr2SnapShotId, qpr3SnapShotId, fullYearSnapShotId, currencyId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType, null, null);
    	
    	/*
    	if(coplaSnapShotId!=null)
    	{
	    	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectBrandSnapshotCrossTab(coplaSnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType);
	    	
	    	
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setCoplaTotalCost(null);
			}
    	}
    	
    	if(qpr1SnapShotId!=null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectBrandSnapshotCrossTab(qpr1SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType);
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr1TotalCost(null);
			}
    	}
    	
    	if(qpr2SnapShotId != null)
    	{
			List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectBrandSnapshotCrossTab(qpr2SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType);
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr2TotalCost(null);
			}
		
    	}
    	
    	if(qpr3SnapShotId != null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectBrandSnapshotCrossTab(qpr3SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType);
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr3TotalCost(null);
			}
    	}
    	
    	if(fullYearSnapShotId != null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectBrandSnapshotCrossTab(fullYearSnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType);
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setFullYearTotalCost(null);
			}
    	}
    	
    	return spendByBean;*/
    }
    
    private SpendByReportBean getProjectCostNonBrandSnapshotList(SpendByReportBean spendByBean, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, Integer currencyId, Long projectId, String projectName, Integer budgetLocation, String region, String area, String t20_40, String methodology, String methGroup, Integer nonBrand, String brandType, String categoryType)
    {
    	
    	return getProjectCostNonBrandAgencySnapshotList(spendByBean, coplaSnapShotId, qpr1SnapShotId, qpr2SnapShotId, qpr3SnapShotId, fullYearSnapShotId, currencyId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType, null, null);
    	/*
    	if(coplaSnapShotId!=null)
    	{
	    	List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectNonBrandSnapshotCrossTab(coplaSnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType);
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setCoplaTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setCoplaTotalCost(null);
			}
    	}
    	
    	if(qpr1SnapShotId!=null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot = qprSnapshotDAO.getProjectNonBrandSnapshotCrossTab(qpr1SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType);
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr1TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr1TotalCost(null);
			}
    	}
    	
    	if(qpr2SnapShotId != null)
    	{
			List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectNonBrandSnapshotCrossTab(qpr2SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType);
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr2TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr2TotalCost(null);
			}
		
    	}
    	
    	if(qpr3SnapShotId != null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectNonBrandSnapshotCrossTab(qpr3SnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType);
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr3TotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setQpr3TotalCost(null);
			}
    	}
    	
    	if(fullYearSnapShotId != null)
    	{
    		List<QPRProjectSnapshot> projectSnapShot =  qprSnapshotDAO.getProjectNonBrandSnapshotCrossTab(fullYearSnapShotId, projectId, projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType);
			
			if(projectSnapShot!=null && projectSnapShot.size()>0 && projectSnapShot.get(0).getTotalCost()!=null)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setFullYearTotalCost(projectSnapShot.get(0).getTotalCost().setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectSnapShot.get(0).getTotalCost()!=null)
					{
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectSnapShot.get(0).getTotalCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
			}
			else
			{
				spendByBean.setFullYearTotalCost(null);
			}
    	}
    	
    	return spendByBean;
    	*/
    }
    
    private SpendByReportBean getProjectCostBrandAgencySnapshotList(SpendByReportBean spendByBean, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, Integer currencyId, Long projectId, String projectName, Integer budgetLocation, String region, String area, String t20_40, String methodology, String methGroup, Integer brand, String brandType, String categoryType, Long agencyId, String agencyType)
    {
	    
    	if(coplaSnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(coplaSnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType,agencyId, agencyType);
			
		   
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				
		    	
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
		    
		   
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setCoplaTotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setCoplaTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setCoplaTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
					
					
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}*/
				
				
			}
			else
			{
				spendByBean.setCoplaTotalCost(null);
			}
    	}
    	
    	if(qpr1SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr1SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
				
	    		spendByBean.setQpr1TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
				
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr1TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr1TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setQpr1TotalCost(null);
			}
    	}
    	if(qpr2SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr2SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setQpr2TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr2TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr2TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setQpr2TotalCost(null);
			}
    	}
    	
    	if(qpr3SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(qpr3SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		   
	    	for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setQpr3TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setQpr3TotalCost(null);
			}
    	}
    	if(fullYearSnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectBrandAgencySnapshotCrossTab(fullYearSnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, brand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
	    	for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
		   
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setFullYearTotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*
	    		if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setFullYearTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setFullYearTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setFullYearTotalCost(null);
			}
    	}
    	
    	return spendByBean;
		
    }
    
    private SpendByReportBean getProjectCostNonBrandAgencySnapshotList(SpendByReportBean spendByBean, Long coplaSnapShotId, Long qpr1SnapShotId, Long qpr2SnapShotId, Long qpr3SnapShotId, Long fullYearSnapShotId, Integer currencyId, Long projectId, String projectName, Integer budgetLocation, String region, String area, String t20_40, String methodology, String methGroup, Integer nonBrand, String brandType, String categoryType, Long agencyId, String agencyType)
    {
	    
    	if(coplaSnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(coplaSnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
				
			
			}
		    
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setCoplaTotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setCoplaTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setCoplaTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
					
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setCoplaTotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setCoplaTotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setCoplaTotalCost(null);
			}
    	}
    	
    	if(qpr1SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr1SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setQpr1TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*
		    	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr1TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr1TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr1TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr1TotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setQpr1TotalCost(null);
			}
    	}
    	if(qpr2SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr2SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setQpr2TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr2TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr2TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr2TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr2TotalCost(null);
					}
				}*/
			}
			else
			{
				spendByBean.setQpr2TotalCost(null);
			}
    	}
    	if(qpr3SnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(qpr3SnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
	    		spendByBean.setQpr3TotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*
		    	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setQpr3TotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setQpr3TotalCost(null);
					}
				}
				*/
			}
			else
			{
				spendByBean.setQpr3TotalCost(null);
			}
    	}
    	if(fullYearSnapShotId!=null)
    	{
	    	List<QPRProjectCostSnapshot> projectCostSnapShot = qprSnapshotDAO.getProjectNonBrandAgencySnapshotCrossTab(fullYearSnapShotId, projectId , projectName, budgetLocation, region, area, t20_40, methodology, methGroup, nonBrand, brandType, categoryType,agencyId, agencyType);
			
	    	BigDecimal totalCost = new BigDecimal("0");
		    for(QPRProjectCostSnapshot pcostSnapShot:projectCostSnapShot)
			{
				if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					BigDecimal agencyCost = pcostSnapShot.getEstimatedCost();
		    		if(pcostSnapShot.getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			//spendByBean.setQpr3TotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(agencyCost);
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(pcostSnapShot.getCostCurrency())) * (pcostSnapShot.getEstimatedCost().doubleValue()));
		    			//spendByBean.setQpr3TotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    			totalCost = totalCost.add(gbpEstimatedCost);
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
        			if(pcostSnapShot.getEstimatedCost()!=null)
        			{
        				//spendByBean.setQpr3TotalCost(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
        				totalCost = totalCost.add(BigDecimal.valueOf(pcostSnapShot.getEstimatedCost().doubleValue() * exchangeRate));
        			}
        			else
        			{
        				//spendByBean.setQpr3TotalCost(null);
        			}
				}
			}
	    	
	    	if(projectCostSnapShot!=null && projectCostSnapShot.size()>0 && projectCostSnapShot.get(0).getEstimatedCost()!=null)
			{
				
	    		spendByBean.setFullYearTotalCost(totalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
	    		/*
		    	if(currencyId.intValue()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
				{
					
					BigDecimal agencyCost = projectCostSnapShot.get(0).getEstimatedCost();
		    		if(projectCostSnapShot.get(0).getCostCurrency()==JiveGlobals.getJiveIntProperty(SynchroConstants.SYNCHRO_DEFAULT_CURRENCY_ID, -1))
		    		{
		    			spendByBean.setFullYearTotalCost(agencyCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
		    		else
		    		{
		    			BigDecimal gbpEstimatedCost = BigDecimal.valueOf((SynchroUtils.getCurrencyExchangeRate(projectCostSnapShot.get(0).getCostCurrency())) * (projectCostSnapShot.get(0).getEstimatedCost().doubleValue()));
		    			spendByBean.setFullYearTotalCost(gbpEstimatedCost.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		    		}
				}
				else
				{
					Double exchangeRate = 1/SynchroUtils.getCurrencyExchangeRate(currencyId);
					if(projectCostSnapShot.get(0).getEstimatedCost()!=null)
					{
						spendByBean.setFullYearTotalCost(BigDecimal.valueOf(projectCostSnapShot.get(0).getEstimatedCost().doubleValue() * exchangeRate).setScale(2, BigDecimal.ROUND_HALF_EVEN));
					}
					else
					{
						spendByBean.setFullYearTotalCost(null);
					}
				}
				*/
			}
			else
			{
				spendByBean.setFullYearTotalCost(null);
			}
    	}
    	
    	return spendByBean;
		
    }
	public QPRSnapshotDAO getQprSnapshotDAO() {
		return qprSnapshotDAO;
	}


	public void setQprSnapshotDAO(QPRSnapshotDAO qprSnapshotDAO) {
		this.qprSnapshotDAO = qprSnapshotDAO;
	}

	public ProjectDAONew getProjectDAONew() {
		return projectDAONew;
	}

	public void setProjectDAONew(ProjectDAONew projectDAONew) {
		this.projectDAONew = projectDAONew;
	}



}
